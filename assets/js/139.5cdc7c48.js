(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{565:function(a,t,r){"use strict";r.r(t);var e=r(30),v=Object(e.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"java-面试题-二-的116-133题答案"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java-面试题-二-的116-133题答案"}},[a._v("#")]),a._v(" Java 面试题（二）的116-133题答案")]),a._v(" "),r("h3",{attrs:{id:"_116、什么时候使用访问者模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_116、什么时候使用访问者模式"}},[a._v("#")]),a._v(" 116、什么时候使用访问者模式？")]),a._v(" "),r("p",[a._v("访问者模式用于解决在类的继承层次上增加操作，但是不直接与之关联。这种模式采用双派发的形式来增加中间层。")]),a._v(" "),r("h3",{attrs:{id:"_117、什么时候使用组合模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_117、什么时候使用组合模式"}},[a._v("#")]),a._v(" 117、什么时候使用组合模式？")]),a._v(" "),r("p",[a._v("组合模式使用树结构来展示部分与整体继承关系。它允许客户端采用统一的形式来对待单个对象和对象容器。当你想要展示对象这种部分与整体的继承关系时采用组合模式。")]),a._v(" "),r("h3",{attrs:{id:"_118、继承和组合之间有什么不同"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_118、继承和组合之间有什么不同"}},[a._v("#")]),a._v(" 118、继承和组合之间有什么不同？")]),a._v(" "),r("p",[a._v("虽然两种都可以实现代码复用，但是组合比继承共灵活，因为组合允许你在运行时选择不同的实现。用组合实现的代码也比继承测试起来更加简单。")]),a._v(" "),r("h3",{attrs:{id:"_119、描述-java-中的重载和重写"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_119、描述-java-中的重载和重写"}},[a._v("#")]),a._v(" 119、描述 Java 中的重载和重写？")]),a._v(" "),r("p",[a._v("重载和重写都允许你用相同的名称来实现不同的功能，但是重载是编译时活动，而重写是运行时活动。你可以在同一个类中重载方法，但是只能在子类中重写方法。重写必须要有继承。")]),a._v(" "),r("h3",{attrs:{id:"_120、java-中-嵌套公共静态类与顶级类有什么不同"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_120、java-中-嵌套公共静态类与顶级类有什么不同"}},[a._v("#")]),a._v(" 120、Java 中，嵌套公共静态类与顶级类有什么不同？")]),a._v(" "),r("p",[a._v("类的内部可以有多个嵌套公共静态类，但是一个 Java 源文件只能有一个顶级公共类，并且顶级公共类的名称与源文件名称必须一致。")]),a._v(" "),r("h3",{attrs:{id:"_121、-oop-中的-组合、聚合和关联有什么区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_121、-oop-中的-组合、聚合和关联有什么区别"}},[a._v("#")]),a._v(" 121、 OOP 中的 组合、聚合和关联有什么区别？")]),a._v(" "),r("p",[a._v("如果两个对象彼此有关系，就说他们是彼此相关联的。组合和聚合是面向对象中的两种形式的关联。组合是一种比聚合更强力的关联。组合中，一个对象是另一个的拥有者，而聚合则是指一个对象使用另一个对象。如果对象 A 是由对象 B组合的，则 A 不存在的话，B 一定不存在，但是如果 A 对象聚合了一个对象 B，则即使 A 不存在了，B 也可以单独存在。")]),a._v(" "),r("h3",{attrs:{id:"_122、给我一个符合开闭原则的设计模式的例子"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_122、给我一个符合开闭原则的设计模式的例子"}},[a._v("#")]),a._v(" 122、给我一个符合开闭原则的设计模式的例子？")]),a._v(" "),r("p",[a._v("开闭原则要求你的代码对扩展开放，对修改关闭。这个意思就是说，如果你想增加一个新的功能，你可以很容易的在不改变已测试过的代码的前提下增加新的代码。有好几个设计模式是基于开闭原则的，如策略模式，如果你需要一个新的策略，只需要实现接口，增加配置，不需要改变核心逻辑。一个正在工作的例子是Collections.sort() 方法，这就是基于策略模式，遵循开闭原则的，你不需为新的对象修改 sort() 方法，你需要做的仅仅是实现你自己的 Comparator 接口。")]),a._v(" "),r("h3",{attrs:{id:"_123、抽象工厂模式和原型模式之间的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_123、抽象工厂模式和原型模式之间的区别"}},[a._v("#")]),a._v(" 123、抽象工厂模式和原型模式之间的区别？")]),a._v(" "),r("p",[a._v("抽象工厂模式：通常由工厂方法模式来实现。但一个工厂中往往含有多个工厂方法生成一系列的产品。这个模式强调的是客户代码一次保证只使用一个系列的产品。当要切换为另一个系列的产品，换一个工厂类即可。原型模式：工厂方法的最大缺点就是，对应一个继承体系的产品类，要有一个同样复杂的工厂类的继承体系。我们可以把工厂类中的工厂方法放到产品类自身之中吗？如果这样的话，就可以将两个继承体系为一个。这也就是原型模式的思想，原型模式中的工厂方法为 clone，它会返回一个拷贝（可以是浅拷贝，也可以是深拷贝，由设计者决定）。为了保证用户代码中到时可以通过指针调用 clone 来动态绑定地生成所需的具体的类。这些原型对象必须事先构造好。原型模式想对工厂方法模式的另一个好处是，拷贝的效率一般对构造的效率要高。")]),a._v(" "),r("h3",{attrs:{id:"_124、什么时候使用享元模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_124、什么时候使用享元模式"}},[a._v("#")]),a._v(" 124、什么时候使用享元模式？")]),a._v(" "),r("p",[a._v("享元模式通过共享对象来避免创建太多的对象。为了使用享元模式，你需要确保你的对象是不可变的，这样你才能安全的共享。JDK 中 String 池、Integer 池以及 Long 池都是很好的使用了享元模式的例子。")]),a._v(" "),r("h3",{attrs:{id:"_125、嵌套静态类与顶级类有什么区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_125、嵌套静态类与顶级类有什么区别"}},[a._v("#")]),a._v(" 125、嵌套静态类与顶级类有什么区别？")]),a._v(" "),r("p",[a._v("一个公共的顶级类的源文件名称与类名相同，而嵌套静态类没有这个要求。一个嵌套类位于顶级类内部，需要使用顶级类的名称来引用嵌套静态类，如HashMap.Entry 是一个嵌套静态类，HashMap 是一个顶级类，Entry 是一个嵌套静态类。")]),a._v(" "),r("h3",{attrs:{id:"_126、你能写出一个正则表达式来判断一个字符串是否是一个数字吗"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_126、你能写出一个正则表达式来判断一个字符串是否是一个数字吗"}},[a._v("#")]),a._v(" 126、你能写出一个正则表达式来判断一个字符串是否是一个数字吗？")]),a._v(" "),r("p",[a._v("一个数字字符串，只能包含数字，如 0 到 9 以及 +、- 开头，通过这个信息，你可以下一个如下的正则表达式来判断给定的字符串是不是数字。 首先要 import java.util.regex.Pattern 和 java.util.regex.Matcher")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v('public Boolean isNumeric(String str){\n\tPattern pattern = Pattern.compile("[0-9]*");\n\tMatcher isNum = pattern.matcher(str);\n\tif( !isNum.matches() ){\n\t\treturn false;\n\t}\n\treturn true;\n}\n')])])]),r("h3",{attrs:{id:"_127、java-中-受检查异常-和-不受检查异常的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_127、java-中-受检查异常-和-不受检查异常的区别"}},[a._v("#")]),a._v(" 127、Java 中，受检查异常 和 不受检查异常的区别？")]),a._v(" "),r("p",[a._v("受检查异常编译器在编译期间检查。对于这种异常，方法强制处理或者通过throws 子句声明。其中一种情况是 Exception 的子类但不是RuntimeException 的子类。非受检查是 RuntimeException 的子类，在编译阶段不受编译器的检查。")]),a._v(" "),r("h3",{attrs:{id:"_128、java-中-throw-和-throws-有什么区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_128、java-中-throw-和-throws-有什么区别"}},[a._v("#")]),a._v(" 128、Java 中，throw 和 throws 有什么区别")]),a._v(" "),r("p",[a._v("throw 用于抛出 java.lang.Throwable 类的一个实例化对象，意思是说你可以通过关键字 throw 抛出一个 Error 或者 一个 Exception，如：throw new IllegalArgumentException(“size must be multiple of 2″)而 throws 的作用是作为方法声明和签名的一部分，方法被抛出相应的异常以便调用者能处理。Java 中，任何未处理的受检查异常强制在 throws 子句中声明。")]),a._v(" "),r("h3",{attrs:{id:"_129、java-中-serializable-与-externalizable-的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_129、java-中-serializable-与-externalizable-的区别"}},[a._v("#")]),a._v(" 129、Java 中，Serializable 与 Externalizable 的区别？")]),a._v(" "),r("p",[a._v("Serializable 接口是一个序列化 Java 类的接口，以便于它们可以在网络上传输或者可以将它们的状态保存在磁盘上，是 JVM 内嵌的默认序列化方式，成本高、脆弱而且不安全。Externalizable 允许你控制整个序列化过程，指定特定的二进制格式，增加安全机制。")]),a._v(" "),r("h3",{attrs:{id:"_130、java-中-dom-和-sax-解析器有什么不同"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_130、java-中-dom-和-sax-解析器有什么不同"}},[a._v("#")]),a._v(" 130、Java 中，DOM 和 SAX 解析器有什么不同？")]),a._v(" "),r("p",[a._v("DOM 解析器将整个 XML 文档加载到内存来创建一棵 DOM 模型树，这样可以更快的查找节点和修改 XML 结构，而 SAX 解析器是一个基于事件的解析器，不会将整个 XML 文档加载到内存。由于这个原因，DOM 比 SAX 更快，也要求更多的内存，不适合于解析大 XML 文件。")]),a._v(" "),r("h3",{attrs:{id:"_131、说出-jdk-1-7-中的三个新特性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_131、说出-jdk-1-7-中的三个新特性"}},[a._v("#")]),a._v(" 131、说出 JDK 1.7 中的三个新特性？")]),a._v(" "),r("p",[a._v("虽然 JDK 1.7 不像 JDK 5 和 8 一样的大版本，但是，还是有很多新的特性，如 try-with-resource 语句，这样你在使用流或者资源的时候，就不需要手动关闭，Java 会自动关闭。Fork-Join 池某种程度上实现 Java 版的 Map-reduce。允许 Switch 中有 String 变量和文本。菱形操作符(<>)用于类型推断，不再需要在变量声明的右边申明泛型，因此可以写出可读写更强、更简洁的代码。另一个值得一提的特性是改善异常处理，如允许在同一个 catch 块中捕获多个异常。")]),a._v(" "),r("h3",{attrs:{id:"_132、说出-5-个-jdk-1-8-引入的新特性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_132、说出-5-个-jdk-1-8-引入的新特性"}},[a._v("#")]),a._v(" 132、说出 5 个 JDK 1.8 引入的新特性？")]),a._v(" "),r("p",[a._v("Java 8 在 Java 历史上是一个开创新的版本，下面 JDK 8 中 5 个主要的特性：")]),a._v(" "),r("p",[a._v("(1)Lambda 表达式,允许像对象一样传递匿名函数")]),a._v(" "),r("p",[a._v("(2)Stream API,充分利用现代多核 CPU，可以写出很简洁的代码")]),a._v(" "),r("p",[a._v("(3)Date 与 Time API,最终，有一个稳定、简单的日期和时间库可供你使用")]),a._v(" "),r("p",[a._v("(4)扩展方法，现在，接口中可以有静态、默认方法。")]),a._v(" "),r("p",[a._v("(5)重复注解，现在你可以将相同的注解在同一类型上使用多次。")]),a._v(" "),r("h3",{attrs:{id:"_133、java-中-maven-和-ant-有什么区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_133、java-中-maven-和-ant-有什么区别"}},[a._v("#")]),a._v(" 133、Java 中，Maven 和 ANT 有什么区别？")]),a._v(" "),r("p",[a._v("虽然两者功能上都是构建工具，都用于创建 Java 应用，但是 Maven 做的事情更多，在基于“约定优于配置”的概念下，提供标准的Java 项目结构，同时能为应用自动管理依赖（应用中所依赖的 JAR 文件）。Ant仅仅是软件构建工具，而Maven的定位是软件项目管理和理解工具。Maven除了具备Ant的功能外，有以下主要的功能：")]),a._v(" "),r("p",[a._v("（1）使用Project Object Model来对软件项目管理；\n（2）内置了更多的隐式规则，使得构建文件更加简单；\n（3）内置依赖管理和Repository来实现依赖的管理和统一存储；\n（4）内置了软件构建的生命周期；")])])}),[],!1,null,null,null);t.default=v.exports}}]);