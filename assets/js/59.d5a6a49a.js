(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{486:function(e,t,a){"use strict";a.r(t);var s=a(30),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"邮件服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#邮件服务"}},[e._v("#")]),e._v(" 邮件服务")]),e._v(" "),a("p",[e._v("发送邮件应该是网站的必备功能之一，什么注册验证，忘记密码或者是给用户发送营销信息。最早期的时候我们会使用 JavaMail 相关 api 来写发送邮件的相关代码，后来 Spring 推出了 JavaMailSender 更加简化了邮件发送的过程，在之后 Spring Boot 对此进行了封装就有了现在的 "),a("code",[e._v("spring-boot-starter-mail")]),e._v(" ,本章文章的介绍主要来自于此包。")]),e._v(" "),a("h2",{attrs:{id:"简单使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单使用"}},[e._v("#")]),e._v(" 简单使用")]),e._v(" "),a("h3",{attrs:{id:"_1、pom-包配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、pom-包配置"}},[e._v("#")]),e._v(" 1、pom 包配置")]),e._v(" "),a("p",[e._v("pom 包里面添加 "),a("code",[e._v("spring-boot-starter-mail")]),e._v(" 包引用")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<dependencies>\n\t<dependency> \n\t    <groupId>org.springframework.boot</groupId>\n\t    <artifactId>spring-boot-starter-mail</artifactId>\n\t</dependency> \n</dependencies>\n")])])]),a("h3",{attrs:{id:"_2、在-application-properties-中添加邮箱配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、在-application-properties-中添加邮箱配置"}},[e._v("#")]),e._v(" 2、在 application.properties 中添加邮箱配置")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("spring.mail.host=smtp.qiye.163.com //邮箱服务器地址\nspring.mail.username=xxx@oo.com //用户名\nspring.mail.password=xxyyooo    //密码\nspring.mail.default-encoding=UTF-8\n\nmail.fromMail.addr=xxx@oo.com  //以谁来发送邮件\n")])])]),a("h3",{attrs:{id:"_3、编写-mailservice-这里只提出实现类。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、编写-mailservice-这里只提出实现类。"}},[e._v("#")]),e._v(" 3、编写 mailService，这里只提出实现类。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@Component\npublic class MailServiceImpl implements MailService{\n\n    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n\n    @Autowired\n    private JavaMailSender mailSender;\n\n    @Value("${mail.fromMail.addr}")\n    private String from;\n\n    @Override\n    public void sendSimpleMail(String to, String subject, String content) {\n        SimpleMailMessage message = new SimpleMailMessage();\n        message.setFrom(from);\n        message.setTo(to);\n        message.setSubject(subject);\n        message.setText(content);\n\n        try {\n            mailSender.send(message);\n            logger.info("简单邮件已经发送。");\n        } catch (Exception e) {\n            logger.error("发送简单邮件时发生异常！", e);\n        }\n\n    }\n}\n')])])]),a("h3",{attrs:{id:"_4、编写-test-类进行测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、编写-test-类进行测试"}},[e._v("#")]),e._v(" 4、编写 test 类进行测试")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class MailServiceTest {\n\n    @Autowired\n    private MailService MailService;\n\n    @Test\n    public void testSimpleMail() throws Exception {\n        MailService.sendSimpleMail("ityouknow@126.com","test simple mail"," hello this is simple mail");\n    }\n}\n')])])]),a("p",[e._v("至此一个简单的文本发送就完成了。")]),e._v(" "),a("h2",{attrs:{id:"加点料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加点料"}},[e._v("#")]),e._v(" 加点料")]),e._v(" "),a("p",[e._v("但是在正常使用的过程中，我们通常在邮件中加入图片或者附件来丰富邮件的内容，下面讲介绍如何使用 Spring Boot 来发送丰富的邮件。")]),e._v(" "),a("h3",{attrs:{id:"发送-html-格式邮件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#发送-html-格式邮件"}},[e._v("#")]),e._v(" 发送 html 格式邮件")]),e._v(" "),a("p",[e._v("其它都不变在 MailService 添加 sendHtmlMail 方法.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('public void sendHtmlMail(String to, String subject, String content) {\n    MimeMessage message = mailSender.createMimeMessage();\n\n    try {\n        //true表示需要创建一个multipart message\n        MimeMessageHelper helper = new MimeMessageHelper(message, true);\n        helper.setFrom(from);\n        helper.setTo(to);\n        helper.setSubject(subject);\n        helper.setText(content, true);\n\n        mailSender.send(message);\n        logger.info("html邮件发送成功");\n    } catch (MessagingException e) {\n        logger.error("发送html邮件时发生异常！", e);\n    }\n}\n')])])]),a("p",[e._v("在测试类中构建 html 内容，测试发送")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@Test\npublic void testHtmlMail() throws Exception {\n    String content="<html>\\n" +\n            "<body>\\n" +\n            "    <h3>hello world ! 这是一封Html邮件!</h3>\\n" +\n            "</body>\\n" +\n            "</html>";\n    MailService.sendHtmlMail("ityouknow@126.com","test simple mail",content);\n}\n')])])]),a("h3",{attrs:{id:"发送带附件的邮件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#发送带附件的邮件"}},[e._v("#")]),e._v(" 发送带附件的邮件")]),e._v(" "),a("p",[e._v("在 MailService 添加 sendAttachmentsMail 方法.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('public void sendAttachmentsMail(String to, String subject, String content, String filePath){\n    MimeMessage message = mailSender.createMimeMessage();\n\n    try {\n        MimeMessageHelper helper = new MimeMessageHelper(message, true);\n        helper.setFrom(from);\n        helper.setTo(to);\n        helper.setSubject(subject);\n        helper.setText(content, true);\n\n        FileSystemResource file = new FileSystemResource(new File(filePath));\n        String fileName = filePath.substring(filePath.lastIndexOf(File.separator));\n        helper.addAttachment(fileName, file);\n\n        mailSender.send(message);\n        logger.info("带附件的邮件已经发送。");\n    } catch (MessagingException e) {\n        logger.error("发送带附件的邮件时发生异常！", e);\n    }\n}\n')])])]),a("blockquote",[a("p",[e._v("添加多个附件可以使用多条 "),a("code",[e._v("helper.addAttachment(fileName, file)")])])]),e._v(" "),a("p",[e._v("在测试类中添加测试方法")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@Test\npublic void sendAttachmentsMail() {\n    String filePath="e:\\\\tmp\\\\application.log";\n    mailService.sendAttachmentsMail("ityouknow@126.com", "主题：带附件的邮件", "有附件，请查收！", filePath);\n}\n')])])]),a("h3",{attrs:{id:"发送带静态资源的邮件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#发送带静态资源的邮件"}},[e._v("#")]),e._v(" 发送带静态资源的邮件")]),e._v(" "),a("p",[e._v("邮件中的静态资源一般就是指图片，在 MailService 添加 sendAttachmentsMail 方法.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('public void sendInlineResourceMail(String to, String subject, String content, String rscPath, String rscId){\n    MimeMessage message = mailSender.createMimeMessage();\n\n    try {\n        MimeMessageHelper helper = new MimeMessageHelper(message, true);\n        helper.setFrom(from);\n        helper.setTo(to);\n        helper.setSubject(subject);\n        helper.setText(content, true);\n\n        FileSystemResource res = new FileSystemResource(new File(rscPath));\n        helper.addInline(rscId, res);\n\n        mailSender.send(message);\n        logger.info("嵌入静态资源的邮件已经发送。");\n    } catch (MessagingException e) {\n        logger.error("发送嵌入静态资源的邮件时发生异常！", e);\n    }\n}\n')])])]),a("p",[e._v("在测试类中添加测试方法")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@Test\npublic void sendInlineResourceMail() {\n    String rscId = "neo006";\n    String content="<html><body>这是有图片的邮件：<img src=\\\'cid:" + rscId + "\\\' ></body></html>";\n    String imgPath = "C:\\\\Users\\\\summer\\\\Pictures\\\\favicon.png";\n\n    mailService.sendInlineResourceMail("ityouknow@126.com", "主题：这是有图片的邮件", content, imgPath, rscId);\n}\n')])])]),a("blockquote",[a("p",[e._v("添加多个图片可以使用多条 "),a("code",[e._v("<img src='cid:\" + rscId + \"' >")]),e._v(" 和 "),a("code",[e._v("helper.addInline(rscId, res)")]),e._v(" 来实现")])]),e._v(" "),a("p",[e._v("到此所有的邮件发送服务已经完成了。")]),e._v(" "),a("h2",{attrs:{id:"邮件系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#邮件系统"}},[e._v("#")]),e._v(" 邮件系统")]),e._v(" "),a("p",[e._v("上面发送邮件的基础服务就这些了，但是如果我们要做成一个邮件系统的话还需要考虑以下几个问题：")]),e._v(" "),a("h3",{attrs:{id:"邮件模板"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#邮件模板"}},[e._v("#")]),e._v(" 邮件模板")]),e._v(" "),a("p",[e._v("我们会经常收到这样的邮件：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("尊敬的neo用户：\n              \n          恭喜您注册成为xxx网的用户,，同时感谢您对xxx的关注与支持并欢迎您使用xx的产品与服务。\n          ...\n")])])]),a("p",[e._v("其中只有 neo 这个用户名在变化，其它邮件内容均不变，如果每次发送邮件都需要手动拼接的话会不够优雅，并且每次模板的修改都需要改动代码的话也很不方便，因此对于这类邮件需求，都建议做成邮件模板来处理。模板的本质很简单，就是在模板中替换变化的参数，转换为 html 字符串即可，这里以"),a("code",[e._v("thymeleaf")]),e._v("为例来演示。")]),e._v(" "),a("p",[a("strong",[e._v("1、pom 中导入 thymeleaf 的包")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n")])])]),a("p",[e._v("**2、在 resorces/templates 下创建 emailTemplate.html **")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<!DOCTYPE html>\n<html lang="zh" xmlns:th="http://www.thymeleaf.org">\n    <head>\n        <meta charset="UTF-8"/>\n        <title>Title</title>\n    </head>\n    <body>\n        您好,这是验证邮件,请点击下面的链接完成验证,<br/>\n        <a href="#" th:href="@{ http://www.ityouknow.com/neo/{id}(id=${id}) }">激活账号</a>\n    </body>\n</html>\n')])])]),a("p",[a("strong",[e._v("3、解析模板并发送")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@Test\npublic void sendTemplateMail() {\n    //创建邮件正文\n    Context context = new Context();\n    context.setVariable("id", "006");\n    String emailContent = templateEngine.process("emailTemplate", context);\n\n    mailService.sendHtmlMail("ityouknow@126.com","主题：这是模板邮件",emailContent);\n}\n')])])]),a("h3",{attrs:{id:"发送失败"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#发送失败"}},[e._v("#")]),e._v(" 发送失败")]),e._v(" "),a("p",[e._v("因为各种原因，总会有邮件发送失败的情况，比如：邮件发送过于频繁、网络异常等。在出现这种情况的时候，我们一般会考虑重新重试发送邮件，会分为以下几个步骤来实现：")]),e._v(" "),a("ul",[a("li",[e._v("1、接收到发送邮件请求，首先记录请求并且入库。")]),e._v(" "),a("li",[e._v("2、调用邮件发送接口发送邮件，并且将发送结果记录入库。")]),e._v(" "),a("li",[e._v("3、启动定时系统扫描时间段内，未发送成功并且重试次数小于3次的邮件，进行再次发送")])]),e._v(" "),a("h3",{attrs:{id:"异步发送"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步发送"}},[e._v("#")]),e._v(" 异步发送")]),e._v(" "),a("p",[e._v("很多时候邮件发送并不是我们主业务必须关注的结果，比如通知类、提醒类的业务可以允许延时或者失败。这个时候可以采用异步的方式来发送邮件，加快主交易执行速度，在实际项目中可以采用MQ发送邮件相关参数，监听到消息队列之后启动发送邮件。")])])}),[],!1,null,null,null);t.default=n.exports}}]);