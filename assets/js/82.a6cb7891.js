(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{511:function(t,a,e){"use strict";e.r(a);var s=e(30),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"java-面试题-一-的51-95题答案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-面试题-一-的51-95题答案"}},[t._v("#")]),t._v(" Java 面试题（一）的51~95题答案")]),t._v(" "),e("h3",{attrs:{id:"_51、类-examplea-继承-exception-类-exampleb-继承examplea。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_51、类-examplea-继承-exception-类-exampleb-继承examplea。"}},[t._v("#")]),t._v(" 51、类 ExampleA 继承 Exception，类 ExampleB 继承ExampleA。")]),t._v(" "),e("p",[t._v("有如下代码片断：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('try {\n\tthrow new ExampleB("b")\n}\ncatch（ExampleA e）{\n\tSystem.out.println("ExampleA");\n}\ncatch（Exception e）{\n\tSystem.out.println("Exception");\n}\n')])])]),e("p",[t._v("**请问执行此段代码的输出是什么？")]),t._v(" "),e("p",[e("strong",[t._v("答：")])]),t._v(" "),e("p",[t._v("输出：ExampleA。（根据里氏代换原则[能使用父类型的地方一定能使用子类型]，抓取 ExampleA 类型异常的 catch 块能够抓住 try 块中抛出的 ExampleB 类型的异常）")]),t._v(" "),e("p",[t._v("面试题 - 说出下面代码的运行结果。（此题的出处是《Java 编程思想》一书）")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('class Annoyance extends Exception {\n}\nclass Sneeze extends Annoyance {\n}\nclass Human {\n\tpublic static void main(String[] args)\n\tthrows Exception {\n\t\ttry {\n\t\t\ttry {\n\t\t\t\tthrow new Sneeze();\n\t\t\t}\n\t\t\tcatch ( Annoyance a ) {\n\t\t\t\tSystem.out.println("Caught Annoyance");\n\t\t\t\tthrow a;\n\t\t\t}\n\t\t}\n\t\tcatch ( Sneeze s ) {\n\t\t\tSystem.out.println("Caught Sneeze");\n\t\t\treturn ;\n\t\t}\n\t\tfinally {\n\t\t\tSystem.out.println("Hello World!");\n\t\t}\n\t}\n}\n')])])]),e("h3",{attrs:{id:"_52、list、set、map-是否继承自-collection-接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_52、list、set、map-是否继承自-collection-接口"}},[t._v("#")]),t._v(" 52、List、Set、Map 是否继承自 Collection 接口？")]),t._v(" "),e("p",[t._v("List、Set 是 ，Map 不是。Map 是键值对映射容器，与 List 和 Set 有明显的区别，而 Set 存储的零散的元素且不允许有重复元素（数学中的集合也是如此），List是线性结构的容器，适用于按数值索引访问元素的情形。")]),t._v(" "),e("h3",{attrs:{id:"_53、阐述-arraylist、vector、linkedlist-的存储性能和特性。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_53、阐述-arraylist、vector、linkedlist-的存储性能和特性。"}},[t._v("#")]),t._v(" 53、阐述 ArrayList、Vector、LinkedList 的存储性能和特性。")]),t._v(" "),e("p",[t._v("ArrayList 和 Vector 都是使用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以索引数据快而插入数据慢，Vector 中的方法由于添加了 synchronized 修饰，因此 Vector 是线程安全的容器，但性能上较ArrayList 差，因此已经是 Java 中的遗留容器。LinkedList 使用双向链表实现存储（将内存中零散的内存单元通过附加的引用关联起来，形成一个可以按序号索引的线性结构，这种链式存储方式与数组的连续存储方式相比，内存的利用率更高），按序号索引数据需要进行前向或后向遍历，但是插入数据时只需要记录本项的前后项即可，所以插入速度较快。Vector 属于遗留容器（Java 早期的版本中提供的容器，除此之外，Hashtable、Dictionary、BitSet、Stack、Properties都是遗留容器），已经不推荐使用，但是由于 ArrayList 和 LinkedListed 都是非线程安全的，如果遇到多个线程操作同一个容器的场景，则可以通过工具类Collections 中的 synchronizedList 方法将其转换成线程安全的容器后再使用（这是对装潢模式的应用，将已有对象传入另一个类的构造器中创建新的对象来增强实现）。")]),t._v(" "),e("p",[t._v("**补充：**遗留容器中的 Properties 类和 Stack 类在设计上有严重的问题，Properties是一个键和值都是字符串的特殊的键值对映射，在设计上应该是关联一个Hashtable 并将其两个泛型参数设置为 String 类型，但是 Java API 中的Properties 直接继承了 Hashtable，这很明显是对继承的滥用。这里复用代码的方式应该是 Has-A 关系而不是 Is-A 关系，另一方面容器都属于工具类，继承工具类本身就是一个错误的做法，使用工具类最好的方式是 Has-A 关系（关联）或Use-A 关系（依赖）。同理，Stack 类继承 Vector 也是不正确的。Sun 公司的工程师们也会犯这种低级错误，让人唏嘘不已。")]),t._v(" "),e("h3",{attrs:{id:"_54、collection-和-collections-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_54、collection-和-collections-的区别"}},[t._v("#")]),t._v(" 54、Collection 和 Collections 的区别？")]),t._v(" "),e("p",[t._v("Collection 是一个接口，它是 Set、List 等容器的父接口；Collections 是个一个工具类，提供了一系列的静态方法来辅助容器操作，这些方法包括对容器的搜索、排序、线程安全化等等。")]),t._v(" "),e("h3",{attrs:{id:"_55、list、map、set-三个接口存取元素时-各有什么特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_55、list、map、set-三个接口存取元素时-各有什么特点"}},[t._v("#")]),t._v(" 55、List、Map、Set 三个接口存取元素时，各有什么特点？")]),t._v(" "),e("p",[t._v("List 以特定索引来存取元素，可以有重复元素。Set 不能存放重复元素（用对象的equals()方法来区分元素是否重复）。Map 保存键值对（key-value pair）映射，映射关系可以是一对一或多对一。Set 和 Map 容器都有基于哈希存储和排序树的两种实现版本，基于哈希存储的版本理论存取时间复杂度为 O(1)，而基于排序树版本的实现在插入或删除元素时会按照元素或元素的键（key）构成排序树从而达到排序和去重的效果。")]),t._v(" "),e("h3",{attrs:{id:"_56、treemap-和-treeset-在排序时如何比较元素-collections-工具类中的-sort-方法如何比较元素"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_56、treemap-和-treeset-在排序时如何比较元素-collections-工具类中的-sort-方法如何比较元素"}},[t._v("#")]),t._v(" 56、TreeMap 和 TreeSet 在排序时如何比较元素？Collections 工具类中的 sort()方法如何比较元素？")]),t._v(" "),e("p",[t._v("TreeSet 要求存放的对象所属的类必须实现 Comparable 接口，该接口提供了比较元素的 compareTo()方法，当插入元素时会回调该方法比较元素的大小。TreeMap 要求存放的键值对映射的键必须实现 Comparable 接口从而根据键对元素进 行排 序。Collections 工具类的 sort 方法有两种重载的形式，第一种要求传入的待排序容器中存放的对象比较实现 Comparable 接口以实现元素的比较；第二种不强制性的要求容器中的元素必须可比较，但是要求传入第二个参数，参数是Comparator 接口的子类型（需要重写 compare 方法实现元素的比较），相当于一个临时定义的排序规则，其实就是通过接口注入比较元素大小的算法，也是对回调模式的应用（Java 中对函数式编程的支持）。")]),t._v(" "),e("h3",{attrs:{id:"_57、thread-类的-sleep-方法和对象的-wait-方法都可以让线程暂停执行-它们有什么区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_57、thread-类的-sleep-方法和对象的-wait-方法都可以让线程暂停执行-它们有什么区别"}},[t._v("#")]),t._v(" 57、Thread 类的 sleep()方法和对象的 wait()方法都可以让线程暂停执行，它们有什么区别?")]),t._v(" "),e("p",[t._v("sleep()方法（休眠）是线程类（Thread）的静态方法，调用此方法会让当前线程暂停执行指定的时间，将执行机会（CPU）让给其他线程，但是对象的锁依然保持，因此休眠时间结束后会自动恢复（线程回到就绪状态，请参考第 66 题中的线程状态转换图）。wait()是 Object 类的方法，调用对象的 wait()方法导致当前线程放弃对象的锁（线程暂停执行），进入对象的等待池（wait pool），只有调用对象的 notify()方法（或 notifyAll()方法）时才能唤醒等待池中的线程进入等锁池（lock pool），如果线程重新获得对象的锁就可以进入就绪状态。")]),t._v(" "),e("p",[t._v("补充：可能不少人对什么是进程，什么是线程还比较模糊，对于为什么需要多线程编程也不是特别理解。简单的说：进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，是操作系统进行资源分配和调度的一个独立单位；线程是进程的一个实体，是 CPU 调度和分派的基本单位，是比进程更小的能独立运行的基本单位。线程的划分尺度小于进程，这使得多线程程序的并发性高；进程在执行时通常拥有独立的内存单元，而线程之间可以共享内存。使用多线程的编程通常能够带来更好的性能和用户体验，但是多线程的程序对于其他程序是不友好的，因为它可能占用了更多的 CPU 资源。当然，也不是线程越多，程序的性能就越好，因为线程之间的调度和切换也会浪费 CPU 时间。时下很时髦的 Node.js就采用了单线程异步 I/O 的工作模式。")]),t._v(" "),e("h3",{attrs:{id:"_58、线程的-sleep-方法和-yield-方法有什么区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_58、线程的-sleep-方法和-yield-方法有什么区别"}},[t._v("#")]),t._v(" 58、线程的 sleep()方法和 yield()方法有什么区别？")]),t._v(" "),e("p",[t._v("（1） sleep()方法给其他线程运行机会时不考虑线程的优先级，因此会给低优先级的线程以运行的机会；yield()方法只会给相同优先级或更高优先级的线程以运行的机会；")]),t._v(" "),e("p",[t._v("（2） 线程执行 sleep()方法后转入阻塞（blocked）状态，而执行 yield()方法后转入就绪（ready）状态；")]),t._v(" "),e("p",[t._v("（3）sleep()方法声明抛出 InterruptedException，而 yield()方法没有声明任何异常；")]),t._v(" "),e("p",[t._v("（4）sleep()方法比 yield()方法（跟操作系统 CPU 调度相关）具有更好的可移植性。")]),t._v(" "),e("h3",{attrs:{id:"_59、当一个线程进入一个对象的-synchronized-方法-a-之后-其它线程是否可进入此对象的-synchronized-方法-b"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_59、当一个线程进入一个对象的-synchronized-方法-a-之后-其它线程是否可进入此对象的-synchronized-方法-b"}},[t._v("#")]),t._v(" 59、当一个线程进入一个对象的 synchronized 方法 A 之后，其它线程是否可进入此对象的 synchronized 方法 B？")]),t._v(" "),e("p",[t._v("不能。其它线程只能访问该对象的非同步方法，同步方法则不能进入。因为非静态方法上的 synchronized 修饰符要求执行方法时要获得对象的锁，如果已经进入A 方法说明对象锁已经被取走，那么试图进入 B 方法的线程就只能在等锁池（注意不是等待池哦）中等待对象的锁。")]),t._v(" "),e("h3",{attrs:{id:"_60、请说出与线程同步以及线程调度相关的方法。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_60、请说出与线程同步以及线程调度相关的方法。"}},[t._v("#")]),t._v(" 60、请说出与线程同步以及线程调度相关的方法。")]),t._v(" "),e("p",[t._v("（1） wait()：使一个线程处于等待（阻塞）状态，并且释放所持有的对象的锁；")]),t._v(" "),e("p",[t._v("（2）sleep()：使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要处理 InterruptedException 异常；")]),t._v(" "),e("p",[t._v("（3）notify()：唤醒一个处于等待状态的线程，当然在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由 JVM 确定唤醒哪个线程，而且与优先级无关；")]),t._v(" "),e("p",[t._v("（4）notityAll()：唤醒所有处于等待状态的线程，该方法并不是将对象的锁给所有线程，而是让它们竞争，只有获得锁的线程才能进入就绪状态；")]),t._v(" "),e("p",[t._v("补充：Java 5 通过 Lock 接口提供了显式的锁机制（explicit lock），增强了灵活性以及对线程的协调。Lock 接口中定义了加锁（lock()）和解锁（unlock()）的方法，同时还提供了 newCondition()方法来产生用于线程之间通信的 Condition 对象；此外，Java 5 还提供了信号量机制（semaphore），信号量可以用来限制对某个共享资源进行访问的线程的数量。在对资源进行访问之前，线程必须得到信号量的许可（调用 Semaphore 对象的 acquire()方法）；在完成对资源的访问后，线程必须向信号量归还许可（调用 Semaphore 对象的 release()方法）。")]),t._v(" "),e("h3",{attrs:{id:"_61、编写多线程程序有几种实现方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_61、编写多线程程序有几种实现方式"}},[t._v("#")]),t._v(" 61、编写多线程程序有几种实现方式？")]),t._v(" "),e("p",[t._v("Java 5 以前实现多线程有两种实现方法：一种是继承 Thread 类；另一种是实现Runnable 接口。两种方式都要通过重写 run()方法来定义线程的行为，推荐使用后者，因为 Java 中的继承是单继承，一个类有一个父类，如果继承了 Thread 类就无法再继承其他类了，显然使用 Runnable 接口更为灵活。")]),t._v(" "),e("p",[t._v("补充：Java 5 以后创建线程还有第三种方式：实现 Callable 接口，该接口中的 call方法可以在线程执行结束时产生一个返回值。")]),t._v(" "),e("h3",{attrs:{id:"_62、synchronized-关键字的用法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_62、synchronized-关键字的用法"}},[t._v("#")]),t._v(" 62、synchronized 关键字的用法？")]),t._v(" "),e("p",[t._v("synchronized 关键字可以将对象或者方法标记为同步，以实现对对象和方法的互斥访问，可以用 synchronized(对象) { … }定义同步代码块，或者在声明方法时将 synchronized 作为方法的修饰符。在第 60 题的例子中已经展示了synchronized 关键字的用法。")]),t._v(" "),e("h3",{attrs:{id:"_63、举例说明同步和异步。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_63、举例说明同步和异步。"}},[t._v("#")]),t._v(" 63、举例说明同步和异步。")]),t._v(" "),e("p",[t._v("如果系统中存在临界资源（资源数量少于竞争资源的线程数量的资源），例如正在写的数据以后可能被另一个线程读到，或者正在读的数据可能已经被另一个线程写过了，那么这些数据就必须进行同步存取（数据库操作中的排他锁就是最好的例子）。当应用程序在对象上调用了一个需要花费很长时间来执行的方法，并且不希望让程序等待方法的返回时，就应该使用异步编程，在很多情况下采用异步途径往往更有效率。事实上，所谓的同步就是指阻塞式操作，而异步就是非阻塞式操作。")]),t._v(" "),e("h3",{attrs:{id:"_64、启动一个线程是调用-run-还是-start-方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_64、启动一个线程是调用-run-还是-start-方法"}},[t._v("#")]),t._v(" 64、启动一个线程是调用 run()还是 start()方法？")]),t._v(" "),e("p",[t._v("启动一个线程是调用 start()方法，使线程所代表的虚拟处理机处于可运行状态，这意味着它可以由 JVM 调度并执行，这并不意味着线程就会立即运行。run()方法是线程启动后要进行回调（callback）的方法。")]),t._v(" "),e("h3",{attrs:{id:"_65、什么是线程池-thread-pool"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_65、什么是线程池-thread-pool"}},[t._v("#")]),t._v(" 65、什么是线程池（thread pool）？")]),t._v(" "),e("p",[t._v("在面向对象编程中，创建和销毁对象是很费时间的，因为创建一个对象要获取内存资源或者其它更多资源。在 Java 中更是如此，虚拟机将试图跟踪每一个对象，以便能够在对象销毁后进行垃圾回收。所以提高服务程序效率的一个手段就是尽可能减少创建和销毁对象的次数，特别是一些很耗资源的对象创建和销毁，这就是”池化资源”技术产生的原因。线程池顾名思义就是事先创建若干个可执行的线程放入一个池（容器）中，需要的时候从池中获取线程不用自行创建，使用完毕不需要销毁线程而是放回池中，从而减少创建和销毁线程对象的开销。Java 5+中的 Executor 接口定义一个执行线程的工具。它的子类型即线程池接口是 ExecutorService。要配置一个线程池是比较复杂的，尤其是对于线程池的原理不是很清楚的情况下，因此在工具类 Executors 面提供了一些静态工厂方法，生成一些常用的线程池，如下所示：")]),t._v(" "),e("p",[t._v("（1）newSingleThreadExecutor：创建一个单线程的线程池。这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。")]),t._v(" "),e("p",[t._v("（2）newFixedThreadPool：创建固定大小的线程池。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。")]),t._v(" "),e("p",[t._v("（3） newCachedThreadPool：创建一个可缓存的线程池。如果线程池的大小超过了处理任务所需要的线程，那么就会回收部分空闲（60 秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说 JVM）能够创建的最大线程大小。")]),t._v(" "),e("p",[t._v("（4）newScheduledThreadPool：创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求。")]),t._v(" "),e("p",[t._v("（5）newSingleThreadExecutor：创建一个单线程的线程池。此线程池支持定时以及周期性执行任务的需求。")]),t._v(" "),e("p",[t._v("第 60 题的例子中演示了通过 Executors 工具类创建线程池并使用线程池执行线程的代码。如果希望在服务器上使用线程池，强烈建议使用 newFixedThreadPool方法来创建线程池，这样能获得更好的性能。")]),t._v(" "),e("h3",{attrs:{id:"_66、线程的基本状态以及状态之间的关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_66、线程的基本状态以及状态之间的关系"}},[t._v("#")]),t._v(" 66、线程的基本状态以及状态之间的关系？")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/8/16ee51ba254f46ef~tplv-t2oaga2asx-watermark.awebp",alt:"img"}})]),t._v(" "),e("p",[t._v("说明：其中 Running 表示运行状态，Runnable 表示就绪状态（万事俱备，只欠CPU），Blocked 表示阻塞状态，阻塞状态又有多种情况，可能是因为调用 wait()方法进入等待池，也可能是执行同步方法或同步代码块进入等锁池，或者是调用了 sleep()方法或 join()方法等待休眠或其他线程结束，或是因为发生了 I/O 中断。")]),t._v(" "),e("h3",{attrs:{id:"_67、简述-synchronized-和-java-util-concurrent-locks-lock的异同"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_67、简述-synchronized-和-java-util-concurrent-locks-lock的异同"}},[t._v("#")]),t._v(" 67、简述 synchronized 和 java.util.concurrent.locks.Lock的异同？")]),t._v(" "),e("p",[t._v("Lock 是 Java 5 以后引入的新的 API，和关键字 synchronized 相比主要相同点：Lock 能完成 synchronized 所实现的所有功能；主要不同点：Lock 有比synchronized 更精确的线程语义和更好的性能，而且不强制性的要求一定要获得锁。synchronized 会自动释放锁，而 Lock 一定要求程序员手工释放，并且最好在 finally 块中释放（这是释放外部资源的最好的地方）。")]),t._v(" "),e("h3",{attrs:{id:"_68、java-中如何实现序列化-有什么意义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_68、java-中如何实现序列化-有什么意义"}},[t._v("#")]),t._v(" 68、Java 中如何实现序列化，有什么意义？")]),t._v(" "),e("p",[t._v("序列化就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化。可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间。序列化是为了解决对象流读写操作时可能引发的问题（如果不进行序列化可能会存在数据乱序的问题）。要实现序列化，需要让一个类实现 Serializable 接口，该接口是一个标识性接口，标注该类对象是可被序列化的，然后使用一个输出流来构造一个对象输出流并通过 writeObject(Object)方法就可以将实现对象写出（即保存其状态）；如果需要反序列化则可以用一个输入流建立对象输入流，然后通过 readObject 方法从流中读取对象。序列化除了能够实现对象的持久化之外，还能够用于对象的深度克隆（可以参考第 29 题）。")]),t._v(" "),e("h3",{attrs:{id:"_69、java-中有几种类型的流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_69、java-中有几种类型的流"}},[t._v("#")]),t._v(" 69、Java 中有几种类型的流？")]),t._v(" "),e("p",[t._v("字节流和字符流。字节流继承于 InputStream、OutputStream，字符流继承于Reader、Writer。在 java.io 包中还有许多其他的流，主要是为了提高性能和使用方便。关于 Java 的 I/O 需要注意的有两点：一是两种对称性（输入和输出的对称性，字节和字符的对称性）；二是两种设计模式（适配器模式和装潢模式）。另外 Java 中的流不同于 C#的是它只有一个维度一个方向。")]),t._v(" "),e("h3",{attrs:{id:"_70、写一个方法-输入一个文件名和一个字符串-统计这个字符串在这个文件中出现的次数。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_70、写一个方法-输入一个文件名和一个字符串-统计这个字符串在这个文件中出现的次数。"}},[t._v("#")]),t._v(" 70、写一个方法，输入一个文件名和一个字符串，统计这个字符串在这个文件中出现的次数。")]),t._v(" "),e("p",[t._v("代码如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import java.io.BufferedReader;\nimport java.io.FileReader;\npublic final class MyUtil {\n\t// 工具类中的方法都是静态方式访问的因此将构造器私有不允许创建对象\n\t(绝对好习惯)\n\tprivate MyUtil() {\n\t\tthrow new AssertionError();\n\t}\n\t/**\n* 统计给定文件中给定字符串的出现次数\n*\n* @param filename 文件名\n* @param word 字符串\n* @return 字符串在文件中出现的次数\n*/\n\tpublic static int countWordInFile(String filename, String word) {\n\t\tint counter = 0;\n\t\ttry (FileReader fr = new FileReader(filename)) {\n\t\t\ttry (BufferedReader br = new BufferedReader(fr)) {\n\t\t\t\tString line = null;\n\t\t\t\twhile ((line = br.readLine()) != null) {\n\t\t\t\t\tint index = -1;\n\t\t\t\t\twhile (line.length() >= word.length() && (index =\n\t\t\t\t\tline.indexOf(word)) >= 0) {\n\t\t\t\t\t\tcounter++;\n\t\t\t\t\t\tline = line.substring(index + word.length());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t}\n\t\treturn counter;\n\t}\n}\n")])])]),e("h3",{attrs:{id:"_71、如何用-java-代码列出一个目录下所有的文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_71、如何用-java-代码列出一个目录下所有的文件"}},[t._v("#")]),t._v(" 71、如何用 Java 代码列出一个目录下所有的文件？")]),t._v(" "),e("p",[t._v("如果只要求列出当前文件夹下的文件，代码如下所示：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('import java.io.File;\nclass Test12 {\n\tpublic static void main(String[] args) {\n\t\tFile f = new File("/Users/Hao/Downloads");\n\t\tfor (File temp : f.listFiles()) {\n\t\t\tif(temp.isFile()) {\n\t\t\t\tSystem.out.println(temp.getName());\n\t\t\t}\n\t\t}\n\t}\n}\n')])])]),e("p",[t._v("如果需要对文件夹继续展开，代码如下所示：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('import java.io.File;\nclass Test12 {\n\tpublic static void main(String[] args) {\n\t\tshowDirectory(new File("/Users/Hao/Downloads"));\n\t}\n\tpublic static void showDirectory(File f) {\n\t\t_walkDirectory(f, 0);\n\t}\n\tprivate static void _walkDirectory(File f, int level) {\n\t\tif(f.isDirectory()) {\n\t\t\tfor (File temp : f.listFiles()) {\n\t\t\t\t_walkDirectory(temp, level + 1);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (int i = 0; i < level - 1; i++) {\n\t\t\t\tSystem.out.print("t");\n}\nSystem.out.println(f.getName());\n}\n}\n}\n')])])]),e("p",[t._v("在 Java 7 中可以使用 NIO.2 的 API 来做同样的事情，代码如下所示：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('class ShowFileTest {\n\tpublic static void main(String[] args) throws IOException {\n\t\tPath initPath = Paths.get("/Users/Hao/Downloads");\n\t\tFiles.walkFileTree(initPath, new SimpleFileVisitor<Path>() {\n\t\t\t@Override\n\t\t\tpublic FileVisitResult visitFile(Path file, BasicFileAttributes\n\t\t\tattrs)\n\t\t\tthrows IOException {\n\t\t\t\tSystem.out.println(file.getFileName().toString());\n\t\t\t\treturn FileVisitResult.CONTINUE;\n\t\t\t}\n\t\t}\n\t\t);\n\t}\n}\n')])])]),e("h3",{attrs:{id:"_72、用-java-的套接字编程实现一个多线程的回显-echo-服务器。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_72、用-java-的套接字编程实现一个多线程的回显-echo-服务器。"}},[t._v("#")]),t._v(" 72、用 Java 的套接字编程实现一个多线程的回显（echo）服务器。")]),t._v(" "),e("h3",{attrs:{id:"_73、xml-文档定义有几种形式-它们之间有何本质区别-解析xml-文档有哪几种方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_73、xml-文档定义有几种形式-它们之间有何本质区别-解析xml-文档有哪几种方式"}},[t._v("#")]),t._v(" 73、XML 文档定义有几种形式？它们之间有何本质区别？解析XML 文档有哪几种方式？")]),t._v(" "),e("p",[t._v("XML 文档定义分为 DTD 和 Schema 两种形式，二者都是对 XML 语法的约束，其本质区别在于 Schema 本身也是一个 XML 文件，可以被 XML 解析器解析，而且可以为 XML 承载的数据定义类型，约束能力较之 DTD 更强大。对 XML 的解析主要有 DOM（文档对象模型，Document Object Model）、SAX（Simple API forXML）和 StAX（Java 6 中引入的新的解析 XML 的方式，Streaming API for XML），其中 DOM 处理大型文件时其性能下降的非常厉害，这个问题是由 DOM 树结构占用的内存较多造成的，而且 DOM 解析方式必须在解析文件之前把整个文档装入内存，适合对 XML 的随机访问（典型的用空间换取时间的策略）；SAX 是事件驱动型的 XML 解析方式，它顺序读取 XML 文件，不需要一次全部装载整个文件。当遇到像文件开头，文档结束，或者标签开头与标签结束时，它会触发一个事件，用户通过事件回调代码来处理 XML 文件，适合对 XML 的顺序访问；顾名思义，StAX 把重点放在流上，实际上 StAX 与其他解析方式的本质区别就在于应用程序能够把 XML 作为一个事件流来处理。将 XML 作为一组事件来处理的想法并不新颖（ SAX 就是这样做的），但不同之处在于 StAX 允许应用程序代码把这些事件逐个拉出来，而不用提供在解析器方便时从解析器中接收事件的处理程序。")]),t._v(" "),e("h3",{attrs:{id:"_74、你在项目中哪些地方用到了-xml"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_74、你在项目中哪些地方用到了-xml"}},[t._v("#")]),t._v(" 74、你在项目中哪些地方用到了 XML？")]),t._v(" "),e("p",[t._v("XML 的主要作用有两个方面：数据交换和信息配置。在做数据交换时，XML 将数据用标签组装成起来，然后压缩打包加密后通过网络传送给接收者，接收解密与解压缩后再从 XML 文件中还原相关信息进行处理，XML 曾经是异构系统间交换数据的事实标准，但此项功能几乎已经被被JSON（JavaScript Object Notation）取而代之。当然，目前很多软件仍然使用 XML 来存储配置信息，我们在很多项目中通常也会将作为配置信息的硬代码写在 XML 文件中，Java 的很多框架也是这么做的，而且这些框架都选择了 dom4j  作为处理 XML 的工具，因为 Sun 公司的官方API 实在不怎么好用。")]),t._v(" "),e("p",[t._v("补充：现在有很多时髦的软件（如 Sublime）已经开始将配置文件书写成 JSON格式，我们已经强烈的感受到 XML 的另一项功能也将逐渐被业界抛弃。")]),t._v(" "),e("h3",{attrs:{id:"_75、阐述-jdbc-操作数据库的步骤。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_75、阐述-jdbc-操作数据库的步骤。"}},[t._v("#")]),t._v(" 75、阐述 JDBC 操作数据库的步骤。")]),t._v(" "),e("p",[t._v("下面的代码以连接本机的 Oracle 数据库为例，演示 JDBC 操作数据库的步骤。")]),t._v(" "),e("p",[t._v("（1） 加载驱动。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('Class.forName("oracle.jdbc.driver.OracleDriver");\n')])])]),e("p",[t._v("（2） 创建连接。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('Connection con =\nDriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:orcl",\n"scott", "tiger");\n')])])]),e("p",[t._v("（3） 创建语句。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('PreparedStatement ps = con.prepareStatement("select * from emp\nwhere sal between ? and ?");\nps.setint(1, 1000);\nps.setint(2, 3000);\n')])])]),e("p",[t._v("（4）执行语句。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ResultSet rs = ps.executeQuery();\n")])])]),e("p",[t._v("（5）处理结果。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('while(rs.next()) {\n\tSystem.out.println(rs.getint("empno") + " - " +\n\trs.getString("ename"));\n}\n')])])]),e("p",[t._v("（6） 关闭资源。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("finally {\n\tif(con != null) {\n\t\ttry {\n\t\t\tcon.close();\n\t\t}\n\t\tcatch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n")])])]),e("p",[t._v("**提示：**关闭外部资源的顺序应该和打开的顺序相反，也就是说先关闭 ResultSet、再关闭 Statement、在关闭 Connection。上面的代码只关闭了 Connection（连接），虽然通常情况下在关闭连接时，连接上创建的语句和打开的游标也会关闭，但不能保证总是如此，因此应该按照刚才说的顺序分别关闭。此外，第一步加载驱动在 JDBC 4.0 中是可以省略的（自动从类路径中加载驱动），但是我们建议保留。")]),t._v(" "),e("h3",{attrs:{id:"_76、statement-和-preparedstatement-有什么区别-哪个性能更好"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_76、statement-和-preparedstatement-有什么区别-哪个性能更好"}},[t._v("#")]),t._v(" 76、Statement 和 PreparedStatement 有什么区别？哪个性能更好？")]),t._v(" "),e("p",[t._v("与 Statement 相比，①PreparedStatement 接口代表预编译的语句，它主要的优势在于可以减少 SQL 的编译错误并增加 SQL 的安全性（减少 SQL 注射攻击的可能性）；②PreparedStatement 中的 SQL 语句是可以带参数的，避免了用字符串连接拼接 SQL 语句的麻烦和不安全；③当批量处理 SQL 或频繁执行相同的查询时，PreparedStatement 有明显的性能上的优势，由于数据库可以将编译优化后的SQL 语句缓存起来，下次执行相同结构的语句时就会很快（不用再次编译和生成执行计划）。")]),t._v(" "),e("p",[t._v("补充：为了提供对存储过程的调用，JDBC API 中还提供了 CallableStatement 接口。存储过程（Stored Procedure）是数据库中一组为了完成特定功能的 SQL 语句的集合，经编译后存储在数据库中，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。虽然调用存储过程会在网络开销、安全性、性能上获得很多好处，但是存在如果底层数据库发生迁移时就会有很多麻烦，因为每种数据库的存储过程在书写上存在不少的差别。")]),t._v(" "),e("h3",{attrs:{id:"_77、使用-jdbc-操作数据库时-如何提升读取数据的性能-如何提升更新数据的性能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_77、使用-jdbc-操作数据库时-如何提升读取数据的性能-如何提升更新数据的性能"}},[t._v("#")]),t._v(" 77、使用 JDBC 操作数据库时，如何提升读取数据的性能？如何提升更新数据的性能？")]),t._v(" "),e("p",[t._v("要提升读取数据的性能，可以指定通过结果集（ResultSet）对象的 setFetchSize()方法指定每次抓取的记录数（典型的空间换时间策略）；要提升更新数据的性能可以使用 PreparedStatement 语句构建批处理，将若干 SQL 语句置于一个批处理中执行。")]),t._v(" "),e("h3",{attrs:{id:"_78、在进行数据库编程时-连接池有什么作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_78、在进行数据库编程时-连接池有什么作用"}},[t._v("#")]),t._v(" 78、在进行数据库编程时，连接池有什么作用？")]),t._v(" "),e("p",[t._v("由于创建连接和释放连接都有很大的开销（尤其是数据库服务器不在本地时，每次建立连接都需要进行 TCP 的三次握手，释放连接需要进行 TCP 四次握手，造成的开销是不可忽视的），为了提升系统访问数据库的性能，可以事先创建若干连接置于连接池中，需要时直接从连接池获取，使用结束时归还连接池而不必关闭连接，从而避免频繁创建和释放连接所造成的开销，这是典型的用空间换取时间的策略（浪费了空间存储连接，但节省了创建和释放连接的时间）。池化技术在Java 开发中是很常见的，在使用线程时创建线程池的道理与此相同。基于 Java 的开源数据库连接池主要有：C3P0、Proxool、DBCP、BoneCP、Druid 等。")]),t._v(" "),e("p",[t._v("补充：在计算机系统中时间和空间是不可调和的矛盾，理解这一点对设计满足性能要求的算法是至关重要的。大型网站性能优化的一个关键就是使用缓存，而缓存跟上面讲的连接池道理非常类似，也是使用空间换时间的策略。可以将热点数据置于缓存中，当用户查询这些数据时可以直接从缓存中得到，这无论如何也快过去数据库中查询。当然，缓存的置换策略等也会对系统性能产生重要影响，对于这个问题的讨论已经超出了这里要阐述的范围。")]),t._v(" "),e("h3",{attrs:{id:"_79、什么是-dao-模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_79、什么是-dao-模式"}},[t._v("#")]),t._v(" 79、什么是 DAO 模式？")]),t._v(" "),e("p",[t._v("DAO（Data Access Object）顾名思义是一个为数据库或其他持久化机制提供了抽象接口的对象，在不暴露底层持久化方案实现细节的前提下提供了各种数据访问操作。在实际的开发中，应该将所有对数据源的访问操作进行抽象化后封装在一个公共 API 中。用程序设计语言来说，就是建立一个接口，接口中定义了此应用程序中将会用到的所有事务方法。在这个应用程序中，当需要和数据源进行交互的时候则使用这个接口，并且编写一个单独的类来实现这个接口，在逻辑上该类对应一个特定的数据存储。DAO 模式实际上包含了两个模式，一是 DataAccessor（数据访问器），二是 Data Object（数据对象），前者要解决如何访问数据的问题，而后者要解决的是如何用对象封装数据。")]),t._v(" "),e("h3",{attrs:{id:"_80、事务的-acid-是指什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_80、事务的-acid-是指什么"}},[t._v("#")]),t._v(" 80、事务的 ACID 是指什么？")]),t._v(" "),e("p",[t._v("（1）原子性(Atomic)：事务中各项操作，要么全做要么全不做，任何一项操作的失败都会导致整个事务的失败；")]),t._v(" "),e("p",[t._v("（2）一致性(Consistent)：事务结束后系统状态是一致的；")]),t._v(" "),e("p",[t._v("（3）隔离性(Isolated)：并发执行的事务彼此无法看到对方的中间状态；")]),t._v(" "),e("p",[t._v("（4）持久性(Durable)：事务完成后所做的改动都会被持久化，即使发生灾难性的失败。通过日志和同步备份可以在故障发生后重建数据。")]),t._v(" "),e("p",[t._v("**补充：**关于事务，在面试中被问到的概率是很高的，可以问的问题也是很多的。首先需要知道的是，只有存在并发数据访问时才需要事务。当多个事务访问同一数据时，可能会存在 5 类问题，包括 3 类数据读取问题（脏读、不可重复读和幻读）和 2 类数据更新问题（第 1 类丢失更新和第 2 类丢失更新）。")]),t._v(" "),e("p",[t._v("**脏读（Dirty Read）：**A 事务读取 B 事务尚未提交的数据并在此基础上操作，而 B事务执行回滚，那么 A 读取到的数据就是脏数据。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/8/16ee51ba24693a35~tplv-t2oaga2asx-watermark.awebp",alt:"img"}})]),t._v(" "),e("p",[t._v("**不可重复读（Unrepeatable Read）：**事务 A 重新读取前面读取过的数据，发现该数据已经被另一个已提交的事务 B 修改过了。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/8/16ee51ba288a2776~tplv-t2oaga2asx-watermark.awebp",alt:"img"}})]),t._v(" "),e("p",[t._v("**幻读（Phantom Read）：**事务 A 重新执行一个查询，返回一系列符合查询条件的行，发现其中插入了被事务 B 提交的行。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/8/16ee51ba2be5ac7e~tplv-t2oaga2asx-watermark.awebp",alt:"img"}})]),t._v(" "),e("p",[t._v("第 1 类丢失更新：事务 A 撤销时，把已经提交的事务 B 的更新数据覆盖了。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/8/16ee51ba2471a40a~tplv-t2oaga2asx-watermark.awebp",alt:"img"}})]),t._v(" "),e("p",[t._v("第 2 类丢失更新：事务 A 覆盖事务 B 已经提交的数据，造成事务 B 所做的操作丢失。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/8/16ee51ba264f6a29~tplv-t2oaga2asx-watermark.awebp",alt:"img"}})]),t._v(" "),e("p",[t._v("数据并发访问所产生的问题，在有些场景下可能是允许的，但是有些场景下可能就是致命的，数据库通常会通过锁机制来解决数据并发访问问题，按锁定对象不同可以分为表级锁和行级锁；按并发事务锁定关系可以分为共享锁和独占锁，具体的内容大家可以自行查阅资料进行了解。直接使用锁是非常麻烦的，为此数据库为用户提供了自动锁机制，只要用户指定会话的事务隔离级别，数据库就会通过分析 SQL 语句然后为事务访问的资源加上合适的锁，此外，数据库还会维护这些锁通过各种手段提高系统的性能，这些对用户来说都是透明的（就是说你不用理解，事实上我确实也不知道）。ANSI/ISOSQL 92 标准定义了 4 个等级的事务隔离级别，如下表所示：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/8/16ee51ba4191cec9~tplv-t2oaga2asx-watermark.awebp",alt:"img"}})]),t._v(" "),e("p",[t._v("需要说明的是，事务隔离级别和数据访问的并发性是对立的，事务隔离级别越高并发性就越差。所以要根据具体的应用来确定合适的事务隔离级别，这个地方没有万能的原则。")]),t._v(" "),e("h3",{attrs:{id:"_81、jdbc-中如何进行事务处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_81、jdbc-中如何进行事务处理"}},[t._v("#")]),t._v(" 81、JDBC 中如何进行事务处理？")]),t._v(" "),e("p",[t._v("Connection 提供了事务处理的方法，通过调用 setAutoCommit(false)可以设置手动提交事务；当事务完成后用 commit()显式提交事务；如果在事务处理过程中发生异常则通过 rollback()进行事务回滚。除此之外，从 JDBC 3.0 中还引入了Savepoint（保存点）的概念，允许通过代码设置保存点并让事务回滚到指定的保存点。")]),t._v(" "),e("h3",{attrs:{id:"_82、jdbc-能否处理-blob-和-clob"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_82、jdbc-能否处理-blob-和-clob"}},[t._v("#")]),t._v(" 82、JDBC 能否处理 Blob 和 Clob？")]),t._v(" "),e("p",[t._v("Blob 是指二进制大对象（Binary Large Object），而 Clob 是指大字符对象（Character Large Objec），因此其中 Blob 是为存储大的二进制数据而设计的，而 Clob 是为存储大的文本数据而设计的。JDBC 的 PreparedStatement 和ResultSet 都提供了相应的方法来支持 Blob 和 Clob 操作。")]),t._v(" "),e("h3",{attrs:{id:"_83、简述正则表达式及其用途。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_83、简述正则表达式及其用途。"}},[t._v("#")]),t._v(" 83、简述正则表达式及其用途。")]),t._v(" "),e("p",[t._v("在编写处理字符串的程序时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。")]),t._v(" "),e("p",[t._v("说明：计算机诞生初期处理的信息几乎都是数值，但是时过境迁，今天我们使用计算机处理的信息更多的时候不是数值而是字符串，正则表达式就是在进行字符串匹配和处理的时候最为强大的工具，绝大多数语言都提供了对正则表达式的支持。")]),t._v(" "),e("h3",{attrs:{id:"_84、java-中是如何支持正则表达式操作的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_84、java-中是如何支持正则表达式操作的"}},[t._v("#")]),t._v(" 84、Java 中是如何支持正则表达式操作的？")]),t._v(" "),e("p",[t._v("Java 中的 String 类提供了支持正则表达式操作的方法，包括：matches()、replaceAll()、replaceFirst()、split()。此外，Java 中可以用 Pattern 类表示正则表达式对象，它提供了丰富的 API 进行各种正则表达式操作。")]),t._v(" "),e("p",[t._v("面试题： - 如果要从字符串中截取第一个英文左括号之前的字符串，例如：北京市(朝阳区)(西城区)(海淀区)，截取结果为：北京市，那么正则表达式怎么写？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nclass RegExpTest {\n\tpublic static void main(String[] args) {\n\t\tString str = "北京市(朝阳区)(西城区)(海淀区)";\n\t\tPattern p = Pattern.compile(".*?(?=\\()");\n\t\tMatcher m = p.matcher(str);\n\t\tif(m.find()) {\n\t\t\tSystem.out.println(m.group());\n\t\t}\n\t}\n}\n')])])]),e("h3",{attrs:{id:"_85、获得一个类的类对象有哪些方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_85、获得一个类的类对象有哪些方式"}},[t._v("#")]),t._v(" 85、获得一个类的类对象有哪些方式？")]),t._v(" "),e("p",[t._v("（1）方法 1：类型.class，例如：String.class")]),t._v(" "),e("p",[t._v("（2）方法 2：对象.getClass()，例如：”hello”.getClass()")]),t._v(" "),e("p",[t._v("（3）方法 3：Class.forName()，例如：Class.forName(“java.lang.String”)")]),t._v(" "),e("h3",{attrs:{id:"_86、如何通过反射创建对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_86、如何通过反射创建对象"}},[t._v("#")]),t._v(" 86、如何通过反射创建对象？")]),t._v(" "),e("p",[t._v("方法 1：通过类对象调用 newInstance()方法，例如：String.class.newInstance()")]),t._v(" "),e("p",[t._v("方法 2：通过类对象的 getConstructor()或 getDeclaredConstructor()方法获得构造器（Constructor）对象并调用其 newInstance()方法创建对象，例如：String.class.getConstructor(String.class).newInstance(“Hello”);")]),t._v(" "),e("h3",{attrs:{id:"_87、如何通过反射获取和设置对象私有字段的值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_87、如何通过反射获取和设置对象私有字段的值"}},[t._v("#")]),t._v(" 87、如何通过反射获取和设置对象私有字段的值？")]),t._v(" "),e("p",[t._v("可以通过类对象的 getDeclaredField()方法字段（Field）对象，然后再通过字段对象的 setAccessible(true)将其设置为可以访问，接下来就可以通过 get/set 方法来获取/设置字段的值了。下面的代码实现了一个反射的工具类，其中的两个静态方法分别用于获取和设置私有字段的值，字段可以是基本类型也可以是对象类型且支持多级对象操作。")]),t._v(" "),e("h3",{attrs:{id:"_88、如何通过反射调用对象的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_88、如何通过反射调用对象的方法"}},[t._v("#")]),t._v(" 88、如何通过反射调用对象的方法？")]),t._v(" "),e("p",[t._v("请看下面的代码：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('import java.lang.reflect.Method;\nclass MethodInvokeTest {\n\tpublic static void main(String[] args) throws Exception {\n\t\tString str = "hello";\n\t\tMethod m = str.getClass().getMethod("toUpperCase");\n\t\tSystem.out.println(m.invoke(str));\n\t\t// HELLO\n\t}\n}\n')])])]),e("h3",{attrs:{id:"_89、简述一下面向对象的-六原则一法则-。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_89、简述一下面向对象的-六原则一法则-。"}},[t._v("#")]),t._v(" 89、简述一下面向对象的”六原则一法则”。")]),t._v(" "),e("p",[t._v("（1）单一职责原则：一个类只做它该做的事情。（单一职责原则想表达的就是”高内聚”，写代码最终极的原则只有六个字”高内聚、低耦合”，就如同葵花宝典或辟邪剑谱的中心思想就八个字”欲练此功必先自宫”，所谓的高内聚就是一个代码模块只完成一项功能，在面向对象中，如果只让一个类完成它该做的事，而不涉及与它无关的领域就是践行了高内聚的原则，这个类就只有单一职责。我们都知道一句话叫”因为专注，所以专业”，一个对象如果承担太多的职责，那么注定它什么都做不好。这个世界上任何好的东西都有两个特征，一个是功能单一，好的相机绝对不是电视购物里面卖的那种一个机器有一百多种功能的，它基本上只能照相；另一个是模块化，好的自行车是组装车，从减震叉、刹车到变速器，所有的部件都是可以拆卸和重新组装的，好的乒乓球拍也不是成品拍，一定是底板和胶皮可以拆分和自行组装的，一个好的软件系统，它里面的每个功能模块也应该是可以轻易的拿到其他系统中使用的，这样才能实现软件复用的目标。）")]),t._v(" "),e("p",[t._v("（2）开闭原则：软件实体应当对扩展开放，对修改关闭。（在理想的状态下，当我们需要为一个软件系统增加新功能时，只需要从原来的系统派生出一些新类就可以，不需要修改原来的任何一行代码。要做到开闭有两个要点：①抽象是关键，一个系统中如果没有抽象类或接口系统就没有扩展点；②封装可变性，将系统中的各种可变因素封装到一个继承结构中，如果多个可变因素混杂在一起，系统将变得复杂而换乱，如果不清楚如何封装可变性，可以参考《设计模式精解》一书中对桥梁模式的讲解的章节。）")]),t._v(" "),e("p",[t._v("（3）依赖倒转原则：面向接口编程。（该原则说得直白和具体一些就是声明方法的参数类型、方法的返回类型、变量的引用类型时，尽可能使用抽象类型而不用具体类型，因为抽象类型可以被它的任何一个子类型所替代，请参考下面的里氏替换原则。）")]),t._v(" "),e("p",[t._v("（4）里氏替换原则：任何时候都可以用子类型替换掉父类型。（关于里氏替换原则的描述，Barbara Liskov 女士的描述比这个要复杂得多，但简单的说就是能用父类型的地方就一定能使用子类型。里氏替换原则可以检查继承关系是否合理，如果一个继承关系违背了里氏替换原则，那么这个继承关系一定是错误的，需要对代码进行重构。例如让猫继承狗，或者狗继承猫，又或者让正方形继承长方形都是错误的继承关系，因为你很容易找到违反里氏替换原则的场景。需要注意的是：子类一定是增加父类的能力而不是减少父类的能力，因为子类比父类的能力更多，把能力多的对象当成能力少的对象来用当然没有任何问题。）")]),t._v(" "),e("p",[t._v("（5）接口隔离原则：接口要小而专，绝不能大而全。（臃肿的接口是对接口的污染，既然接口表示能力，那么一个接口只应该描述一种能力，接口也应该是高度内聚的。例如，琴棋书画就应该分别设计为四个接口，而不应设计成一个接口中的四个方法，因为如果设计成一个接口中的四个方法，那么这个接口很难用，毕竟琴棋书画四样都精通的人还是少数，而如果设计成四个接口，会几项就实现几个接口，这样的话每个接口被复用的可能性是很高的。Java 中的接口代表能力、代表约定、代表角色，能否正确的使用接口一定是编程水平高低的重要标识。）")]),t._v(" "),e("p",[t._v("（6）合成聚合复用原则：优先使用聚合或合成关系复用代码。（通过继承来复用代码是面向对象程序设计中被滥用得最多的东西，因为所有的教科书都无一例外的对继承进行了鼓吹从而误导了初学者，类与类之间简单的说有三种关系，Is-A 关系、Has-A 关系、Use-A 关系，分别代表继承、关联和依赖。其中，关联关系根据其关联的强度又可以进一步划分为关联、聚合和合成，但说白了都是Has-A 关系，合成聚合复用原则想表达的是优先考虑 Has-A 关系而不是 Is-A 关系复用代码，原因嘛可以自己从百度上找到一万个理由，需要说明的是，即使在Java 的 API 中也有不少滥用继承的例子，例如 Properties 类继承了 Hashtable类，Stack 类继承了 Vector 类，这些继承明显就是错误的，更好的做法是在Properties 类中放置一个 Hashtable 类型的成员并且将其键和值都设置为字符串来存储数据，而 Stack 类的设计也应该是在 Stack 类中放一个 Vector 对象来存储数据。记住：任何时候都不要继承工具类，工具是可以拥有并可以使用的，而不是拿来继承的。）")]),t._v(" "),e("p",[t._v("（7）迪米特法则：迪米特法则又叫最少知识原则，一个对象应当对其他对象有尽可能少的了解。（迪米特法则简单的说就是如何做到”低耦合”，门面模式和调停者模式就是对迪米特法则的践行。对于门面模式可以举一个简单的例子，你去一家公司洽谈业务，你不需要了解这个公司内部是如何运作的，你甚至可以对这个公司一无所知，去的时候只需要找到公司入口处的前台美女，告诉她们你要做什么，她们会找到合适的人跟你接洽，前台的美女就是公司这个系统的门面。再复杂的系统都可以为用户提供一个简单的门面，Java Web 开发中作为前端控制器的 Servlet 或 Filter 不就是一个门面吗，浏览器对服务器的运作方式一无所知，但是通过前端控制器就能够根据你的请求得到相应的服务。调停者模式也可以举一个简单的例子来说明，例如一台计算机，CPU、内存、硬盘、显卡、声卡各种设备需要相互配合才能很好的工作，但是如果这些东西都直接连接到一起，计算机的布线将异常复杂，在这种情况下，主板作为一个调停者的身份出现，它将各个设备连接在一起而不需要每个设备之间直接交换数据，这样就减小了系统的耦合度和复杂度，如下图所示。迪米特法则用通俗的话来将就是不要和陌生人打交道，如果真的需要，找一个自己的朋友，让他替你和陌生人打交道。）")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/8/16ee51ba45cdd65f~tplv-t2oaga2asx-watermark.awebp",alt:"img"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/8/16ee51ba49e95b37~tplv-t2oaga2asx-watermark.awebp",alt:"img"}})]),t._v(" "),e("h3",{attrs:{id:"_90、简述一下你了解的设计模式。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_90、简述一下你了解的设计模式。"}},[t._v("#")]),t._v(" 90、简述一下你了解的设计模式。")]),t._v(" "),e("p",[t._v("所谓设计模式，就是一套被反复使用的代码设计经验的总结（情境中一个问题经过证实的一个解决方案）。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。设计模式使人们可以更加简单方便的复用成功的设计和体系结构。将已证实的技术表述成设计模式也会使新系统开发者更加容易理解其设计思路。")]),t._v(" "),e("p",[t._v("在 GoF 的《Design Patterns: Elements of Reusable Object-OrientedSoftware》中给出了三类（创建型[对类的实例化过程的抽象化]、结构型[描述如何将类或对象结合在一起形成更大的结构]、行为型[对在不同的对象之间划分责任和算法的抽象化]）共 23 种设计模式，包括：Abstract Factory（抽象工厂模式），Builder（建造者模式），Factory Method（工厂方法模式），Prototype（原始模型模式），Singleton（单例模式）；Facade（门面模式），Adapter（适配器模式），Bridge（桥梁模式），Composite（合成模式），Decorator（装饰模式），Flyweight（享元模式），Proxy（代理模式）；Command（命令模式），Interpreter（解释器模式），Visitor（访问者模式），Iterator（迭代子模式），Mediator（调停者模式），Memento（备忘录模式），Observer（观察者模式），State（状态 模式 ），Strategy（策略 模式 ），Template Method（模板方法模式），Chain Of Responsibility（责任链模式）。")]),t._v(" "),e("p",[t._v("面试被问到关于设计模式的知识时，可以拣最常用的作答，例如：")]),t._v(" "),e("p",[t._v("（1）工厂模式：工厂类可以根据条件生成不同的子类实例，这些子类有一个公共的抽象父类并且实现了相同的方法，但是这些方法针对不同的数据进行了不同的操作（多态方法）。当得到子类的实例后，开发人员可以调用基类中的方法而不必考虑到底返回的是哪一个子类的实例。")]),t._v(" "),e("p",[t._v("（2）代理模式：给一个对象提供一个代理对象，并由代理对象控制原对象的引用。实际开发中，按照使用目的的不同，代理可以分为：远程代理、虚拟代理、保护代理、Cache 代理、防火墙代理、同步化代理、智能引用代理。")]),t._v(" "),e("p",[t._v("（3）适配器模式：把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起使用的类能够一起工作。")]),t._v(" "),e("p",[t._v("（4）模板方法模式：提供一个抽象类，将部分逻辑以具体方法或构造器的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法（多态实现），从而实现不同的业务逻辑。除此之外，还可以讲讲上面提到的门面模式、桥梁模式、单例模式、装潢模式（Collections 工具类和 I/O 系统中都使用装潢模式）等，反正基本原则就是拣自己最熟悉的、用得最多的作答，以免言多必失。")]),t._v(" "),e("h3",{attrs:{id:"_91、用-java-写一个单例类。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_91、用-java-写一个单例类。"}},[t._v("#")]),t._v(" 91、用 Java 写一个单例类。")]),t._v(" "),e("p",[t._v("（1）饿汉式单例")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("public class Singleton {\n\tprivate Singleton(){\n\t}\n\tprivate static Singleton instance = new Singleton();\n\tpublic static Singleton getInstance(){\n\t\treturn instance;\n\t}\n}\n")])])]),e("p",[t._v("（2）懒汉式单例")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("public class Singleton {\n\tprivate static Singleton instance = null;\n\tprivate Singleton() {\n\t}\n\tpublic static synchronized Singleton getInstance(){\n\t\tif (instance == null) instance ＝ new Singleton();\n\t\treturn instance;\n\t}\n}\n")])])]),e("p",[t._v("注意：实现一个单例有两点注意事项，①将构造器私有，不允许外界通过构造器创建对象；②通过公开的静态方法向外界返回类的唯一实例。这里有一个问题可以思考：Spring 的 IoC 容器可以为普通的类创建单例，它是怎么做到的呢？")]),t._v(" "),e("h3",{attrs:{id:"_92、什么是-uml"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_92、什么是-uml"}},[t._v("#")]),t._v(" 92、什么是 UML？")]),t._v(" "),e("p",[t._v("UML 是统一建模语言（Unified Modeling Language）的缩写，它发表于 1997年，综合了当时已经存在的面向对象的建模语言、方法和过程，是一个支持模型化和软件系统开发的图形化语言，为软件开发的所有阶段提供模型化和可视化支持。使用 UML 可以帮助沟通与交流，辅助应用设计和文档的生成，还能够阐释系统的结构和行为。")]),t._v(" "),e("h3",{attrs:{id:"_93、uml-中有哪些常用的图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_93、uml-中有哪些常用的图"}},[t._v("#")]),t._v(" 93、UML 中有哪些常用的图？")]),t._v(" "),e("p",[t._v("UML 定义了多种图形化的符号来描述软件系统部分或全部的静态结构和动态结构，包括：用例图（use case diagram）、类图（class diagram）、时序图（sequencediagram）、协作图（collaboration diagram）、状态图（statechart diagram）、活动图（activity diagram）、构件图（component diagram）、部署图（deploymentdiagram）等。在这些图形化符号中，有三种图最为重要，分别是：用例图（用来捕获需求，描述系统的功能，通过该图可以迅速的了解系统的功能模块及其关系）、类图（描述类以及类与类之间的关系，通过该图可以快速了解系统）、时序图（描述执行特定任务时对象之间的交互关系以及执行顺序，通过该图可以了解对象能接收的消息也就是说对象能够向外界提供的服务）。用例图：")]),t._v(" "),e("p",[t._v("类图：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/8/16ee51ba494153a6~tplv-t2oaga2asx-watermark.awebp",alt:"img"}})]),t._v(" "),e("p",[t._v("时序图：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/8/16ee51ba4c86a645~tplv-t2oaga2asx-watermark.awebp",alt:"img"}})]),t._v(" "),e("h3",{attrs:{id:"_94、用-java-写一个冒泡排序。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_94、用-java-写一个冒泡排序。"}},[t._v("#")]),t._v(" 94、用 Java 写一个冒泡排序。")]),t._v(" "),e("p",[t._v("冒泡排序几乎是个程序员都写得出来，但是面试的时候如何写一个逼格高的冒泡排序却不是每个人都能做到，下面提供一个参考代码：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import java.util.Comparator;\n/**\n* 排序器接口(策略模式: 将算法封装到具有共同接口的独立的类中使得它们可\n以相互替换)\n* @author 骆昊\n*\n*/\npublic interface Sorter {\n\t/**\n* 排序\n* @param list 待排序的数组\n*/\n\tpublic <T extends Comparable<T>> void sort(T[] list);\n\t/**\n* 排序\n* @param list 待排序的数组\n* @param comp 比较两个对象的比较器\n*/\n\tpublic <T> void sort(T[] list, Comparator<T> comp);\n}\nimport java.util.Comparator;\n/**\n* 冒泡排序\n*\n* @author 骆昊\n*\n*/\npublic class BubbleSorter implements Sorter {\n\t@Override\n\tpublic <T extends Comparable<T>> void sort(T[] list) {\n\t\tBoolean swapped = true;\n\t\tfor (int i = 1, len = list.length; i < len && swapped; ++i) {\n\t\t\tswapped = false;\n\t\t\tfor (int j = 0; j < len - i; ++j) {\n\t\t\t\tif (list[j].compareTo(list[j + 1]) > 0) {\n\t\t\t\t\tT temp = list[j];\n\t\t\t\t\tlist[j] = list[j + 1];\n\t\t\t\t\tlist[j + 1] = temp;\n\t\t\t\t\tswapped = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t@Override\n\tpublic <T> void sort(T[] list, Comparator<T> comp) {\n\t\tBoolean swapped = true;\n\t\tfor (int i = 1, len = list.length; i < len && swapped; ++i) {\n\t\t\tswapped = false;\n\t\t\tfor (int j = 0; j < len - i; ++j) {\n\t\t\t\tif (comp.compare(list[j], list[j + 1]) > 0) {\n\t\t\t\t\tT temp = list[j];\n\t\t\t\t\tlist[j] = list[j + 1];\n\t\t\t\t\tlist[j + 1] = temp;\n\t\t\t\t\tswapped = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n")])])]),e("h3",{attrs:{id:"_95、用-java-写一个折半查找。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_95、用-java-写一个折半查找。"}},[t._v("#")]),t._v(" 95、用 Java 写一个折半查找。")]),t._v(" "),e("p",[t._v("折半查找，也称二分查找、二分搜索，是一种在有序数组中查找某一特定元素的搜索算法。搜素过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜素过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组已经为空，则表示找不到指定的元素。这种搜索算法每一次比较都使搜索范围缩小一半，其时间复杂度是 O(logN)。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import java.util.Comparator;\npublic class MyUtil {\n\tpublic static <T extends Comparable<T>> int binarySearch(T[] x, T\n\tkey) {\n\t\treturn binarySearch(x, 0, x.length- 1, key);\n\t}\n\t// 使用循环实现的二分查找\n\tpublic static <T> int binarySearch(T[] x, T key, Comparator<T> comp)\n\t{\n\t\tint low = 0;\n\t\tint high = x.length - 1;\n\t\twhile (low <= high) {\n\t\t\tint mid = (low + high) >>> 1;\n\t\t\tint cmp = comp.compare(x[mid], key);\n\t\t\tif (cmp < 0) {\n\t\t\t\tlow= mid + 1;\n\t\t\t} else if (cmp > 0) {\n\t\t\t\thigh= mid - 1;\n\t\t\t} else {\n\t\t\t\treturn mid;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\t// 使用递归实现的二分查找\n\tprivate static<T extends Comparable<T>> int binarySearch(T[] x, int\n\tlow, int high, T key) {\n\t\tif(low <= high) {\n\t\t\tint mid = low + ((high -low) >> 1);\n\t\t\tif(key.compareTo(x[mid])== 0) {\n\t\t\t\treturn mid;\n\t\t\t} else if(key.compareTo(x[mid])< 0) {\n\t\t\t\treturn binarySearch(x,low, mid - 1, key);\n\t\t\t} else {\n\t\t\t\treturn binarySearch(x,mid + 1, high, key);\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n}\n")])])]),e("p",[t._v("说明：上面的代码中给出了折半查找的两个版本，一个用递归实现，一个用循环实现。需要注意的是计算中间位置时不应该使用(high+ low) / 2 的方式，因为加法运算可能导致整数越界，这里应该使用以下三种方式之一：low + (high - low)/ 2 或 low + (high – low) >> 1 或(low + high) >>> 1（>>>是逻辑右移，是不带符号位的右移）")])])}),[],!1,null,null,null);a.default=r.exports}}]);