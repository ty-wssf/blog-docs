(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{485:function(t,e,a){"use strict";a.r(e);var n=a(30),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"定时任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定时任务"}},[t._v("#")]),t._v(" 定时任务")]),t._v(" "),a("p",[t._v("在我们开发项目过程中，经常需要定时任务来帮助我们来做一些内容， Spring Boot 默认已经帮我们实行了，只需要添加相应的注解就可以实现")]),t._v(" "),a("h2",{attrs:{id:"pom-包配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pom-包配置"}},[t._v("#")]),t._v(" pom 包配置")]),t._v(" "),a("p",[t._v("pom 包里面只需要引入 Spring Boot Starter 包即可")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<dependencies>\n\t<dependency>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter</artifactId>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t<scope>test</scope>\n\t</dependency>\n</dependencies>\n")])])]),a("h2",{attrs:{id:"启动类启用定时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动类启用定时"}},[t._v("#")]),t._v(" 启动类启用定时")]),t._v(" "),a("p",[t._v("在启动类上面加上"),a("code",[t._v("@EnableScheduling")]),t._v("即可开启定时")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("@SpringBootApplication\n@EnableScheduling\npublic class Application {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(Application.class, args);\n\t}\n}\n")])])]),a("h2",{attrs:{id:"创建定时任务实现类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建定时任务实现类"}},[t._v("#")]),t._v(" 创建定时任务实现类")]),t._v(" "),a("p",[t._v("定时任务1：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('@Component\npublic class SchedulerTask {\n\n    private int count=0;\n\n    @Scheduled(cron="*/6 * * * * ?")\n    private void process(){\n        System.out.println("this is scheduler task runing  "+(count++));\n    }\n\n}\n')])])]),a("p",[t._v("定时任务2：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('@Component\npublic class Scheduler2Task {\n\n    private static final SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");\n\n    @Scheduled(fixedRate = 6000)\n    public void reportCurrentTime() {\n        System.out.println("现在时间：" + dateFormat.format(new Date()));\n    }\n\n}\n')])])]),a("p",[t._v("结果如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("this is scheduler task runing  0\n现在时间：09:44:17\nthis is scheduler task runing  1\n现在时间：09:44:23\nthis is scheduler task runing  2\n现在时间：09:44:29\nthis is scheduler task runing  3\n现在时间：09:44:35\n")])])]),a("h2",{attrs:{id:"参数说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数说明"}},[t._v("#")]),t._v(" 参数说明")]),t._v(" "),a("p",[a("code",[t._v("@Scheduled")]),t._v(" 参数可以接受两种定时的设置，一种是我们常用的"),a("code",[t._v('cron="*/6 * * * * ?"')]),t._v(",一种是 "),a("code",[t._v("fixedRate = 6000")]),t._v("，两种都表示每隔六秒打印一下内容。")]),t._v(" "),a("p",[a("strong",[t._v("fixedRate 说明")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("@Scheduled(fixedRate = 6000)")]),t._v(" ：上一次开始执行时间点之后6秒再执行")]),t._v(" "),a("li",[a("code",[t._v("@Scheduled(fixedDelay = 6000)")]),t._v(" ：上一次执行完毕时间点之后6秒再执行")]),t._v(" "),a("li",[a("code",[t._v("@Scheduled(initialDelay=1000, fixedRate=6000)")]),t._v(" ：第一次延迟1秒后执行，之后按 fixedRate 的规则每6秒执行一次")])])])}),[],!1,null,null,null);e.default=s.exports}}]);