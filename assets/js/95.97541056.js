(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{524:function(n,e,t){"use strict";t.r(e);var r=t(30),a=Object(r.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"spring-ioc-容器源码分析-创建原始-bean-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-ioc-容器源码分析-创建原始-bean-对象"}},[n._v("#")]),n._v(" Spring IOC 容器源码分析 - 创建原始 bean 对象")]),n._v(" "),t("h2",{attrs:{id:"_1-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-简介"}},[n._v("#")]),n._v(" 1. 简介")]),n._v(" "),t("p",[n._v("本篇文章是上一篇文章（"),t("a",{attrs:{href:"http://www.coolblog.xyz/2018/06/04/Spring-IOC-%E5%AE%B9%E5%99%A8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%88%9B%E5%BB%BA%E5%8D%95%E4%BE%8B-bean/",target:"_blank",rel:"noopener noreferrer"}},[n._v("创建单例 bean 的过程"),t("OutboundLink")],1),n._v("）的延续。在上一篇文章中，我们从战略层面上领略了"),t("code",[n._v("doCreateBean")]),n._v("方法的全过程。本篇文章，我们就从战术的层面上，详细分析"),t("code",[n._v("doCreateBean")]),n._v("方法中的一个重要的调用，即"),t("code",[n._v("createBeanInstance")]),n._v("方法。在本篇文章中，你将看到三种不同的构造 bean 对象的方式。你也会了解到构造 bean 对象的两种策略。如果你对这些内容感兴趣，那么不妨继续往下读。我会在代码进行大量的注解，相信能帮助你理解代码逻辑。好了，其他的就不多说了，进入正题吧。")]),n._v(" "),t("h2",{attrs:{id:"_2-源码分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-源码分析"}},[n._v("#")]),n._v(" 2. 源码分析")]),n._v(" "),t("h3",{attrs:{id:"_2-1-创建-bean-对象的过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-创建-bean-对象的过程"}},[n._v("#")]),n._v(" 2.1 创建 bean 对象的过程")]),n._v(" "),t("p",[n._v("本节，我们一起来来分析一下本篇文章的主角"),t("code",[n._v("createBeanInstance")]),n._v("方法。按照惯例，我们还是先分析一下方法的大致脉络，然后我们再按照这个脉络去分析一些重要的调用。So. Let`s go → ↓")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('protected BeanWrapper createBeanInstance(String beanName, RootBeanDefinition mbd, Object[] args) {\n    Class<?> beanClass = resolveBeanClass(mbd, beanName);\n\n    /*\n     * 检测类的访问权限。默认情况下，对于非 public 的类，是允许访问的。\n     * 若禁止访问，这里会抛出异常\n     */\n    if (beanClass != null && !Modifier.isPublic(beanClass.getModifiers()) && !mbd.isNonPublicAccessAllowed()) {\n        throw new BeanCreationException(mbd.getResourceDescription(), beanName,\n                "Bean class isn\'t public, and non-public access not allowed: " + beanClass.getName());\n    }\n\n    /*\n     * 如果工厂方法不为空，则通过工厂方法构建 bean 对象。这种构建 bean 的方式\n     * 就不深入分析了，有兴趣的朋友可以自己去看一下。\n     */\n    if (mbd.getFactoryMethodName() != null)  {\n        // 通过“工厂方法”的方式构建 bean 对象\n        return instantiateUsingFactoryMethod(beanName, mbd, args);\n    }\n\n    /*\n     * 当多次构建同一个 bean 时，可以使用此处的快捷路径，即无需再次推断应该使用哪种方式构造实例，\n     * 以提高效率。比如在多次构建同一个 prototype 类型的 bean 时，就可以走此处的捷径。\n     * 这里的 resolved 和 mbd.constructorArgumentsResolved 将会在 bean 第一次实例\n     * 化的过程中被设置，在后面的源码中会分析到，先继续往下看。\n     */\n    boolean resolved = false;\n    boolean autowireNecessary = false;\n    if (args == null) {\n        synchronized (mbd.constructorArgumentLock) {\n            if (mbd.resolvedConstructorOrFactoryMethod != null) {\n                resolved = true;\n                autowireNecessary = mbd.constructorArgumentsResolved;\n            }\n        }\n    }\n    if (resolved) {\n        if (autowireNecessary) {\n            // 通过“构造方法自动注入”的方式构造 bean 对象\n            return autowireConstructor(beanName, mbd, null, null);\n        }\n        else {\n            // 通过“默认构造方法”的方式构造 bean 对象\n            return instantiateBean(beanName, mbd);\n        }\n    }\n\n    // 由后置处理器决定返回哪些构造方法，这里不深入分析了\n    Constructor<?>[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);\n    /*\n     * 下面的条件分支条件用于判断使用什么方式构造 bean 实例，有两种方式可选 - 构造方法自动\n     * 注入和默认构造方法。判断的条件由4部分综合而成，如下：\n     * \n     *    条件1：ctors != null -> 后置处理器返回构造方法数组是否为空\n     *    \n     *    条件2：mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR \n     *              -> bean 配置中的 autowire 属性是否为 constructor    \n     *    条件3：mbd.hasConstructorArgumentValues() \n     *              -> constructorArgumentValues 是否存在元素，即 bean 配置文件中\n     *                 是否配置了 <construct-arg/>\n     *    条件4：!ObjectUtils.isEmpty(args) \n     *              -> args 数组是否存在元素，args 是由用户调用 \n     *                 getBean(String name, Object... args) 传入的\n     * \n     * 上面4个条件，只要有一个为 true，就会通过构造方法自动注入的方式构造 bean 实例\n     */\n    if (ctors != null ||\n            mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR ||\n            mbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args))  {\n        // 通过“构造方法自动注入”的方式构造 bean 对象\n        return autowireConstructor(beanName, mbd, ctors, args);\n    }\n\n    // 通过“默认构造方法”的方式构造 bean 对象\n    return instantiateBean(beanName, mbd);\n}\n')])])]),t("p",[n._v("以上就是 createBeanInstance 方法的源码，不是很长。配合着注释，应该不是很难懂。下面我们来总结一下这个方法的执行流程，如下：")]),n._v(" "),t("ol",[t("li",[n._v("检测类的访问权限，若禁止访问，则抛出异常")]),n._v(" "),t("li",[n._v("若工厂方法不为空，则通过工厂方法构建 bean 对象，并返回结果")]),n._v(" "),t("li",[n._v("若构造方式已解析过，则走快捷路径构建 bean 对象，并返回结果")]),n._v(" "),t("li",[n._v("如第三步不满足，则通过组合条件决定使用哪种方式构建 bean 对象")])]),n._v(" "),t("p",[n._v("这里有三种构造 bean 对象的方式，如下：")]),n._v(" "),t("ol",[t("li",[n._v("通过“工厂方法”的方式构造 bean 对象")]),n._v(" "),t("li",[n._v("通过“构造方法自动注入”的方式构造 bean 对象")]),n._v(" "),t("li",[n._v("通过“默认构造方法”的方式构造 bean 对象")])]),n._v(" "),t("p",[n._v("下面我将会分析第2和第3种构造 bean 对象方式的实现源码。至于第1种方式，实现逻辑和第2种方式较为相似。所以就不分析了，大家有兴趣可以自己看一下。")]),n._v(" "),t("h3",{attrs:{id:"_2-2-通过构造方法自动注入的方式创建-bean-实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-通过构造方法自动注入的方式创建-bean-实例"}},[n._v("#")]),n._v(" 2.2 通过构造方法自动注入的方式创建 bean 实例")]),n._v(" "),t("p",[n._v("本节，我将会分析构造方法自动注入的实现逻辑。代码逻辑较为复杂，需要大家耐心阅读。代码如下：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('protected BeanWrapper autowireConstructor(\n        String beanName, RootBeanDefinition mbd, Constructor<?>[] ctors, Object[] explicitArgs) {\n\n    // 创建 ConstructorResolver 对象，并调用其 autowireConstructor 方法\n    return new ConstructorResolver(this).autowireConstructor(beanName, mbd, ctors, explicitArgs);\n}\n\npublic BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,\n        Constructor<?>[] chosenCtors, final Object[] explicitArgs) {\n\n    // 创建 BeanWrapperImpl 对象\n    BeanWrapperImpl bw = new BeanWrapperImpl();\n    this.beanFactory.initBeanWrapper(bw);\n\n    Constructor<?> constructorToUse = null;\n    ArgumentsHolder argsHolderToUse = null;\n    Object[] argsToUse = null;\n\n    // 确定参数值列表（argsToUse）\n    if (explicitArgs != null) {\n        argsToUse = explicitArgs;\n    }\n    else {\n        Object[] argsToResolve = null;\n        synchronized (mbd.constructorArgumentLock) {\n            // 获取已解析的构造方法\n            constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod;\n            if (constructorToUse != null && mbd.constructorArgumentsResolved) {\n                // 获取已解析的构造方法参数列表\n                argsToUse = mbd.resolvedConstructorArguments;\n                if (argsToUse == null) {\n                    // 若 argsToUse 为空，则获取未解析的构造方法参数列表\n                    argsToResolve = mbd.preparedConstructorArguments;\n                }\n            }\n        }\n        if (argsToResolve != null) {\n            // 解析参数列表\n            argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve);\n        }\n    }\n\n    if (constructorToUse == null) {\n        boolean autowiring = (chosenCtors != null ||\n                mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);\n        ConstructorArgumentValues resolvedValues = null;\n\n        int minNrOfArgs;\n        if (explicitArgs != null) {\n            minNrOfArgs = explicitArgs.length;\n        }\n        else {\n            ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues();\n            resolvedValues = new ConstructorArgumentValues();\n            /*\n             * 确定构造方法参数数量，比如下面的配置：\n             *     <bean id="persion" class="xyz.coolblog.autowire.Person">\n             *         <constructor-arg index="0" value="xiaoming"/>\n             *         <constructor-arg index="1" value="1"/>\n             *         <constructor-arg index="2" value="man"/>\n             *     </bean>\n             *\n             * 此时 minNrOfArgs = maxIndex + 1 = 2 + 1 = 3，除了计算 minNrOfArgs，\n             * 下面的方法还会将 cargs 中的参数数据转存到 resolvedValues 中\n             */\n            minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues);\n        }\n\n        // 获取构造方法列表\n        Constructor<?>[] candidates = chosenCtors;\n        if (candidates == null) {\n            Class<?> beanClass = mbd.getBeanClass();\n            try {\n                candidates = (mbd.isNonPublicAccessAllowed() ?\n                        beanClass.getDeclaredConstructors() : beanClass.getConstructors());\n            }\n            catch (Throwable ex) {\n                throw new BeanCreationException(mbd.getResourceDescription(), beanName,\n                        "Resolution of declared constructors on bean Class [" + beanClass.getName() +\n                        "] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex);\n            }\n        }\n\n        // 按照构造方法的访问权限级别和参数数量进行排序\n        AutowireUtils.sortConstructors(candidates);\n\n        int minTypeDiffWeight = Integer.MAX_VALUE;\n        Set<Constructor<?>> ambiguousConstructors = null;\n        LinkedList<UnsatisfiedDependencyException> causes = null;\n\n        for (Constructor<?> candidate : candidates) {\n            Class<?>[] paramTypes = candidate.getParameterTypes();\n\n            /*\n             * 下面的 if 分支的用途是：若匹配到到合适的构造方法了，提前结束 for 循环\n             * constructorToUse != null 这个条件比较好理解，下面分析一下条件 argsToUse.length > paramTypes.length：\n             * 前面说到 AutowireUtils.sortConstructors(candidates) 用于对构造方法进行\n             * 排序，排序规则如下：\n             *   1. 具有 public 访问权限的构造方法排在非 public 构造方法前\n             *   2. 参数数量多的构造方法排在前面\n             *\n             * 假设现在有一组构造方法按照上面的排序规则进行排序，排序结果如下（省略参数名称）：\n             *\n             *   1. public Hello(Object, Object, Object)\n             *   2. public Hello(Object, Object)\n             *   3. public Hello(Object)\n             *   4. protected Hello(Integer, Object, Object, Object)\n             *   5. protected Hello(Integer, Object, Object)\n             *   6. protected Hello(Integer, Object)\n             *\n             * argsToUse = [num1, obj2]，可以匹配上的构造方法2和构造方法6。由于构造方法2有\n             * 更高的访问权限，所以没理由不选他（尽管后者在参数类型上更加匹配）。由于构造方法3\n             * 参数数量 < argsToUse.length，参数数量上不匹配，也不应该选。所以 \n             * argsToUse.length > paramTypes.length 这个条件用途是：在条件 \n             * constructorToUse != null 成立的情况下，通过判断参数数量与参数值数量\n             * （argsToUse.length）是否一致，来决定是否提前终止构造方法匹配逻辑。\n             */\n            if (constructorToUse != null && argsToUse.length > paramTypes.length) {\n                break;\n            }\n\n            /*\n             * 构造方法参数数量低于配置的参数数量，则忽略当前构造方法，并重试。比如 \n             * argsToUse = [obj1, obj2, obj3, obj4]，上面的构造方法列表中，\n             * 构造方法1、2和3显然不是合适选择，忽略之。\n             */\n            if (paramTypes.length < minNrOfArgs) {\n                continue;\n            }\n\n            ArgumentsHolder argsHolder;\n            if (resolvedValues != null) {\n                try {\n                    /*\n                     * 判断否则方法是否有 ConstructorProperties 注解，若有，则取注解中的\n                     * 值。比如下面的代码：\n                     * \n                     *  public class Persion {\n                     *      private String name;\n                     *      private Integer age;\n                     *\n                     *      @ConstructorProperties(value = {"coolblog", "20"})\n                     *      public Persion(String name, Integer age) {\n                     *          this.name = name;\n                     *          this.age = age;\n                     *      }\n                     * }\n                     */\n                    String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length);\n                    if (paramNames == null) {\n                        ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer();\n                        if (pnd != null) {\n                            /*\n                             * 获取构造方法参数名称列表，比如有这样一个构造方法:\n                             *   public Person(String name, int age, String sex)\n                             *   \n                             * 调用 getParameterNames 方法返回 paramNames = [name, age, sex]\n                             */\n                            paramNames = pnd.getParameterNames(candidate);\n                        }\n                    }\n\n                    /* \n                     * 创建参数值列表，返回 argsHolder 会包含进行类型转换后的参数值，比如下\n                     * 面的配置:\n                     *\n                     *     <bean id="persion" class="xyz.coolblog.autowire.Person">\n                     *         <constructor-arg name="name" value="xiaoming"/>\n                     *         <constructor-arg name="age" value="1"/>\n                     *         <constructor-arg name="sex" value="man"/>\n                     *     </bean>\n                     *\n                     * Person 的成员变量 age 是 Integer 类型的，但由于在 Spring 配置中\n                     * 只能配成 String 类型，所以这里要进行类型转换。\n                     */\n                    argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,\n                            getUserDeclaredConstructor(candidate), autowiring);\n                }\n                catch (UnsatisfiedDependencyException ex) {\n                    if (this.beanFactory.logger.isTraceEnabled()) {\n                        this.beanFactory.logger.trace(\n                                "Ignoring constructor [" + candidate + "] of bean \'" + beanName + "\': " + ex);\n                    }\n                    if (causes == null) {\n                        causes = new LinkedList<UnsatisfiedDependencyException>();\n                    }\n                    causes.add(ex);\n                    continue;\n                }\n            }\n            else {\n                if (paramTypes.length != explicitArgs.length) {\n                    continue;\n                }\n                argsHolder = new ArgumentsHolder(explicitArgs);\n            }\n\n            /*\n             * 计算参数值（argsHolder.arguments）每个参数类型与构造方法参数列表\n             * （paramTypes）中参数的类型差异量，差异量越大表明参数类型差异越大。参数类型差异\n             * 越大，表明当前构造方法并不是一个最合适的候选项。引入差异量（typeDiffWeight）\n             * 变量目的：是将候选构造方法的参数列表类型与参数值列表类型的差异进行量化，通过量化\n             * 后的数值筛选出最合适的构造方法。\n             * \n             * 讲完差异量，再来说说 mbd.isLenientConstructorResolution() 条件。\n             * 官方的解释是：返回构造方法的解析模式，有宽松模式（lenient mode）和严格模式\n             * （strict mode）两种类型可选。具体的细节没去研究，就不多说了。\n             */\n            int typeDiffWeight = (mbd.isLenientConstructorResolution() ?\n                    argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes));\n            if (typeDiffWeight < minTypeDiffWeight) {\n                constructorToUse = candidate;\n                argsHolderToUse = argsHolder;\n                argsToUse = argsHolder.arguments;\n                minTypeDiffWeight = typeDiffWeight;\n                ambiguousConstructors = null;\n            }\n            /* \n             * 如果两个构造方法与参数值类型列表之间的差异量一致，那么这两个方法都可以作为\n             * 候选项，这个时候就出现歧义了，这里先把有歧义的构造方法放入 \n             * ambiguousConstructors 集合中\n             */\n            else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {\n                if (ambiguousConstructors == null) {\n                    ambiguousConstructors = new LinkedHashSet<Constructor<?>>();\n                    ambiguousConstructors.add(constructorToUse);\n                }\n                ambiguousConstructors.add(candidate);\n            }\n        }\n\n        // 若上面未能筛选出合适的构造方法，这里将抛出 BeanCreationException 异常\n        if (constructorToUse == null) {\n            if (causes != null) {\n                UnsatisfiedDependencyException ex = causes.removeLast();\n                for (Exception cause : causes) {\n                    this.beanFactory.onSuppressedException(cause);\n                }\n                throw ex;\n            }\n            throw new BeanCreationException(mbd.getResourceDescription(), beanName,\n                    "Could not resolve matching constructor " +\n                    "(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)");\n        }\n        /*\n         * 如果 constructorToUse != null，且 ambiguousConstructors 也不为空，表明解析\n         * 出了多个的合适的构造方法，此时就出现歧义了。Spring 不会擅自决定使用哪个构造方法，\n         * 所以抛出异常。\n         */\n        else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {\n            throw new BeanCreationException(mbd.getResourceDescription(), beanName,\n                    "Ambiguous constructor matches found in bean \'" + beanName + "\' " +\n                    "(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +\n                    ambiguousConstructors);\n        }\n\n        if (explicitArgs == null) {\n            /*\n             * 缓存相关信息，比如：\n             *   1. 已解析出的构造方法对象 resolvedConstructorOrFactoryMethod\n             *   2. 构造方法参数列表是否已解析标志 constructorArgumentsResolved\n             *   3. 参数值列表 resolvedConstructorArguments 或 preparedConstructorArguments\n             *\n             * 这些信息可用在其他地方，用于进行快捷判断\n             */\n            argsHolderToUse.storeCache(mbd, constructorToUse);\n        }\n    }\n\n    try {\n        Object beanInstance;\n\n        if (System.getSecurityManager() != null) {\n            final Constructor<?> ctorToUse = constructorToUse;\n            final Object[] argumentsToUse = argsToUse;\n            beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {\n                @Override\n                public Object run() {\n                    return beanFactory.getInstantiationStrategy().instantiate(\n                            mbd, beanName, beanFactory, ctorToUse, argumentsToUse);\n                }\n            }, beanFactory.getAccessControlContext());\n        }\n        else {\n            /*\n             * 调用实例化策略创建实例，默认情况下使用反射创建实例。如果 bean 的配置信息中\n             * 包含 lookup-method 和 replace-method，则通过 CGLIB 增强 bean 实例\n             */\n            beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(\n                    mbd, beanName, this.beanFactory, constructorToUse, argsToUse);\n        }\n\n        // 设置 beanInstance 到 BeanWrapperImpl 对象中\n        bw.setBeanInstance(beanInstance);\n        return bw;\n    }\n    catch (Throwable ex) {\n        throw new BeanCreationException(mbd.getResourceDescription(), beanName,\n                "Bean instantiation via constructor failed", ex);\n    }\n}\n')])])]),t("p",[n._v("上面的方法逻辑比较复杂，做了不少事情，该方法的核心逻辑是根据参数值类型筛选合适的构造方法。解析出合适的构造方法后，剩下的工作就是构建 bean 对象了，这个工作交给了实例化策略去做。下面罗列一下这个方法的工作流程吧：")]),n._v(" "),t("ol",[t("li",[n._v("创建 BeanWrapperImpl 对象")]),n._v(" "),t("li",[n._v("解析构造方法参数，并算出 minNrOfArgs")]),n._v(" "),t("li",[n._v("获取构造方法列表，并排序")]),n._v(" "),t("li",[n._v("遍历排序好的构造方法列表，筛选合适的构造方法\n"),t("ol",[t("li",[n._v("获取构造方法参数列表中每个参数的名称")]),n._v(" "),t("li",[n._v("再次解析参数，此次解析会将value 属性值进行类型转换，由 String 转为合适的类型。")]),n._v(" "),t("li",[n._v("计算构造方法参数列表与参数值列表之间的类型差异量，以筛选出更为合适的构造方法")])])]),n._v(" "),t("li",[n._v("缓存已筛选出的构造方法以及参数值列表，若再次创建 bean 实例时，可直接使用，无需再次进行筛选")]),n._v(" "),t("li",[n._v("使用初始化策略创建 bean 对象")]),n._v(" "),t("li",[n._v("将 bean 对象放入 BeanWrapperImpl 对象中，并返回该对象")])]),n._v(" "),t("p",[n._v("由上面的流程可以看得出，通过构造方法自动注入的方式构造 bean 对象的过程还是很复杂的。为了看懂这个流程，我进行了多次调试，算是勉强弄懂大致逻辑。由于时间有限，我并未能详细分析 autowireConstructor 方法及其所调用的一些方法，比如 resolveConstructorArguments、 autowireConstructor 等。关于这些方法，这里只写了个大概，有兴趣的朋友自己去探索吧。")]),n._v(" "),t("h3",{attrs:{id:"_2-3-通过默认构造方法创建-bean-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-通过默认构造方法创建-bean-对象"}},[n._v("#")]),n._v(" 2.3 通过默认构造方法创建 bean 对象")]),n._v(" "),t("p",[n._v("看完了上面冗长的逻辑，本节来看点轻松的吧 - 通过默认构造方法创建 bean 对象。如下：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('protected BeanWrapper instantiateBean(final String beanName, final RootBeanDefinition mbd) {\n    try {\n        Object beanInstance;\n        final BeanFactory parent = this;\n        // if 条件分支里的一大坨是 Java 安全相关的代码，可以忽略，直接看 else 分支\n        if (System.getSecurityManager() != null) {\n            beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {\n                @Override\n                public Object run() {\n                    return getInstantiationStrategy().instantiate(mbd, beanName, parent);\n                }\n            }, getAccessControlContext());\n        }\n        else {\n            /*\n             * 调用实例化策略创建实例，默认情况下使用反射创建对象。如果 bean 的配置信息中\n             * 包含 lookup-method 和 replace-method，则通过 CGLIB 创建 bean 对象\n             */\n            beanInstance = getInstantiationStrategy().instantiate(mbd, beanName, parent);\n        }\n        // 创建 BeanWrapperImpl 对象\n        BeanWrapper bw = new BeanWrapperImpl(beanInstance);\n        initBeanWrapper(bw);\n        return bw;\n    }\n    catch (Throwable ex) {\n        throw new BeanCreationException(\n                mbd.getResourceDescription(), beanName, "Instantiation of bean failed", ex);\n    }\n}\n\npublic Object instantiate(RootBeanDefinition bd, String beanName, BeanFactory owner) {\n    // 检测 bean 配置中是否配置了 lookup-method 或 replace-method，若配置了，则需使用 CGLIB 构建 bean 对象\n    if (bd.getMethodOverrides().isEmpty()) {\n        Constructor<?> constructorToUse;\n        synchronized (bd.constructorArgumentLock) {\n            constructorToUse = (Constructor<?>) bd.resolvedConstructorOrFactoryMethod;\n            if (constructorToUse == null) {\n                final Class<?> clazz = bd.getBeanClass();\n                if (clazz.isInterface()) {\n                    throw new BeanInstantiationException(clazz, "Specified class is an interface");\n                }\n                try {\n                    if (System.getSecurityManager() != null) {\n                        constructorToUse = AccessController.doPrivileged(new PrivilegedExceptionAction<Constructor<?>>() {\n                            @Override\n                            public Constructor<?> run() throws Exception {\n                                return clazz.getDeclaredConstructor((Class[]) null);\n                            }\n                        });\n                    }\n                    else {\n                        // 获取默认构造方法\n                        constructorToUse = clazz.getDeclaredConstructor((Class[]) null);\n                    }\n                    // 设置 resolvedConstructorOrFactoryMethod\n                    bd.resolvedConstructorOrFactoryMethod = constructorToUse;\n                }\n                catch (Throwable ex) {\n                    throw new BeanInstantiationException(clazz, "No default constructor found", ex);\n                }\n            }\n        }\n        // 通过无参构造方法创建 bean 对象\n        return BeanUtils.instantiateClass(constructorToUse);\n    }\n    else {\n        // 使用 GCLIG 创建 bean 对象\n        return instantiateWithMethodInjection(bd, beanName, owner);\n    }\n}\n')])])]),t("p",[n._v("上面就是通过默认构造方法创建 bean 对象的过程，比较简单，就不多说了。最后我们再来看看简单看看通过无参构造方法刚创建 bean 对象的代码（通过 CGLIB 创建 bean 对象的方式就不看了）是怎样的，如下：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('public static <T> T instantiateClass(Constructor<T> ctor, Object... args) throws BeanInstantiationException {\n    Assert.notNull(ctor, "Constructor must not be null");\n    try {\n        // 设置构造方法为可访问\n        ReflectionUtils.makeAccessible(ctor);\n        // 通过反射创建 bean 实例，这里的 args 是一个没有元素的空数组\n        return ctor.newInstance(args);\n    }\n    catch (InstantiationException ex) {\n        throw new BeanInstantiationException(ctor, "Is it an abstract class?", ex);\n    }\n    catch (IllegalAccessException ex) {\n        throw new BeanInstantiationException(ctor, "Is the constructor accessible?", ex);\n    }\n    catch (IllegalArgumentException ex) {\n        throw new BeanInstantiationException(ctor, "Illegal arguments for constructor", ex);\n    }\n    catch (InvocationTargetException ex) {\n        throw new BeanInstantiationException(ctor, "Constructor threw exception", ex.getTargetException());\n    }\n}\n')])])])])}),[],!1,null,null,null);e.default=a.exports}}]);