(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{497:function(e,a,n){"use strict";n.r(a);var r=n(30),s=Object(r.a)({},(function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"shardingsphere分表分库解决方案"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#shardingsphere分表分库解决方案"}},[e._v("#")]),e._v(" ShardingSphere分表分库解决方案")]),e._v(" "),n("h2",{attrs:{id:"_1-1-简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-简介"}},[e._v("#")]),e._v(" 1.1 简介")]),e._v(" "),n("p",[n("strong",[e._v("ShardingSphere")]),e._v("一套开源的分布式数据库中间件解决方案组成的生态圈，它由"),n("strong",[e._v("Sharding-JDBC")]),e._v("、"),n("strong",[e._v("Sharding-Proxy")]),e._v("和"),n("strong",[e._v("Sharding-Sidecar")]),e._v("（计划中）这3款相互独立的产品组成。 他们均提供标准化的数据分片、分布式事务和数据库治理功能，可适用于如Java同构、异构语言、云原生等各种多样化的应用场景。")]),e._v(" "),n("p",[n("strong",[e._v("ShardingSphere")]),e._v("定位为关系型数据库中间件，旨在充分合理地在分布式的场景下利用关系型数据库的计算和存储能力，而并非实现一个全新的关系型数据库。 它与NoSQL和NewSQL是并存而非互斥的关系。NoSQL和NewSQL作为新技术探索的前沿，放眼未来，拥抱变化，是非常值得推荐的。反之，也可以用另一种思路看待问题，放眼未来，关注不变的东西，进而抓住事物本质。 关系型数据库当今依然占有巨大市场，是各个公司核心业务的基石，未来也难于撼动，我们目前阶段更加关注在原有基础上的增量，而非颠覆。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/wuyilong/picture-bed/raw/master/img/2f3d638e48027e510a9100504b0d08bc_1828752-20200926000514644-1159706331.png",alt:"img"}})]),e._v(" "),n("h2",{attrs:{id:"_1-2-sharding-jdbc简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-sharding-jdbc简介"}},[e._v("#")]),e._v(" 1.2 Sharding-JDBC简介")]),e._v(" "),n("p",[e._v("定位为轻量级 Java 框架，在 Java 的 JDBC 层提供的额外服务。 它使用客户端直连数据库，以 jar 包形式提供服务，无需额外部署和依赖，可理解为增强版的 JDBC 驱动，完全兼容 JDBC 和各种 ORM 框架。")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("适用于任何基于JDBC的ORM框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template或直接使用JDBC。")])]),e._v(" "),n("li",[n("p",[e._v("支持任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, Druid, HikariCP等。")])]),e._v(" "),n("li",[n("p",[e._v("支持任意实现JDBC规范的数据库。目前支持MySQL，Oracle，SQLServer，PostgreSQL以及任何遵循SQL92标准的数据库")])])]),e._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/wuyilong/picture-bed/raw/master/img/1828752-20200926000616844-1445404276.png",alt:"img"}})]),e._v(" "),n("h2",{attrs:{id:"_1-3-sharding-proxy简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-sharding-proxy简介"}},[e._v("#")]),e._v(" 1.3  Sharding-Proxy简介")]),e._v(" "),n("p",[e._v("定位为透明化的数据库代理端，提供封装了数据库二进制协议的服务端版本，用于完成对异构语言的支持。 目前先提供MySQL/PostgreSQL版本，它可以使用任何兼容MySQL/PostgreSQL协议的访问客户端(如：MySQL Command Client, MySQL Workbench, Navicat等)操作数据，对DBA更加友好。")]),e._v(" "),n("ul",[n("li",[e._v("向应用程序完全透明，可直接当做MySQL/PostgreSQL使用。")]),e._v(" "),n("li",[e._v("适用于任何兼容MySQL/PostgreSQL协议的的客户端。")])]),e._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/wuyilong/picture-bed/raw/master/img/1828752-20200926000720270-17216569.png",alt:"img"}})]),e._v(" "),n("h2",{attrs:{id:"_1-4-sharding-sidecar-todo-简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-sharding-sidecar-todo-简介"}},[e._v("#")]),e._v(" 1.4 Sharding-Sidecar（TODO）简介")]),e._v(" "),n("p",[e._v("定位为Kubernetes的云原生数据库代理，以Sidecar的形式代理所有对数据库的访问。 通过无中心、零侵入的方案提供与数据库交互的的啮合层，即Database Mesh，又可称数据网格。")]),e._v(" "),n("p",[e._v("Database Mesh的关注重点在于如何将分布式的数据访问应用与数据库有机串联起来，它更加关注的是交互，是将杂乱无章的应用与数据库之间的交互有效的梳理。使用Database Mesh，访问数据库的应用和数据库终将形成一个巨大的网格体系，应用和数据库只需在网格体系中对号入座即可，它们都是被啮合层所治理的对象。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/wuyilong/picture-bed/raw/master/img/1828752-20200926000820077-1230480748.png",alt:"img"}})]),e._v(" "),n("p",[n("img",{attrs:{src:"https://gitee.com/wuyilong/picture-bed/raw/master/img/image-20210414202025184.png",alt:"image-20210414202025184"}})]),e._v(" "),n("h2",{attrs:{id:"_1-5-功能列表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-功能列表"}},[e._v("#")]),e._v(" 1.5 功能列表")]),e._v(" "),n("h3",{attrs:{id:"_1-5-1-数据分片"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-1-数据分片"}},[e._v("#")]),e._v(" 1.5.1 数据分片")]),e._v(" "),n("ul",[n("li",[e._v("分库 & 分表")]),e._v(" "),n("li",[e._v("读写分离")]),e._v(" "),n("li",[e._v("分片策略定制化")]),e._v(" "),n("li",[e._v("无中心化分布式主键")])]),e._v(" "),n("h3",{attrs:{id:"_1-5-2-分布式事务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-2-分布式事务"}},[e._v("#")]),e._v(" 1.5.2 分布式事务")]),e._v(" "),n("ul",[n("li",[e._v("标准化事务接口")]),e._v(" "),n("li",[e._v("XA强一致事务")]),e._v(" "),n("li",[e._v("柔性事务")])]),e._v(" "),n("h3",{attrs:{id:"_1-5-3-数据库治理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-3-数据库治理"}},[e._v("#")]),e._v(" 1.5.3 数据库治理")]),e._v(" "),n("ul",[n("li",[e._v("配置动态化")]),e._v(" "),n("li",[e._v("编排 & 治理")]),e._v(" "),n("li",[e._v("数据脱敏")]),e._v(" "),n("li",[e._v("可视化链路追踪")])]),e._v(" "),n("h1",{attrs:{id:"_2-sharding-jdbc"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-sharding-jdbc"}},[e._v("#")]),e._v(" 2. Sharding-JDBC")]),e._v(" "),n("h2",{attrs:{id:"_2-1-分库分表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-分库分表"}},[e._v("#")]),e._v(" 2.1 分库分表")]),e._v(" "),n("h3",{attrs:{id:"_2-1-1-准备测试数据库和表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-准备测试数据库和表"}},[e._v("#")]),e._v(" 2.1.1 准备测试数据库和表")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("SET FOREIGN_KEY_CHECKS=0;\n\n-- ----------------------------\n-- 创建数据库\n-- ----------------------------\nDROP database if exists ds0;\nDROP database if exists ds1;\nCREATE database ds0;\nCREATE database ds1;\n\n-- ----------------------------\n-- Table structure for user_0\n-- ----------------------------\nDROP TABLE IF EXISTS ds0.`user_0`;\nCREATE TABLE ds0.`user_0` (\n  `id` bigint NOT NULL,\n  `name` varchar(255) DEFAULT NULL,\n  `age` int(11) DEFAULT NULL,\n  `create_time` datetime,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\n-- ----------------------------\n-- Table structure for user_1\n-- ----------------------------\nDROP TABLE IF EXISTS ds0.`user_1`;\nCREATE TABLE ds0.`user_1` (\n  `id` bigint NOT NULL,\n  `name` varchar(255) DEFAULT NULL,\n  `age` int(11) DEFAULT NULL,\n  `create_time` datetime,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\n-- ----------------------------\n-- Table structure for user_\n-- ----------------------------\nDROP TABLE IF EXISTS ds0.`user_2021_3`\nCREATE TABLE ds0.`user_2021_3` (\n  `id` bigint NOT NULL,\n  `name` varchar(255) DEFAULT NULL,\n  `age` int(11) DEFAULT NULL,\n  `create_time` datetime,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\n-- ----------------------------\n-- Table structure for user_0\n-- ----------------------------\nDROP TABLE IF EXISTS ds1.`user_0`;\nCREATE TABLE ds1.`user_0` (\n  `id` bigint NOT NULL,\n  `name` varchar(255) DEFAULT NULL,\n  `age` int(11) DEFAULT NULL,\n  `create_time` datetime,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\n-- ----------------------------\n-- Table structure for user_1\n-- ----------------------------\nDROP TABLE IF EXISTS `ds1.user_1`;\nCREATE TABLE ds1.`user_1` (\n  `id` bigint NOT NULL,\n  `name` varchar(255) DEFAULT NULL,\n  `age` int(11) DEFAULT NULL,\n  `create_time` datetime,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\n-- ----------------------------\n-- Table structure for user_\n-- ----------------------------\nDROP TABLE IF EXISTS ds1.`user_2021_3`\nCREATE TABLE ds1.`user_2021_3` (\n  `id` bigint NOT NULL,\n  `name` varchar(255) DEFAULT NULL,\n  `age` int(11) DEFAULT NULL,\n  `create_time` datetime,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n")])])]),n("h3",{attrs:{id:"_2-1-2-创建maven项目并添加依赖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-创建maven项目并添加依赖"}},[e._v("#")]),e._v(" 2.1.2 创建maven项目并添加依赖")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<dependency>\n    <groupId>org.apache.shardingsphere</groupId>\n    <artifactId>sharding-jdbc-spring-boot-starter</artifactId>\n    <version>4.0.1</version>\n</dependency>\n\x3c!-- https://mvnrepository.com/artifact/javax.xml.bind/jaxb-api --\x3e\n<dependency>\n    <groupId>javax.xml.bind</groupId>\n    <artifactId>jaxb-api</artifactId>\n    <version>2.3.0-b170201.1204</version>\n</dependency>\n\x3c!-- https://mvnrepository.com/artifact/javax.activation/activation --\x3e\n<dependency>\n    <groupId>javax.activation</groupId>\n    <artifactId>activation</artifactId>\n    <version>1.1</version>\n</dependency>\n\x3c!-- https://mvnrepository.com/artifact/org.glassfish.jaxb/jaxb-runtime --\x3e\n<dependency>\n    <groupId>org.glassfish.jaxb</groupId>\n    <artifactId>jaxb-runtime</artifactId>\n    <version>2.3.0-b170127.1453</version>\n</dependency>\n")])])]),n("h3",{attrs:{id:"_2-1-3-spring-properties配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3-spring-properties配置"}},[e._v("#")]),e._v(" 2.1.3 spring.properties配置")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("#配置数据源 boke_1 boke_2\nspring.shardingsphere.datasource.names=ds0,ds1\n\n# ds1 数据源配置\nspring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource\nspring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://localhost:3306/ds0?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=Asia/Shanghai\nspring.shardingsphere.datasource.ds0.username=root\nspring.shardingsphere.datasource.ds0.password=123456\n\n# ds0 数据源配置\nspring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource\nspring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver\nspring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://localhost:3306/ds1?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=Asia/Shanghai\nspring.shardingsphere.datasource.ds1.username=root\nspring.shardingsphere.datasource.ds1.password=123456\n\n#  分库策略（水平） 以 id 取模  进行 分库\nspring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=id\nspring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ds$->{id % 2}\n\n# 绑定表  user\nspring.shardingsphere.sharding.binding-tables=user\n\n# 使用SNOWFLAKE算法生成主键\nspring.shardingsphere.sharding.tables.user.key-generator.column=id\nspring.shardingsphere.sharding.tables.user.key-generator.type=SNOWFLAKE\n\n# 非自定义配置\n#  user 分表策略\n#spring.shardingsphere.sharding.tables.user.actual-data-nodes=ds$->{0..1}.user_$->{0..1}\n#  分表 id\n#spring.shardingsphere.sharding.tables.user.table-strategy.inline.sharding-column=age\n#  分表策略  id 取模\n#spring.shardingsphere.sharding.tables.user.table-strategy.inline.algorithm-expression=user_$->{age % 2}\n")])])]),n("h3",{attrs:{id:"_2-1-4-代码测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-4-代码测试"}},[e._v("#")]),e._v(" 2.1.4 代码测试")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Resource\nprivate UserService userService;\n\n// 新增测试\n@Test\npublic void testInsert() {\n    for (int i = 0; i < 20; i++) {\n        User user = new User();\n        user.setName("张三");\n        user.setAge(11);\n        user.setCreateTime(new Date());\n        userService.save(user);\n    }\n}\n\n// 更新测试\n@Test\npublic void testUpdate() {\n    User user = new User();\n    user.setId(1370681228566134785L);\n    user.setAge(12);\n    user.setName("1111");\n    // 不能更新分片字段\n    //user.setCreateTime(new Date());\n    userService.updateById(user);\n}\n\n// 删除测试\n@Test\npublic void testDelete() {\n\tuserService.removeById(1368486339065597954L);\n}\n\n// 单个查询测试\n@Test\npublic void testSelect1() {\n    User user = userService.getById(1370681228566134785L);\n    System.out.println("=============" + user);\n}\n\n// 按条件查询测试\n@Test\npublic void testSelect2() {\n    QueryWrapper<User> wrapper = new QueryWrapper<User>();\n    wrapper.eq("name", "张三");\n    List<User> list = userService.list(wrapper);\n    System.out.println(list);\n    System.out.println(list.size());\n}\n\n// 分页、条件、排序查询\n@Test\npublic void testSelect3() {\n    Page<User> page = new Page<>(0, 10);\n    page.setAsc("create_time");\n    QueryWrapper<User> wrapper = new QueryWrapper<User>();\n    wrapper.eq("name", "张三");\n    IPage<User> pageList = userService.page(page, wrapper);\n    for (int i = 0; i < pageList.getRecords().size(); i++) {\n    \tSystem.out.println("==============" + pageList.getRecords().get(i));\n    }\n}\n')])])]),n("h3",{attrs:{id:"_2-1-5-自定义分片策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-5-自定义分片策略"}},[e._v("#")]),e._v(" 2.1.5 自定义分片策略")]),e._v(" "),n("h4",{attrs:{id:"_2-1-5-1-自定义分库策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-5-1-自定义分库策略"}},[e._v("#")]),e._v(" 2.1.5.1 自定义分库策略")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class DBShardingAlgorithm implements PreciseShardingAlgorithm<Long> {\n\n    @Override\n    public String doSharding(Collection<String> availableTargetNames, PreciseShardingValue<Long> shardingValue) {\n\n        System.out.println("DB  PreciseShardingAlgorithm  ");\n        // 真实节点\n        availableTargetNames.stream().forEach((item) -> {\n            System.out.println(String.format("actual node db:%s", item));\n        });\n\n        System.out.println(String.format("logic table name:%s,rout column:%s", shardingValue.getLogicTableName(), shardingValue.getColumnName()));\n\n        //精确分片\n        System.out.println(String.format("column value:%s", shardingValue.getValue()));\n\n        long db_index = shardingValue.getValue() % 2;\n\n        for (String each : availableTargetNames) {\n            if (each.equals("ds" + db_index)) {\n                return each;\n            }\n        }\n        throw new IllegalArgumentException();\n    }\n}\n')])])]),n("h4",{attrs:{id:"_2-1-5-2-自定义分表策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-5-2-自定义分表策略"}},[e._v("#")]),e._v(" 2.1.5.2 自定义分表策略")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('package com.hy.shardingsphere.support;\n\nimport org.apache.shardingsphere.api.sharding.standard.PreciseShardingAlgorithm;\nimport org.apache.shardingsphere.api.sharding.standard.PreciseShardingValue;\n\nimport java.util.Collection;\nimport java.util.Date;\n\npublic class TableShardingAlgorithm implements PreciseShardingAlgorithm<Date> {\n    @Override\n    public String doSharding(Collection<String> availableTargetNames, PreciseShardingValue<Date> shardingValue) {\n\n        System.out.println("table PreciseShardingAlgorithm ");\n        // 真实节点\n        availableTargetNames.stream().forEach((item) -> {\n            System.out.println(String.format("actual node table:%s", item));\n        });\n\n        System.out.println(String.format("logic table name:%s,rout column:%s", shardingValue.getLogicTableName(), shardingValue.getColumnName()));\n\n        //精确分片\n        System.out.println(String.format("column value:%s", shardingValue.getValue()));\n\n\n        String tb_name = shardingValue.getLogicTableName() + "_";\n\n\n        // 根据当前日期 来 分库分表\n        Date date = shardingValue.getValue();\n        String year = String.format("%tY", date);\n        String mon = String.format("%tm", date);\n        String dat = String.format("%td", date);\n\n\n        // 选择表\n        tb_name = tb_name + year + "_" + mon.replaceAll("^(0+)", "");\n        System.out.println("tb_name:" + tb_name);\n\n        for (String each : availableTargetNames) {\n            if (each.equals(tb_name)) {\n                return each;\n            }\n        }\n\n        throw new IllegalArgumentException();\n    }\n}\n\n')])])]),n("h4",{attrs:{id:"_2-1-5-3-配置种指定自定义策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-5-3-配置种指定自定义策略"}},[e._v("#")]),e._v(" 2.1.5.3 配置种指定自定义策略")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("spring.shardingsphere.sharding.tables.user.actual-data-nodes=ds$->{0..1}.user_$->{2021}_$->{3}\n# 自定义 分片算法\n# 分库分片健      database-strategy 数据库策略\nspring.shardingsphere.sharding.tables.user.database-strategy.standard.sharding-column=id\n# 自定义 分片 策略\nspring.shardingsphere.sharding.tables.user.database-strategy.standard.precise-algorithm-class-name=com.hy.shardingsphere.support.DBShardingAlgorithm\n# table-strategy   表 的 策略\nspring.shardingsphere.sharding.tables.user.table-strategy.standard.sharding-column=create_time\nspring.shardingsphere.sharding.tables.user.table-strategy.standard.precise-algorithm-class-name=com.hy.shardingsphere.support.TableShardingAlgorithm\n")])])]),n("h1",{attrs:{id:"_3-sharding-proxy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-sharding-proxy"}},[e._v("#")]),e._v(" 3. Sharding-Proxy")]),e._v(" "),n("h2",{attrs:{id:"_3-1-分库分表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-分库分表"}},[e._v("#")]),e._v(" 3.1 分库分表")]),e._v(" "),n("h3",{attrs:{id:"_3-1-1-下载sharding-proxy并安装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-下载sharding-proxy并安装"}},[e._v("#")]),e._v(" 3.1.1 下载Sharding-Proxy并安装")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("下载地址：https://shardingsphere.apache.org/document/current/cn/downloads/")])]),e._v(" "),n("li",[n("p",[e._v("下载后直接解压即可")])]),e._v(" "),n("li",[n("p",[e._v("需要将对应数据库的驱动包拷贝到 "),n("strong",[e._v("lib")]),e._v(" 目录下")])])]),e._v(" "),n("h3",{attrs:{id:"_3-1-2-系统配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-系统配置"}},[e._v("#")]),e._v(" 3.1.2 系统配置")]),e._v(" "),n("p",[e._v("修改conf/server.yaml配置Sharding-Proxy系统配置")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("authentication:\n  users:\n    root:\n      password: root  #root用户密码\n    sharding:\t#其他用户的配置\n      password: sharding \n      authorizedSchemas: sharding_db  #该用户能够访问的数据库\n")])])]),n("h3",{attrs:{id:"_3-1-3-分片配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-3-分片配置"}},[e._v("#")]),e._v(" 3.1.3 分片配置")]),e._v(" "),n("p",[e._v("harding-Proxy 将 分片配置提取到了 config-sharding.yaml 里面,配置和 sharding-jdbc基本一样")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("schemaName: sharding_db  #数据库名字\n\ndataSources:\n  ds0:\n    url: jdbc:mysql://localhost:3306/ds0?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=Asia/Shanghai\n    username: root\n    password: 123456\n    connectionTimeoutMilliseconds: 30000\n    idleTimeoutMilliseconds: 60000\n    maxLifetimeMilliseconds: 1800000\n    maxPoolSize: 50\n  ds1:\n    url: jdbc:mysql://localhost:3306/ds1?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=Asia/Shanghai\n    username: root\n    password: 123456\n    connectionTimeoutMilliseconds: 30000\n    idleTimeoutMilliseconds: 60000\n    maxLifetimeMilliseconds: 1800000\n    maxPoolSize: 50\n\n# 分片规则\nshardingRule:\n  tables:\n    user:\n      actualDataNodes: ds$->{0..1}.user_$->{0..1}  # \n      tableStrategy:  # 配置表分片\n        inline:\n          shardingColumn: age #按照age字段分片\n          algorithmExpression: user_$->{age % 2}   # 分片规则\n      keyGenerator:\n        type: SNOWFLAKE # id生成算法 雪花算法\n        column: id      # 主键列\n  bindingTables:\n    - user\n  defaultDatabaseStrategy:  # 配置库分片\n    inline:\n      shardingColumn: id\n      algorithmExpression: ds$->{id % 2}\n  defaultTableStrategy:\n    none:\n")])])]),n("h3",{attrs:{id:"_3-1-4-启动-sharding-proxy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-4-启动-sharding-proxy"}},[e._v("#")]),e._v(" 3.1.4 启动 Sharding-Proxy")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("windows: bin/start.bat\nlinux: start.sh\n\n注意: Sharding-Proxy启动默认端口为 3307 启动时可指定\nwindows: start.bat 3308\nlinux : start.sh 3308\n")])])]),n("h3",{attrs:{id:"_3-1-5-测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-5-测试"}},[e._v("#")]),e._v(" 3.1.5 测试")]),e._v(" "),n("p",[e._v("项目的数据库连接改为连接Sharding-Proxy 后插入数据,数据能够正常添加。")]),e._v(" "),n("h3",{attrs:{id:"_3-1-6-自定义分片策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-6-自定义分片策略"}},[e._v("#")]),e._v(" 3.1.6 自定义分片策略")]),e._v(" "),n("ul",[n("li",[e._v("按照Sharding-JDBC的方式开发自定义分片策略类项目")]),e._v(" "),n("li",[e._v("将该项目打成jar包")]),e._v(" "),n("li",[e._v("将jar包丢到proxy的lib目录下")]),e._v(" "),n("li",[e._v("配置如下")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("schemaName: sharding_db\n\ndataSources:\n  ds0:\n    url: jdbc:mysql://localhost:3306/ds0?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=Asia/Shanghai\n    username: root\n    password: 123456\n    connectionTimeoutMilliseconds: 30000\n    idleTimeoutMilliseconds: 60000\n    maxLifetimeMilliseconds: 1800000\n    maxPoolSize: 50\n  ds1:\n    url: jdbc:mysql://localhost:3306/ds1?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=Asia/Shanghai\n    username: root\n    password: 123456\n    connectionTimeoutMilliseconds: 30000\n    idleTimeoutMilliseconds: 60000\n    maxLifetimeMilliseconds: 1800000\n    maxPoolSize: 50\n\nshardingRule:\n  tables:\n    user:\n      actualDataNodes: ds$->{0..1}.user_$->{2021}_$->{3}\n      tableStrategy:\n        standard:   # 区别在这里  指定自定义分片字段和自定义分片策略类\n          shardingColumn: create_time\n          preciseAlgorithmClassName: com.hy.shardingsphere.support.TableShardingAlgorithm\n      keyGenerator:\n        type: SNOWFLAKE\n        column: id\n  bindingTables:\n    - user\n  defaultDatabaseStrategy:\n    inline:\n      shardingColumn: id\n      algorithmExpression: ds$->{id % 2}\n  defaultTableStrategy:\n    none:\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);