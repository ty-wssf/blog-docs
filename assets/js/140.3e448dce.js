(window.webpackJsonp=window.webpackJsonp||[]).push([[140],{566:function(t,a,n){"use strict";n.r(a);var e=n(30),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"java-面试题-一-的21-50题答案"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-面试题-一-的21-50题答案"}},[t._v("#")]),t._v(" Java 面试题（一）的21~50题答案")]),t._v(" "),n("h3",{attrs:{id:"_21、描述一下-jvm-加载-class-文件的原理机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_21、描述一下-jvm-加载-class-文件的原理机制"}},[t._v("#")]),t._v(" 21、描述一下 JVM 加载 class 文件的原理机制？")]),t._v(" "),n("p",[t._v("JVM 中类的装载是由类加载器（ClassLoader）和它的子类来实现的，Java 中的类加载器是一个重要的 Java 运行时系统组件，它负责在运行时查找和装入类文件中的类。")]),t._v(" "),n("p",[t._v("由于 Java 的跨平台性，经过编译的 Java 源程序并不是一个可执行程序，而是一个或多个类文件。当 Java 程序需要使用某个类时，JVM 会确保这个类已经被加载、连接（验证、准备和解析）和初始化。类的加载是指把类的.class 文件中的数据读入到内存中，通常是创建一个字节数组读入.class 文件，然后产生与所加载类对应的 Class 对象。加载完成后，Class 对象还不完整，所以此时的类还不可用。当类被加载后就进入连接阶段，这一阶段包括验证、准备（为静态变量分配内存并设置默认的初始值）和解析（将符号引用替换为直接引用）三个步骤。最后 JVM 对类进行初始化，包括：1)如果类存在直接的父类并且这个类还没有被初始化，那么就先初始化父类；2)如果类中存在初始化语句，就依次执行这些初始化语句。")]),t._v(" "),n("p",[t._v("类的加载是由类加载器完成的，类加载器包括：根加载器（BootStrap）、扩展加载器（Extension）、系统加载器（System）和用户自定义类加载器（java.lang.ClassLoader 的子类）。从 Java 2（JDK 1.2）开始，从 Java 2（JDK 1.2）开始，类加载过程采取了父亲委托机制（PDM）。PDM 更好的保证了 Java 平台的安全性，在该机制中，JVM 自带的 Bootstrap 是根加载器，其他的加载器都有且仅有一个父类加载器。类的加载首先请求父类加载器加载，父类加载器无能为力时才由其子类加载器自行加载。JVM 不会向 Java 程序提供对 Bootstrap 的引用。下面是关于几个类加载器的说明：")]),t._v(" "),n("p",[t._v("（1） Bootstrap：一般用本地代码实现，负责加载 JVM 基础核心类库（rt.jar）；")]),t._v(" "),n("p",[t._v("（2） Extension：从 java.ext.dirs 系统属性所指定的目录中加载类库，它的父加载器是 Bootstrap；")]),t._v(" "),n("p",[t._v("（3） System：又叫应用类加载器，其父类是 Extension。它是应用最广泛的类加载器。它从环境变量 classpath 或者系统属性 java.class.path 所指定的目录中记载类，是用户自定义加载器的默认父加载器。")]),t._v(" "),n("h3",{attrs:{id:"_22、char-型变量中能不能存贮一个中文汉字-为什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_22、char-型变量中能不能存贮一个中文汉字-为什么"}},[t._v("#")]),t._v(" 22、char 型变量中能不能存贮一个中文汉字，为什么？")]),t._v(" "),n("p",[t._v("char 类型可以存储一个中文汉字，因为 Java 中使用的编码是 Unicode（不选择任何特定的编码，直接使用字符在字符集中的编号，这是统一的唯一方法），一个 char 类型占 2 个字节（16 比特），所以放一个中文是没问题的。")]),t._v(" "),n("p",[t._v("补充：使用 Unicode 意味着字符在 JVM 内部和外部有不同的表现形式，在 JVM内部都是 Unicode，当这个字符被从 JVM 内部转移到外部时（例如存入文件系统中），需要进行编码转换。所以 Java 中有字节流和字符流，以及在字符流和字节流之间进行转换的转换流，如 InputStreamReader 和 OutputStreamReader，这两个类是字节流和字符流之间的适配器类，承担了编码转换的任务；对于 C 程序员来说，要完成这样的编码转换恐怕要依赖于 union（联合体/共用体）共享内存的特征来实现了。")]),t._v(" "),n("h3",{attrs:{id:"_23、抽象类-abstract-class-和接口-interface-有什么异同"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_23、抽象类-abstract-class-和接口-interface-有什么异同"}},[t._v("#")]),t._v(" 23、抽象类（abstract class）和接口（interface）有什么异同？")]),t._v(" "),n("p",[t._v("抽象类和接口都不能够实例化，但可以定义抽象类和接口类型的引用。一个类如果继承了某个抽象类或者实现了某个接口都需要对其中的抽象方法全部进行实现，否则该类仍然需要被声明为抽象类。接口比抽象类更加抽象，因为抽象类中可以定义构造器，可以有抽象方法和具体方法，而接口中不能定义构造器而且其中的方法全部都是抽象方法。抽象类中的成员可以是 private、默认、protected、public 的，而接口中的成员全都是 public 的。抽象类中可以定义成员变量，而接口中定义的成员变量实际上都是常量。有抽象方法的类必须被声明为抽象类，而抽象类未必要有抽象方法。")]),t._v(" "),n("h3",{attrs:{id:"_24、静态嵌套类-static-nested-class-和内部类-inner-class-的不同"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_24、静态嵌套类-static-nested-class-和内部类-inner-class-的不同"}},[t._v("#")]),t._v(" 24、静态嵌套类(Static Nested Class)和内部类（Inner Class）的不同？")]),t._v(" "),n("p",[t._v("Static Nested Class 是被声明为静态（static）的内部类，它可以不依赖于外部类实例被实例化。而通常的内部类需要在外部类实例化后才能实例化，其语法看起来挺诡异的，如下所示。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('/**\n* 扑克类（一副扑克）\n* @author 骆昊\n*\n*/\npublic class Poker {\n\tprivate static String[] suites = {"黑桃", "红桃", "草花", "方块"};\n\tprivate static int[] faces = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13};\n\tprivate Card[] cards;\n\t/**\n* 构造器\n*\n*/\n\tpublic Poker() {\n\t\tcards = new Card[52];\n\t\tfor (int i = 0; i < suites.length; i++) {\n\t\t\tfor (int j = 0; j < faces.length; j++) {\n\t\t\t\tcards[i * 13 + j] = new Card(suites[i], faces[j]);\n\t\t\t}\n\t\t}\n\t}\n\t/**\n* 洗牌 （随机乱序）\n*\n*/\n\tpublic void shuffle() {\n\t\tfor (int i = 0, len = cards.length; i < len; i++) {\n\t\t\tint index = (int) (Math.random() * len);\n\t\t\tCard temp = cards[index];\n\t\t\tcards[index] = cards[i];\n\t\t\tcards[i] = temp;\n\t\t}\n\t}\n\t/**\n* 发牌\n* @param index 发牌的位置\n*\n*/\n\tpublic Card deal(int index) {\n\t\treturn cards[index];\n\t}\n\t/**\n* 卡片类（一张扑克）\n* [内部类]\n* @author 骆昊\n*\n*/\n\tpublic class Card {\n\t\tprivate String suite;\n\t\t// 花色\n\t\tprivate int face;\n\t\t// 点数\n\t\tpublic Card(String suite, int face) {\n\t\t\tthis.suite = suite;\n\t\t\tthis.face = face;\n\t\t}\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\tString faceStr = "";\n\t\t\tswitch(face) {\n\t\t\t\tcase 1: faceStr = "A";\n\t\t\t\tbreak;\n\t\t\t\tcase 11: faceStr = "J";\n\t\t\t\tbreak;\n\t\t\t\tcase 12: faceStr = "Q";\n\t\t\t\tbreak;\n\t\t\t\tcase 13: faceStr = "K";\n\t\t\t\tbreak;\n\t\t\t\tdefault: faceStr = String.valueOf(face);\n\t\t\t}\n\t\t\treturn suite + faceStr;\n\t\t}\n\t}\n}\n测试代码：\nclass PokerTest {\n\tpublic static void main(String[] args) {\n\t\tPoker poker = new Poker();\n\t\tpoker.shuffle();\n\t\t// 洗牌\n\t\tPoker.Card c1 = poker.deal(0);\n\t\t// 发第一张牌\n\t\t// 对于非静态内部类 Card\n\t\t// 只有通过其外部类 Poker 对象才能创建 Card 对象\n\t\tPoker.Card c2 = poker.new Card("红心", 1);\n\t\t// 自己创建一张牌\n\t\tSystem.out.println(c1);\n\t\t// 洗牌后的第一张\n\t\tSystem.out.println(c2);\n\t\t// 打印: 红心 A\n\t}\n}\n')])])]),n("p",[t._v("面试题 - 下面的代码哪些地方会产生编译错误？")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class Outer {\n\tclass Inner {\n\t}\n\tpublic static void foo() {\n\t\tnew Inner();\n\t}\n\tpublic void bar() {\n\t\tnew Inner();\n\t}\n\tpublic static void main(String[] args) {\n\t\tnew Inner();\n\t}\n}\n")])])]),n("p",[n("strong",[t._v("注意：")]),t._v(" Java中非静态内部类对象的创建要依赖其外部类对象，上面的面试题中 foo和 main 方法都是静态方法，静态方法中没有 this，也就是说没有所谓的外部类对象，因此无法创建内部类对象，如果要在静态方法中创建内部类对象，可以这样做：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("new Outer().new Inner();\n")])])]),n("h3",{attrs:{id:"_25、java-中会存在内存泄漏吗-请简单描述。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_25、java-中会存在内存泄漏吗-请简单描述。"}},[t._v("#")]),t._v(" 25、Java 中会存在内存泄漏吗，请简单描述。")]),t._v(" "),n("p",[t._v("理论上 Java 因为有垃圾回收机制（GC）不会存在内存泄露问题（这也是 Java 被广泛使用于服务器端编程的一个重要原因）；然而在实际开发中，可能会存在无用但可达的对象，这些对象不能被 GC 回收，因此也会导致内存泄露的发生。例如Hibernate 的 Session（一级缓存）中的对象属于持久态，垃圾回收器是不会回收这些对象的，然而这些对象中可能存在无用的垃圾对象，如果不及时关闭（close）或清空（flush）一级缓存就可能导致内存泄露。下面例子中的代码也会导致内存泄露。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import java.util.Arrays;\nimport java.util.EmptyStackException;\npublic class MyStack<T> {\n\tprivate T[] elements;\n\tprivate int size = 0;\n\tprivate static final int INIT_CAPACITY = 16;\n\tpublic MyStack() {\n\t\telements = (T[]) new Object[INIT_CAPACITY];\n\t}\n\tpublic void push(T elem) {\n\t\tensureCapacity();\n\t\telements[size++] = elem;\n\t}\n\tpublic T pop() {\n\t\tif(size == 0)\n\t\tthrow new EmptyStackException();\n\t\treturn elements[--size];\n\t}\n\tprivate void ensureCapacity() {\n\t\tif(elements.length == size) {\n\t\t\telements = Arrays.copyOf(elements, 2 * size + 1);\n\t\t}\n\t}\n}\n")])])]),n("p",[t._v("上面的代码实现了一个栈（先进后出（FILO））结构，乍看之下似乎没有什么明显的问题，它甚至可以通过你编写的各种单元测试。然而其中的 pop 方法却存在内存泄露的问题，当我们用 pop 方法弹出栈中的对象时，该对象不会被当作垃圾回收，即使使用栈的程序不再引用这些对象，因为栈内部维护着对这些对象的过期引 用（obsolete reference）。在支持垃圾回收的语言中，内存泄露是很隐蔽的，这种内存泄露其实就是无意识的对象保持。如果一个对象引用被无意识的保留起来了，那么垃圾回收器不会处理这个对象，也不会处理该对象引用的其他对象，即使这样的对象只有少数几个，也可能会导致很多的对象被排除在垃圾回收之外，从而对性能造成重大影响，极端情况下会引发 Disk Paging（物理内存与硬盘的虚拟内存交换数据），甚至造成 OutOfMemoryError。")]),t._v(" "),n("h3",{attrs:{id:"_26、抽象的-abstract-方法是否可同时是静态的-static-是否可同时是本地方法-native-是否可同时被-synchronized修饰"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_26、抽象的-abstract-方法是否可同时是静态的-static-是否可同时是本地方法-native-是否可同时被-synchronized修饰"}},[t._v("#")]),t._v(" 26、抽象的（abstract）方法是否可同时是静态的（static）,是否可同时是本地方法（native），是否可同时被 synchronized修饰？")]),t._v(" "),n("p",[t._v("都不能。抽象方法需要子类重写，而静态的方法是无法被重写的，因此二者是矛盾的。本地方法是由本地代码（如 C 代码）实现的方法，而抽象方法是没有实现的，也是矛盾的。synchronized 和方法的实现细节有关，抽象方法不涉及实现细节，因此也是相互矛盾的。")]),t._v(" "),n("h3",{attrs:{id:"_27、阐述静态变量和实例变量的区别。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_27、阐述静态变量和实例变量的区别。"}},[t._v("#")]),t._v(" 27、阐述静态变量和实例变量的区别。")]),t._v(" "),n("p",[t._v("静态变量是被 static 修饰符修饰的变量，也称为类变量，它属于类，不属于类的任何一个对象，一个类不管创建多少个对象，静态变量在内存中有且仅有一个拷贝；实例变量必须依存于某一实例，需要先创建对象然后通过对象才能访问到它。静态变量可以实现让多个对象共享内存。")]),t._v(" "),n("p",[t._v("补充：在 Java 开发中，上下文类和工具类中通常会有大量的静态成员。")]),t._v(" "),n("h3",{attrs:{id:"_28、是否可以从一个静态-static-方法内部发出对非静态-non-static-方法的调用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_28、是否可以从一个静态-static-方法内部发出对非静态-non-static-方法的调用"}},[t._v("#")]),t._v(" 28、是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用？")]),t._v(" "),n("p",[t._v("不可以，静态方法只能访问静态成员，因为非静态方法的调用要先创建对象，在调用静态方法时可能对象并没有被初始化。")]),t._v(" "),n("h3",{attrs:{id:"_29、如何实现对象克隆"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_29、如何实现对象克隆"}},[t._v("#")]),t._v(" 29、如何实现对象克隆？")]),t._v(" "),n("p",[t._v("有两种方式：")]),t._v(" "),n("p",[t._v("1). 实现 Cloneable 接口并重写 Object 类中的 clone()方法；")]),t._v(" "),n("p",[t._v("2). 实现 Serializable 接口，通过对象的序列化和反序列化实现克隆，可以实现真正的深度克隆，代码如下。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\npublic class MyUtil {\n\tprivate MyUtil() {\n\t\tthrow new AssertionError();\n\t}\n\t@SuppressWarnings("unchecked")\n\tpublic static <T extends Serializable> T clone(T obj) throws\n\tException {\n\t\tByteArrayOutputStream bout = new ByteArrayOutputStream();\n\t\tObjectOutputStream oos = new ObjectOutputStream(bout);\n\t\toos.writeObject(obj);\n\t\tByteArrayInputStream bin = new\n\t\tByteArrayInputStream(bout.toByteArray());\n\t\tObjectInputStream ois = new ObjectInputStream(bin);\n\t\treturn (T) ois.readObject();\n\t\t// 说明：调用 ByteArrayInputStream 或 ByteArrayOutputStream\n\t\t对象的 close 方法没有任何意义\n\t\t// 这两个基于内存的流只要垃圾回收器清理对象就能够释放资源，这\n\t\t一点不同于对外部资源（如文件流）的释放\n\t}\n}\n')])])]),n("p",[t._v("下面是测试代码：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import java.io.Serializable;\n/**\n* 人类\n* @author 骆昊\n*\n*/\nclass Person implements Serializable {\n\tprivate static final long serialVersionUID = -9102017020286042305L;\n\tprivate String name;\n\t// 姓名\n\tprivate int age;\n\t// 年龄\n\tprivate Car car;\n\t// 座驾\n\tpublic Person(String name, int age, Car car) {\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t\tthis.car = car;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic int getAge() {\n\t\treturn age;\n\t}\n\tpublic void setAge(int age) {\n\t\tthis.age = age;\n\t}\n\tpublic Car getCar() {\n\t\treturn car;\n\t}\n\tpublic void setCar(Car car) {\n\t\tthis.car = car;\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn "Person [name=" + name + ", age=" + age + ", car=" +\n\t\tcar + "]";\n\t}\n}\n/**\n* 小汽车类\n* @author 骆昊\n*\n*/\nclass Car implements Serializable {\n\tprivate static final long serialVersionUID = -5713945027627603702L;\n\tprivate String brand;\n\t// 品牌\n\tprivate int maxSpeed;\n\t// 最高时速\n\tpublic Car(String brand, int maxSpeed) {\n\t\tthis.brand = brand;\n\t\tthis.maxSpeed = maxSpeed;\n\t}\n\tpublic String getBrand() {\n\t\treturn brand;\n\t}\n\tpublic void setBrand(String brand) {\n\t\tthis.brand = brand;\n\t}\n\tpublic int getMaxSpeed() {\n\t\treturn maxSpeed;\n\t}\n\tpublic void setMaxSpeed(int maxSpeed) {\n\t\tthis.maxSpeed = maxSpeed;\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn "Car [brand=" + brand + ", maxSpeed=" + maxSpeed +\n\t\t"]";\n\t}\n}\nclass CloneTest {\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tPerson p1 = new Person("Hao LUO", 33, new Car("Benz",\n\t\t\t300));\n\t\t\tPerson p2 = MyUtil.clone(p1);\n\t\t\t// 深度克隆\n\t\t\tp2.getCar().setBrand("BYD");\n\t\t\t// 修改克隆的 Person 对象 p2 关联的汽车对象的品牌属性\n\t\t\t// 原来的 Person 对象 p1 关联的汽车不会受到任何影响\n\t\t\t// 因为在克隆 Person 对象时其关联的汽车对象也被克隆了\n\t\t\tSystem.out.println(p1);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n')])])]),n("p",[n("strong",[t._v("注意：")]),t._v(" 基于序列化和反序列化实现的克隆不仅仅是深度克隆，更重要的是通过泛型限定，可以检查出要克隆的对象是否支持序列化，这项检查是编译器完成的，不是在运行时抛出异常，这种是方案明显优于使用 Object 类的 clone 方法克隆对象。让问题在编译的时候暴露出来总是好过把问题留到运行时。")]),t._v(" "),n("h3",{attrs:{id:"_30、gc-是什么-为什么要有-gc"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_30、gc-是什么-为什么要有-gc"}},[t._v("#")]),t._v(" 30、GC 是什么？为什么要有 GC？")]),t._v(" "),n("p",[t._v("GC 是垃圾收集的意思，内存处理是编程人员容易出现问题的地方，忘记或者错误的内存回收会导致程序或系统的不稳定甚至崩溃，Java 提供的 GC 功能可以自动监测对象是否超过作用域从而达到自动回收内存的目的，Java 语言没有提供释放已分配内存的显示操作方法。Java 程序员不用担心内存管理，因为垃圾收集器会自动进行管理。要请求垃圾收集，可以调用下面的方法之一：System.gc() 或Runtime.getRuntime().gc() ，但 JVM 可以屏蔽掉显示的垃圾回收调用。垃圾回收可以有效的防止内存泄露，有效的使用可以使用的内存。垃圾回收器通常是作为一个单独的低优先级的线程运行，不可预知的情况下对内存堆中已经死亡的或者长时间没有使用的对象进行清除和回收，程序员不能实时的调用垃圾回收器对某个对象或所有对象进行垃圾回收。在 Java 诞生初期，垃圾回收是 Java最大的亮点之一，因为服务器端的编程需要有效的防止内存泄露问题，然而时过境迁，如今 Java 的垃圾回收机制已经成为被诟病的东西。移动智能终端用户通常觉得 iOS 的系统比 Android 系统有更好的用户体验，其中一个深层次的原因就在于 Android 系统中垃圾回收的不可预知性。")]),t._v(" "),n("p",[t._v("补充：垃圾回收机制有很多种，包括：分代复制垃圾回收、标记垃圾回收、增量垃圾回收等方式。标准的 Java 进程既有栈又有堆。栈保存了原始型局部变量，堆保存了要创建的对象。Java 平台对堆内存回收和再利用的基本算法被称为标记和清除，但是 Java 对其进行了改进，采用“分代式垃圾收集”。这种方法会跟 Java对象的生命周期将堆内存划分为不同的区域，在垃圾收集过程中，可能会将对象移动到不同区域：")]),t._v(" "),n("p",[t._v("（1）伊甸园（Eden）：这是对象最初诞生的区域，并且对大多数对象来说，这里是它们唯一存在过的区域。")]),t._v(" "),n("p",[t._v("（2）幸存者乐园（Survivor）：从伊甸园幸存下来的对象会被挪到这里。")]),t._v(" "),n("p",[t._v("（3）终身颐养园（Tenured）：这是足够老的幸存对象的归宿。年轻代收集（Minor-GC）过程是不会触及这个地方的。当年轻代收集不能把对象放进终身颐养园时，就会触发一次完全收集（Major-GC），这里可能还会牵扯到压缩，以便为大对象腾出足够的空间。")]),t._v(" "),n("p",[t._v("与垃圾回收相关的 JVM 参数：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("-Xms / -Xmx — 堆的初始大小 / 堆的最大大小\n -Xmn — 堆中年轻代的大小\n -XX:-DisableExplicitGC — 让 System.gc()不产生任何作用\n -XX:+PrintGCDetails — 打印 GC 的细节\n -XX:+PrintGCDateStamps — 打印 GC 操作的时间戳\n -XX:NewSize / XX:MaxNewSize — 设置新生代大小/新生代最大大小\n -XX:NewRatio — 可以设置老生代和新生代的比例\n -XX:PrintTenuringDistribution — 设置每次新生代 GC 后输出幸存者\n乐园中对象年龄的分布\n -XX:InitialTenuringThreshold / -XX:MaxTenuringThreshold：设置老\n年代阀值的初始值和最大值\n -XX:TargetSurvivorRatio：设置幸存区的目标使用率 \n")])])]),n("h3",{attrs:{id:"_31、string-s-new-string-xyz-创建了几个字符串对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_31、string-s-new-string-xyz-创建了几个字符串对象"}},[t._v("#")]),t._v(" 31、String s = new String(“xyz”);创建了几个字符串对象？")]),t._v(" "),n("p",[t._v("两个对象，一个是静态区的”xyz”，一个是用 new 创建在堆上的对象。")]),t._v(" "),n("h3",{attrs:{id:"_32、接口是否可继承-extends-接口-抽象类是否可实现-implements-接口-抽象类是否可继承具体类-concreteclass"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_32、接口是否可继承-extends-接口-抽象类是否可实现-implements-接口-抽象类是否可继承具体类-concreteclass"}},[t._v("#")]),t._v(" 32、接口是否可继承（extends）接口？抽象类是否可实现（implements）接口？抽象类是否可继承具体类（concreteclass）？")]),t._v(" "),n("p",[t._v("接口可以继承接口，而且支持多重继承。抽象类可以实现(implements)接口，抽象类可继承具体类也可以继承抽象类。")]),t._v(" "),n("h3",{attrs:{id:"_33、一个-java-源文件中是否可以包含多个类-不是内部类-有什么限制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_33、一个-java-源文件中是否可以包含多个类-不是内部类-有什么限制"}},[t._v("#")]),t._v(" 33、一个”.java”源文件中是否可以包含多个类（不是内部类）？有什么限制？")]),t._v(" "),n("p",[t._v("可以，但一个源文件中最多只能有一个公开类（public class）而且文件名必须和公开类的类名完全保持一致。")]),t._v(" "),n("h3",{attrs:{id:"_34、anonymous-inner-class-匿名内部类-是否可以继承其它类-是否可以实现接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_34、anonymous-inner-class-匿名内部类-是否可以继承其它类-是否可以实现接口"}},[t._v("#")]),t._v(" 34、Anonymous Inner Class(匿名内部类)是否可以继承其它类？是否可以实现接口？")]),t._v(" "),n("p",[t._v("可以继承其他类或实现其他接口，在 Swing 编程和 Android 开发中常用此方式来实现事件监听和回调。")]),t._v(" "),n("h3",{attrs:{id:"_35、内部类可以引用它的包含类-外部类-的成员吗-有没有什么限制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_35、内部类可以引用它的包含类-外部类-的成员吗-有没有什么限制"}},[t._v("#")]),t._v(" 35、内部类可以引用它的包含类（外部类）的成员吗？有没有什么限制？")]),t._v(" "),n("p",[t._v("一个内部类对象可以访问创建它的外部类对象的成员，包括私有成员。")]),t._v(" "),n("h3",{attrs:{id:"_36、java-中的-final-关键字有哪些用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_36、java-中的-final-关键字有哪些用法"}},[t._v("#")]),t._v(" 36、Java 中的 final 关键字有哪些用法？")]),t._v(" "),n("p",[t._v("(1)修饰类：表示该类不能被继承；")]),t._v(" "),n("p",[t._v("(2)修饰方法：表示方法不能被重写；")]),t._v(" "),n("p",[t._v("(3)修饰变量：表示变量只能一次赋值以后值不能被修改（常量）。")]),t._v(" "),n("h3",{attrs:{id:"_37、指出下面程序的运行结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_37、指出下面程序的运行结果"}},[t._v("#")]),t._v(" 37、指出下面程序的运行结果")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('class A {\n\tstatic {\n\t\tSystem.out.print("1");\n\t}\n\tpublic A() {\n\t\tSystem.out.print("2");\n\t}\n}\nclass B extends A{\n\tstatic {\n\t\tSystem.out.print("a");\n\t}\n\tpublic B() {\n\t\tSystem.out.print("b");\n\t}\n}\npublic class Hello {\n\tpublic static void main(String[] args) {\n\t\tA ab = new B();\n\t\tab = new B();\n\t}\n}\n\n')])])]),n("p",[n("strong",[t._v("执行结果：")]),t._v(" 1a2b2b。创建对象时构造器的调用顺序是：先初始化静态成员，然后调用父类构造器，再初始化非静态成员，最后调用自身构造器。")]),t._v(" "),n("p",[n("strong",[t._v("提示：")]),t._v(" 如果不能给出此题的正确答案，说明之前第 21 题 Java 类加载机制还没有完全理解，赶紧再看看吧。")]),t._v(" "),n("h3",{attrs:{id:"_38、数据类型之间的转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_38、数据类型之间的转换"}},[t._v("#")]),t._v(" 38、数据类型之间的转换：")]),t._v(" "),n("p",[t._v("（1） 如何将字符串转换为基本数据类型？")]),t._v(" "),n("p",[t._v("（2） 如何将基本数据类型转换为字符串？")]),t._v(" "),n("p",[t._v("答：")]),t._v(" "),n("p",[t._v("（1）调用基本数据类型对应的包装类中的方法 parseXXX(String)或valueOf(String)即可返回相应基本类型；")]),t._v(" "),n("p",[t._v("（2）一种方法是将基本数据类型与空字符串（”“）连接（+）即可获得其所对应的字符串；另一种方法是调用 String 类中的 valueOf()方法返回相应字符串")]),t._v(" "),n("h3",{attrs:{id:"_39、如何实现字符串的反转及替换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_39、如何实现字符串的反转及替换"}},[t._v("#")]),t._v(" 39、如何实现字符串的反转及替换？")]),t._v(" "),n("p",[t._v("方法很多，可以自己写实现也可以使用 String 或 StringBuffer/StringBuilder 中的方法。有一道很常见的面试题是用递归实现字符串反转，代码如下所示：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("public static String reverse(String originStr) {\n\tif(originStr == null || originStr.length() <= 1)\n\treturn originStr;\n\treturn reverse(originStr.substring(1)) + originStr.charAt(0);\n}\n")])])]),n("h3",{attrs:{id:"_40、怎样将-gb2312-编码的字符串转换为-iso-8859-1-编码的字符串"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_40、怎样将-gb2312-编码的字符串转换为-iso-8859-1-编码的字符串"}},[t._v("#")]),t._v(" 40、怎样将 GB2312 编码的字符串转换为 ISO-8859-1 编码的字符串？")]),t._v(" "),n("p",[t._v("代码如下所示：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('String s1 = "你好";\nString s2 = new String(s1.getBytes("GB2312"), "ISO-8859-1");\n')])])]),n("h3",{attrs:{id:"_41、日期和时间"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_41、日期和时间"}},[t._v("#")]),t._v(" 41、日期和时间：")]),t._v(" "),n("p",[t._v("（1）如何取得年月日、小时分钟秒？")]),t._v(" "),n("p",[t._v("（2） 如何取得从 1970 年 1 月 1 日 0 时 0 分 0 秒到现在的毫秒数？")]),t._v(" "),n("p",[t._v("（3） 如何取得某月的最后一天？")]),t._v(" "),n("p",[t._v("（4）如何格式化日期？")]),t._v(" "),n("p",[t._v("答：")]),t._v(" "),n("p",[n("strong",[t._v("问题 1：")]),t._v(" 创建 java.util.Calendar 实例，调用其 get()方法传入不同的参数即可获得参数所对应的值。Java 8 中可以使用 java.time.LocalDateTimel 来获取，代码如下所示。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("public class DateTimeTest {\n\tpublic static void main(String[] args) {\n\t\tCalendar cal = Calendar.getInstance();\n\t\tSystem.out.println(cal.get(Calendar.YEAR));\n\t\tSystem.out.println(cal.get(Calendar.MONTH));\n\t\t// 0 - 11\n\t\tSystem.out.println(cal.get(Calendar.DATE));\n\t\tSystem.out.println(cal.get(Calendar.HOUR_OF_DAY));\n\t\tSystem.out.println(cal.get(Calendar.MINUTE));\n\t\tSystem.out.println(cal.get(Calendar.SECOND));\n\t\t// Java 8\n\t\tLocalDateTime dt = LocalDateTime.now();\n\t\tSystem.out.println(dt.getYear());\n\t\tSystem.out.println(dt.getMonthValue());\n\t\t// 1 - 12\n\t\tSystem.out.println(dt.getDayOfMonth());\n\t\tSystem.out.println(dt.getHour());\n\t\tSystem.out.println(dt.getMinute());\n\t\tSystem.out.println(dt.getSecond());\n\t}\n}\n")])])]),n("p",[n("strong",[t._v("问题 2：")]),t._v(" 以下方法均可获得该毫秒数。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Calendar.getInstance().getTimeInMillis();\nSystem.currentTimeMillis();\nClock.systemDefaultZone().millis();\n// Java 8\n")])])]),n("p",[n("strong",[t._v("问题 3：")]),t._v(" 代码如下所示。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Calendar time = Calendar.getInstance();\ntime.getActualMaximum(Calendar.DAY_OF_MONTH\n")])])]),n("p",[n("strong",[t._v("问题 4：")]),t._v(" 利用 java.text.DataFormat 的子类（如 SimpleDateFormat 类）中的format(Date)方法可将日期格式化。Java 8 中可以用java.time.format.DateTimeFormatter 来格式化时间日期，代码如下所示。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import java.text.SimpleDateFormat;\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Date;\nclass DateFormatTest {\n\tpublic static void main(String[] args) {\n\t\tSimpleDateFormat oldFormatter = new\n\t\tSimpleDateFormat("yyyy/MM/dd");\n\t\tDate date1 = new Date();\n\t\tSystem.out.println(oldFormatter.format(date1));\n\t\t// Java 8\n\t\tDateTimeFormatter newFormatter =\n\t\tDateTimeFormatter.ofPattern("yyyy/MM/dd");\n\t\tLocalDate date2 = LocalDate.now();\n\t\tSystem.out.println(date2.format(newFormatter));\n\t}\n}\n')])])]),n("p",[n("strong",[t._v("补充：")]),t._v(" Java 的时间日期 API 一直以来都是被诟病的东西，为了解决这一问题，Java8 中引入了新的时间日期 API，其中包括 LocalDate、LocalTime、LocalDateTime、Clock、Instant 等类，这些的类的设计都使用了不变模式，因此是线程安全的设计。")]),t._v(" "),n("h3",{attrs:{id:"_42、打印昨天的当前时刻。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_42、打印昨天的当前时刻。"}},[t._v("#")]),t._v(" 42、打印昨天的当前时刻。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import java.util.Calendar;\nclass YesterdayCurrent {\n\tpublic static void main(String[] args){\n\t\tCalendar cal = Calendar.getInstance();\n\t\tcal.add(Calendar.DATE, -1);\n\t\tSystem.out.println(cal.getTime());\n\t}\n}\n")])])]),n("p",[t._v("在 Java 8 中，可以用下面的代码实现相同的功能。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import java.time.LocalDateTime;\nclass YesterdayCurrent {\n\tpublic static void main(String[] args) {\n\t\tLocalDateTime today = LocalDateTime.now();\n\t\tLocalDateTime yesterday = today.minusDays(1);\n\t\tSystem.out.println(yesterday);\n\t}\n}\n")])])]),n("h3",{attrs:{id:"_43、比较一下-java-和-javasciprt。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_43、比较一下-java-和-javasciprt。"}},[t._v("#")]),t._v(" 43、比较一下 Java 和 JavaSciprt。")]),t._v(" "),n("p",[t._v("JavaScript 与 Java 是两个公司开发的不同的两个产品。Java 是原 SunMicrosystems 公司推出的面向对象的程序设计语言，特别适合于互联网应用程序开发；而 JavaScript 是 Netscape 公司的产品，为了扩展 Netscape 浏览器的功能而开发的一种可以嵌入 Web 页面中运行的基于对象和事件驱动的解释性语言。JavaScript 的前身是 LiveScript；而 Java 的前身是 Oak 语言。")]),t._v(" "),n("p",[t._v("下面对两种语言间的异同作如下比较：")]),t._v(" "),n("p",[t._v("（1）基于对象和面向对象：Java 是一种真正的面向对象的语言，即使是开发简单的程序，必须设计对象；JavaScript 是种脚本语言，它可以用来制作与网络无关的，与用户交互作用的复杂软件。它是一种基于对象（Object-Based）和事件驱动（Event-Driven）的编程语言，因而它本身提供了非常丰富的内部对象供设计人员使用。")]),t._v(" "),n("p",[t._v("（2）解释和编译：Java 的源代码在执行之前，必须经过编译。JavaScript 是一种解释性编程语言，其源代码不需经过编译，由浏览器解释执行。（目前的浏览器几乎都使用了 JIT（即时编译）技术来提升 JavaScript 的运行效率）")]),t._v(" "),n("p",[t._v("（3）强类型变量和类型弱变量：Java 采用强类型变量检查，即所有变量在编译之前必须作声明；JavaScript 中变量是弱类型的，甚至在使用变量前可以不作声明，JavaScript 的解释器在运行时检查推断其数据类型。")]),t._v(" "),n("p",[t._v("（4）代码格式不一样。")]),t._v(" "),n("p",[t._v("补充：上面列出的四点是网上流传的所谓的标准答案。其实 Java 和 JavaScript最重要的区别是一个是静态语言，一个是动态语言。目前的编程语言的发展趋势是函数式语言和动态语言。在 Java 中类（class）是一等公民，而 JavaScript 中函数（function）是一等公民，因此 JavaScript 支持函数式编程，可以使用 Lambda函数和闭包（closure），当然 Java 8 也开始支持函数式编程，提供了对 Lambda表达式以及函数式接口的支持。对于这类问题，在面试的时候最好还是用自己的语言回答会更加靠谱，不要背网上所谓的标准答案。")]),t._v(" "),n("h3",{attrs:{id:"_44、什么时候用断言-assert"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_44、什么时候用断言-assert"}},[t._v("#")]),t._v(" 44、什么时候用断言（assert）？")]),t._v(" "),n("p",[t._v("断言在软件开发中是一种常用的调试方式，很多开发语言中都支持这种机制。一般来说，断言用于保证程序最基本、关键的正确性。断言检查通常在开发和测试时开启。为了保证程序的执行效率，在软件发布后断言检查通常是关闭的。断言是一个包含布尔表达式的语句，在执行这个语句时假定该表达式为 true；如果表达式的值为 false，那么系统会报告一个 AssertionError。断言的使用如下面的代码所示：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("assert(a > 0); // throws an AssertionError if a <= 0\n")])])]),n("p",[t._v("断言可以有两种形式：")]),t._v(" "),n("p",[t._v("assert Expression1;")]),t._v(" "),n("p",[t._v("assert Expression1 : Expression2 ;")]),t._v(" "),n("p",[t._v("Expression1 应该总是产生一个布尔值。")]),t._v(" "),n("p",[t._v("Expression2 可以是得出一个值的任意表达式；这个值用于生成显示更多调试信息的字符串消息。")]),t._v(" "),n("p",[t._v("要在运行时启用断言，可以在启动 JVM 时使用-enableassertions 或者-ea 标记。要在运行时选择禁用断言，可以在启动 JVM 时使用-da 或者-disableassertions标记。要在系统类中启用或禁用断言，可使用-esa 或-dsa 标记。还可以在包的基础上启用或者禁用断言。")]),t._v(" "),n("p",[t._v("注意：断言不应该以任何方式改变程序的状态。简单的说，如果希望在不满足某些条件时阻止代码的执行，就可以考虑用断言来阻止它。")]),t._v(" "),n("h3",{attrs:{id:"_45、error-和-exception-有什么区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_45、error-和-exception-有什么区别"}},[t._v("#")]),t._v(" 45、Error 和 Exception 有什么区别？")]),t._v(" "),n("p",[t._v("Error 表示系统级的错误和程序不必处理的异常，是恢复不是不可能但很困难的情况下的一种严重问题；比如内存溢出，不可能指望程序能处理这样的情况；")]),t._v(" "),n("p",[t._v("Exception 表示需要捕捉或者需要程序进行处理的异常，是一种设计或实现问题；也就是说，它表示如果程序运行正常，从不会发生的情况。")]),t._v(" "),n("h3",{attrs:{id:"_46、try-里有一个-return-语句-那么紧跟在这个-try-后的finally-里的代码会不会被执行-什么时候被执行-在-return前还是后"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_46、try-里有一个-return-语句-那么紧跟在这个-try-后的finally-里的代码会不会被执行-什么时候被执行-在-return前还是后"}},[t._v("#")]),t._v(" 46、try{}里有一个 return 语句，那么紧跟在这个 try 后的finally{}里的代码会不会被执行，什么时候被执行，在 return前还是后?")]),t._v(" "),n("p",[t._v("会执行，在方法返回调用者前执行。")]),t._v(" "),n("p",[n("strong",[t._v("注意：")]),t._v(" 在 finally 中改变返回值的做法是不好的，因为如果存在 finally 代码块，try中的 return 语句不会立马返回调用者，而是记录下返回值待 finally 代码块执行完毕之后再向调用者返回其值，然后如果在 finally 中修改了返回值，就会返回修改后的值。显然，在 finally 中返回或者修改返回值会对程序造成很大的困扰，C#中直接用编译错误的方式来阻止程序员干这种龌龊的事情，Java 中也可以通过提升编译器的语法检查级别来产生警告或错误，Eclipse 中可以在如图所示的地方进行设置，强烈建议将此项设置为编译错误。")]),t._v(" "),n("h3",{attrs:{id:"_47、java-语言如何进行异常处理-关键字-throws、throw、try、catch、finally-分别如何使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_47、java-语言如何进行异常处理-关键字-throws、throw、try、catch、finally-分别如何使用"}},[t._v("#")]),t._v(" 47、Java 语言如何进行异常处理，关键字：throws、throw、try、catch、finally 分别如何使用？")]),t._v(" "),n("p",[t._v("Java 通过面向对象的方法进行异常处理，把各种不同的异常进行分类，并提供了良好的接口。在 Java 中，每个异常都是一个对象，它是 Throwable 类或其子类的实例。当一个方法出现异常后便抛出一个异常对象，该对象中包含有异常信息，调用这个对象的方法可以捕获到这个异常并可以对其进行处理。Java 的异常处理是通过 5 个关键词来实现的：try、catch、throw、throws 和 finally。一般情况下是用 try 来执行一段程序，如果系统会抛出（throw）一个异常对象，可以通过它的类型来捕获（catch）它，或通过总是执行代码块（finally）来处理；try 用来指定一块预防所有异常的程序；catch 子句紧跟在 try 块后面，用来指定你想要捕获的异常的类型；throw 语句用来明确地抛出一个异常；throws 用来声明一个方法可能抛出的各种异常（当然声明异常时允许无病呻吟）；finally 为确保一段代码不管发生什么异常状况都要被执行；try 语句可以嵌套，每当遇到一个 try 语句，异常的结构就会被放入异常栈中，直到所有的 try 语句都完成。如果下一级的try 语句没有对某种异常进行处理，异常栈就会执行出栈操作，直到遇到有处理这种异常的 try 语句或者最终将异常抛给 JVM。")]),t._v(" "),n("h3",{attrs:{id:"_48、运行时异常与受检异常有何异同"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_48、运行时异常与受检异常有何异同"}},[t._v("#")]),t._v(" 48、运行时异常与受检异常有何异同？")]),t._v(" "),n("p",[t._v("异常表示程序运行过程中可能出现的非正常状态，运行时异常表示虚拟机的通常操作中可能遇到的异常，是一种常见运行错误，只要程序设计得没有问题通常就不会发生。受检异常跟程序运行的上下文环境有关，即使程序设计无误，仍然可能因使用的问题而引发。Java 编译器要求方法必须声明抛出可能发生的受检异常，但是并不要求必须声明抛出未被捕获的运行时异常。异常和继承一样，是面向对象程序设计中经常被滥用的东西，在 Effective Java 中对异常的使用给出了以下指导原则：")]),t._v(" "),n("p",[t._v("（1）不要将异常处理用于正常的控制流（设计良好的 API 不应该强迫它的调用者为了正常的控制流而使用异常）")]),t._v(" "),n("p",[t._v("（2）对可以恢复的情况使用受检异常，对编程错误使用运行时异常")]),t._v(" "),n("p",[t._v("（3）避免不必要的使用受检异常（可以通过一些状态检测手段来避免异常的发生）")]),t._v(" "),n("p",[t._v("（4）优先使用标准的异常")]),t._v(" "),n("p",[t._v("（5）每个方法抛出的异常都要有文档")]),t._v(" "),n("p",[t._v("（6）保持异常的原子性")]),t._v(" "),n("p",[t._v("（7）不要在 catch 中忽略掉捕获到的异常")]),t._v(" "),n("h3",{attrs:{id:"_49、列出一些你常见的运行时异常"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_49、列出一些你常见的运行时异常"}},[t._v("#")]),t._v(" 49、列出一些你常见的运行时异常？")]),t._v(" "),n("p",[t._v("（1）ArithmeticException（算术异常）")]),t._v(" "),n("p",[t._v("（2） ClassCastException （类转换异常）")]),t._v(" "),n("p",[t._v("（3） IllegalArgumentException （非法参数异常）")]),t._v(" "),n("p",[t._v("（4） IndexOutOfBoundsException （下标越界异常）")]),t._v(" "),n("p",[t._v("（5） NullPointerException （空指针异常）")]),t._v(" "),n("p",[t._v("（6） SecurityException （安全异常）")]),t._v(" "),n("h3",{attrs:{id:"_50、阐述-final、finally、finalize-的区别。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_50、阐述-final、finally、finalize-的区别。"}},[t._v("#")]),t._v(" 50、阐述 final、finally、finalize 的区别。")]),t._v(" "),n("p",[t._v("（1） final：修饰符（关键字）有三种用法：如果一个类被声明为 final，意味着它不能再派生出新的子类，即不能被继承，因此它和 abstract 是反义词。将变量声明为 final，可以保证它们在使用中不被改变，被声明为 final 的变量必须在声明时给定初值，而在以后的引用中只能读取不可修改。被声明为 final 的方法也同样只能使用，不能在子类中被重写。")]),t._v(" "),n("p",[t._v("（2）finally：通常放在 try…catch…的后面构造总是执行代码块，这就意味着程序无论正常执行还是发生异常，这里的代码只要 JVM 不关闭都能执行，可以将释放外部资源的代码写在 finally 块中.")]),t._v(" "),n("p",[t._v("（3）finalize：Object 类中定义的方法，Java 中允许使用 finalize()方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在销毁对象时调用的，通过重写 finalize()方法可以整理系统资源或者执行其他清理工作。")])])}),[],!1,null,null,null);a.default=r.exports}}]);