(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{483:function(e,t,a){"use strict";a.r(t);var r=a(30),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"web-综合开发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#web-综合开发"}},[e._v("#")]),e._v(" Web 综合开发")]),e._v(" "),a("h2",{attrs:{id:"web-开发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#web-开发"}},[e._v("#")]),e._v(" Web 开发")]),e._v(" "),a("p",[e._v("Spring Boot Web 开发非常的简单，其中包括常用的 json 输出、filters、property、log 等")]),e._v(" "),a("h3",{attrs:{id:"json-接口开发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#json-接口开发"}},[e._v("#")]),e._v(" json 接口开发")]),e._v(" "),a("p",[e._v("在以前使用 Spring 开发项目，需要提供 json 接口时需要做哪些配置呢")]),e._v(" "),a("blockquote",[a("ol",[a("li",[e._v("添加 jackjson 等相关 jar 包")]),e._v(" "),a("li",[e._v("配置 Spring Controller 扫描")]),e._v(" "),a("li",[e._v("对接的方法添加 @ResponseBody")])])]),e._v(" "),a("p",[e._v("就这样我们会经常由于配置错误，导致406错误等等，Spring Boot 如何做呢，只需要类添加 "),a("code",[e._v("@RestController")]),e._v(" 即可，默认类中的方法都会以 json 的格式返回")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@RestController\npublic class HelloController {\n    @RequestMapping("/getUser")\n    public User getUser() {\n    \tUser user=new User();\n    \tuser.setUserName("小明");\n    \tuser.setPassWord("xxxx");\n        return user;\n    }\n}\n')])])]),a("p",[e._v("如果需要使用页面开发只要使用"),a("code",[e._v("@Controller")]),e._v("注解即可，下面会结合模板来说明")]),e._v(" "),a("h3",{attrs:{id:"自定义-filter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义-filter"}},[e._v("#")]),e._v(" 自定义 Filter")]),e._v(" "),a("p",[e._v("我们常常在项目中会使用 filters 用于录调用日志、排除有 XSS 威胁的字符、执行权限验证等等。Spring Boot 自动添加了 OrderedCharacterEncodingFilter 和 HiddenHttpMethodFilter，并且我们可以自定义 Filter。")]),e._v(" "),a("p",[e._v("两个步骤：")]),e._v(" "),a("blockquote",[a("ol",[a("li",[e._v("实现 Filter 接口，实现 Filter 方法")]),e._v(" "),a("li",[e._v("添加"),a("code",[e._v("@Configuration")]),e._v(" 注解，将自定义Filter加入过滤链")])])]),e._v(" "),a("p",[e._v("好吧，直接上代码")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@Configuration\npublic class WebConfiguration {\n    @Bean\n    public RemoteIpFilter remoteIpFilter() {\n        return new RemoteIpFilter();\n    }\n    \n    @Bean\n    public FilterRegistrationBean testFilterRegistration() {\n\n        FilterRegistrationBean registration = new FilterRegistrationBean();\n        registration.setFilter(new MyFilter());\n        registration.addUrlPatterns("/*");\n        registration.addInitParameter("paramName", "paramValue");\n        registration.setName("MyFilter");\n        registration.setOrder(1);\n        return registration;\n    }\n    \n    public class MyFilter implements Filter {\n\t\t@Override\n\t\tpublic void destroy() {\n\t\t\t// TODO Auto-generated method stub\n\t\t}\n\n\t\t@Override\n\t\tpublic void doFilter(ServletRequest srequest, ServletResponse sresponse, FilterChain filterChain)\n\t\t\t\tthrows IOException, ServletException {\n\t\t\t// TODO Auto-generated method stub\n\t\t\tHttpServletRequest request = (HttpServletRequest) srequest;\n\t\t\tSystem.out.println("this is MyFilter,url :"+request.getRequestURI());\n\t\t\tfilterChain.doFilter(srequest, sresponse);\n\t\t}\n\n\t\t@Override\n\t\tpublic void init(FilterConfig arg0) throws ServletException {\n\t\t\t// TODO Auto-generated method stub\n\t\t}\n    }\n}\n')])])]),a("h3",{attrs:{id:"自定义-property"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义-property"}},[e._v("#")]),e._v(" 自定义 Property")]),e._v(" "),a("p",[e._v("在 Web 开发的过程中，我经常需要自定义一些配置文件，如何使用呢")]),e._v(" "),a("h3",{attrs:{id:"配置在-application-properties-中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置在-application-properties-中"}},[e._v("#")]),e._v(" 配置在 application.properties 中")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("com.neo.title=纯洁的微笑\ncom.neo.description=分享生活和技术\n")])])]),a("p",[e._v("自定义配置类")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@Component\npublic class NeoProperties {\n\t@Value("${com.neo.title}")\n\tprivate String title;\n\t@Value("${com.neo.description}")\n\tprivate String description;\n\n\t//省略getter settet方法\n\n\t}\n')])])]),a("h3",{attrs:{id:"log配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#log配置"}},[e._v("#")]),e._v(" log配置")]),e._v(" "),a("p",[e._v("配置输出的地址和输出级别")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("logging.path=/user/local/log\nlogging.level.com.favorites=DEBUG\nlogging.level.org.springframework.web=INFO\nlogging.level.org.hibernate=ERROR\n")])])]),a("p",[e._v("path 为本机的 log 地址，"),a("code",[e._v("logging.level")]),e._v(" 后面可以根据包路径配置不同资源的 log 级别")]),e._v(" "),a("h2",{attrs:{id:"数据库操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库操作"}},[e._v("#")]),e._v(" 数据库操作")]),e._v(" "),a("p",[e._v("在这里我重点讲述 Mysql、spring data jpa 的使用，其中 Mysql 就不用说了大家很熟悉。Jpa 是利用 Hibernate 生成各种自动化的 sql，如果只是简单的增删改查，基本上不用手写了，Spring 内部已经帮大家封装实现了。")]),e._v(" "),a("p",[e._v("下面简单介绍一下如何在 Spring Boot 中使用")]),e._v(" "),a("h3",{attrs:{id:"_1、添加相-jar-包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、添加相-jar-包"}},[e._v("#")]),e._v(" 1、添加相 jar 包")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency>\n <dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n</dependency>\n")])])]),a("h3",{attrs:{id:"_2、添加配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、添加配置文件"}},[e._v("#")]),e._v(" 2、添加配置文件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("spring.datasource.url=jdbc:mysql://localhost:3306/test\nspring.datasource.username=root\nspring.datasource.password=root\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n\nspring.jpa.properties.hibernate.hbm2ddl.auto=update\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect\nspring.jpa.show-sql= true\n")])])]),a("table",[a("thead",[a("tr",[a("th",[e._v("其实这个 hibernate.hbm2ddl.auto 参数的作用主要用于：自动创建")]),e._v(" "),a("th",[e._v("更新")]),e._v(" "),a("th",[e._v("验证数据库表结构,有四个值：")])])]),e._v(" "),a("tbody",[a("tr",[a("td"),e._v(" "),a("td"),e._v(" "),a("td")])])]),e._v(" "),a("blockquote",[a("ol",[a("li",[e._v("create： 每次加载 hibernate 时都会删除上一次的生成的表，然后根据你的 model 类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。")]),e._v(" "),a("li",[e._v("create-drop ：每次加载 hibernate 时根据 model 类生成表，但是 sessionFactory 一关闭,表就自动删除。")]),e._v(" "),a("li",[e._v("update：最常用的属性，第一次加载 hibernate 时根据 model 类会自动建立起表的结构（前提是先建立好数据库），以后加载 hibernate 时根据 model 类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等 应用第一次运行起来后才会。")]),e._v(" "),a("li",[e._v("validate ：每次加载 hibernate 时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。")])])]),e._v(" "),a("p",[a("code",[e._v("dialect")]),e._v(" 主要是指定生成表名的存储引擎为 InnoDBD\n"),a("code",[e._v("show-sql")]),e._v(" 是否打印出自动生成的 SQL，方便调试的时候查看")]),e._v(" "),a("h3",{attrs:{id:"_3、添加实体类和-dao"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、添加实体类和-dao"}},[e._v("#")]),e._v(" 3、添加实体类和 Dao")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("@Entity\npublic class User implements Serializable {\n\n\tprivate static final long serialVersionUID = 1L;\n\t@Id\n\t@GeneratedValue\n\tprivate Long id;\n\t@Column(nullable = false, unique = true)\n\tprivate String userName;\n\t@Column(nullable = false)\n\tprivate String passWord;\n\t@Column(nullable = false, unique = true)\n\tprivate String email;\n\t@Column(nullable = true, unique = true)\n\tprivate String nickName;\n\t@Column(nullable = false)\n\tprivate String regTime;\n\n\t//省略getter settet方法、构造方法\n\n}\n")])])]),a("p",[e._v("dao 只要继承 JpaRepository 类就可以，几乎可以不用写方法，还有一个特别有尿性的功能非常赞，就是可以根据方法名来自动的生成 SQL，比如"),a("code",[e._v("findByUserName")]),e._v(" 会自动生成一个以 "),a("code",[e._v("userName")]),e._v(" 为参数的查询方法，比如 "),a("code",[e._v("findAlll")]),e._v(" 自动会查询表里面的所有数据，比如自动分页等等。。")]),e._v(" "),a("p",[a("strong",[e._v("Entity 中不映射成列的字段得加 @Transient 注解，不加注解也会映射成列")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public interface UserRepository extends JpaRepository<User, Long> {\n    User findByUserName(String userName);\n    User findByUserNameOrEmail(String username, String email);\n}\n")])])]),a("h3",{attrs:{id:"_4、测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、测试"}},[e._v("#")]),e._v(" 4、测试")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(Application.class)\npublic class UserRepositoryTests {\n\n\t@Autowired\n\tprivate UserRepository userRepository;\n\n\t@Test\n\tpublic void test() throws Exception {\n\t\tDate date = new Date();\n\t\tDateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG);        \n\t\tString formattedDate = dateFormat.format(date);\n\t\t\n\t\tuserRepository.save(new User("aa1", "aa@126.com", "aa", "aa123456",formattedDate));\n\t\tuserRepository.save(new User("bb2", "bb@126.com", "bb", "bb123456",formattedDate));\n\t\tuserRepository.save(new User("cc3", "cc@126.com", "cc", "cc123456",formattedDate));\n\n\t\tAssert.assertEquals(9, userRepository.findAll().size());\n\t\tAssert.assertEquals("bb", userRepository.findByUserNameOrEmail("bb", "cc@126.com").getNickName());\n\t\tuserRepository.delete(userRepository.findByUserName("aa1"));\n\t}\n\n}\n')])])]),a("p",[e._v("当让 Spring Data Jpa 还有很多功能，比如封装好的分页，可以自己定义 SQL，主从分离等等，这里就不详细讲了")]),e._v(" "),a("h2",{attrs:{id:"thymeleaf-模板"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thymeleaf-模板"}},[e._v("#")]),e._v(" Thymeleaf 模板")]),e._v(" "),a("p",[e._v("Spring Boot 推荐使用 Thymeleaf 来代替 Jsp，Thymeleaf 模板到底是什么来头呢，让 Spring 大哥来推荐，下面我们来聊聊")]),e._v(" "),a("h3",{attrs:{id:"thymeleaf-介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thymeleaf-介绍"}},[e._v("#")]),e._v(" Thymeleaf 介绍")]),e._v(" "),a("p",[e._v("Thymeleaf 是一款用于渲染 XML/XHTML/HTML5 内容的模板引擎。类似 JSP，Velocity，FreeMaker 等，它也可以轻易的与 Spring MVC 等 Web 框架进行集成作为 Web 应用的模板引擎。与其它模板引擎相比，Thymeleaf 最大的特点是能够直接在浏览器中打开并正确显示模板页面，而不需要启动整个 Web 应用。")]),e._v(" "),a("p",[e._v("好了，你们说了我们已经习惯使用了什么 Velocity,FreMaker，beetle之类的模版，那么到底好在哪里呢？")]),e._v(" "),a("p",[e._v("比一比吧")]),e._v(" "),a("p",[e._v("Thymeleaf 是与众不同的，因为它使用了自然的模板技术。这意味着 Thymeleaf 的模板语法并不会破坏文档的结构，模板依旧是有效的XML文档。模板还可以用作工作原型，Thymeleaf 会在运行期替换掉静态值。Velocity 与 FreeMarke r则是连续的文本处理器。 下面的代码示例分别使用 Velocity、FreeMarker 与 Thymeleaf 打印出一条消息：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('Velocity: <p>$message</p>\nFreeMarker: <p>${message}</p>\nThymeleaf: <p th:text="${message}">Hello World!</p>\n')])])]),a("p",[a("strong",[e._v("注意，由于 Thymeleaf 使用了 XML DOM 解析器，因此它并不适合于处理大规模的 XML 文件。")])]),e._v(" "),a("h3",{attrs:{id:"url"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#url"}},[e._v("#")]),e._v(" URL")]),e._v(" "),a("p",[e._v("URL 在 Web 应用模板中占据着十分重要的地位，需要特别注意的是 Thymeleaf 对于 URL 的处理是通过语法 "),a("code",[e._v("@{...}")]),e._v(" 来处理的。Thymeleaf 支持绝对路径 URL：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<a th:href="@{http://www.thymeleaf.org}">Thymeleaf</a>\n')])])]),a("h3",{attrs:{id:"条件求值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#条件求值"}},[e._v("#")]),e._v(" 条件求值")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<a th:href="@{/login}" th:unless=${session.user != null}>Login</a>\n')])])]),a("h3",{attrs:{id:"for循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for循环"}},[e._v("#")]),e._v(" for循环")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<tr th:each="prod : ${prods}">\n      <td th:text="${prod.name}">Onions</td>\n      <td th:text="${prod.price}">2.41</td>\n      <td th:text="${prod.inStock}? #{true} : #{false}">yes</td>\n</tr>\n')])])]),a("p",[e._v("就列出这几个吧")]),e._v(" "),a("h3",{attrs:{id:"页面即原型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#页面即原型"}},[e._v("#")]),e._v(" 页面即原型")]),e._v(" "),a("p",[e._v("在 Web 开发过程中一个绕不开的话题就是前端工程师与后端工程师的协作，在传统 Java Web 开发过程中，前端工程师和后端工程师一样，也需要安装一套完整的开发环境，然后各类 Java IDE 中修改模板、静态资源文件，启动/重启/重新加载应用服务器，刷新页面查看最终效果。")]),e._v(" "),a("p",[e._v("但实际上前端工程师的职责更多应该关注于页面本身而非后端，使用 JSP，Velocity 等传统的 Java 模板引擎很难做到这一点，因为它们必须在应用服务器中渲染完成后才能在浏览器中看到结果，而 Thymeleaf 从根本上颠覆了这一过程，通过属性进行模板渲染不会引入任何新的浏览器不能识别的标签，例如 JSP 中的 ，不会在 Tag 内部写表达式。整个页面直接作为 HTML 文件用浏览器打开，几乎就可以看到最终的效果，这大大解放了前端工程师的生产力，它们的最终交付物就是纯的 HTML/CSS/JavaScript 文件。")]),e._v(" "),a("h2",{attrs:{id:"gradle-构建工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gradle-构建工具"}},[e._v("#")]),e._v(" Gradle 构建工具")]),e._v(" "),a("p",[e._v("Spring 项目建议使用 Maven/Gradle 进行构建项目，相比 Maven 来讲 Gradle 更简洁，而且 Gradle 更适合大型复杂项目的构建。Gradle 吸收了 Maven 和 Ant 的特点而来，不过目前 Maven 仍然是 Java 界的主流，大家可以先了解了解。")]),e._v(" "),a("p",[e._v("一个使用 Gradle 配置的项目")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("buildscript {\n    repositories {\n        maven { url \"http://repo.spring.io/libs-snapshot\" }\n        mavenLocal()\n    }\n    dependencies {\n        classpath(\"org.springframework.boot:spring-boot-gradle-plugin:1.3.6.RELEASE\")\n    }\n}\n\napply plugin: 'java'  //添加 Java 插件, 表明这是一个 Java 项目\napply plugin: 'spring-boot' //添加 Spring-boot支持\napply plugin: 'war'  //添加 War 插件, 可以导出 War 包\napply plugin: 'eclipse' //添加 Eclipse 插件, 添加 Eclipse IDE 支持, Intellij Idea 为 \"idea\"\n\nwar {\n    baseName = 'favorites'\n    version =  '0.1.0'\n}\n\nsourceCompatibility = 1.7  //最低兼容版本 JDK1.7\ntargetCompatibility = 1.7  //目标兼容版本 JDK1.7\n\nrepositories {     //  Maven 仓库\n    mavenLocal()        //使用本地仓库\n    mavenCentral()      //使用中央仓库\n    maven { url \"http://repo.spring.io/libs-snapshot\" } //使用远程仓库\n}\n \ndependencies {   // 各种 依赖的jar包\n    compile(\"org.springframework.boot:spring-boot-starter-web:1.3.6.RELEASE\")\n    compile(\"org.springframework.boot:spring-boot-starter-thymeleaf:1.3.6.RELEASE\")\n    compile(\"org.springframework.boot:spring-boot-starter-data-jpa:1.3.6.RELEASE\")\n    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.6'\n    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'\n    compile(\"org.springframework.boot:spring-boot-devtools:1.3.6.RELEASE\")\n    compile(\"org.springframework.boot:spring-boot-starter-test:1.3.6.RELEASE\")\n    compile 'org.webjars.bower:bootstrap:3.3.6'\n\tcompile 'org.webjars.bower:jquery:2.2.4'\n    compile(\"org.webjars:vue:1.0.24\")\n\tcompile 'org.webjars.bower:vue-resource:0.7.0'\n\n}\n\nbootRun {\n    addResources = true\n}\n")])])]),a("h2",{attrs:{id:"webjars"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webjars"}},[e._v("#")]),e._v(" WebJars")]),e._v(" "),a("p",[e._v("WebJars 是一个很神奇的东西，可以让大家以 Jar 包的形式来使用前端的各种框架、组件。")]),e._v(" "),a("h3",{attrs:{id:"什么是-webjars"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-webjars"}},[e._v("#")]),e._v(" 什么是 WebJars")]),e._v(" "),a("p",[e._v("WebJars 是将客户端（浏览器）资源（JavaScript，Css等）打成 Jar 包文件，以对资源进行统一依赖管理。WebJars 的 Jar 包部署在 Maven 中央仓库上。")]),e._v(" "),a("h3",{attrs:{id:"为什么使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用"}},[e._v("#")]),e._v(" 为什么使用")]),e._v(" "),a("p",[e._v("我们在开发 Java web 项目的时候会使用像 Maven，Gradle 等构建工具以实现对 Jar 包版本依赖管理，以及项目的自动化管理，但是对于 JavaScript，Css 等前端资源包，我们只能采用拷贝到 webapp 下的方式，这样做就无法对这些资源进行依赖管理。那么 WebJars 就提供给我们这些前端资源的 Jar 包形势，我们就可以进行依赖管理。")]),e._v(" "),a("h3",{attrs:{id:"如何使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何使用"}},[e._v("#")]),e._v(" 如何使用")]),e._v(" "),a("p",[e._v("1、 "),a("a",{attrs:{href:"http://www.webjars.org/bower",target:"_blank",rel:"noopener noreferrer"}},[e._v("WebJars主官网"),a("OutboundLink")],1),e._v(" 查找对于的组件，比如 Vuejs")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<dependency>\n    <groupId>org.webjars</groupId>\n    <artifactId>vue</artifactId>\n    <version>2.5.16</version>\n</dependency>\n")])])]),a("p",[e._v("2、页面引入")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<link th:href="@{/webjars/bootstrap/3.3.6/dist/css/bootstrap.css}" rel="stylesheet"></link>\n')])])])])}),[],!1,null,null,null);t.default=s.exports}}]);