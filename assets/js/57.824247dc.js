(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{484:function(e,t,a){"use strict";a.r(t);var s=a(30),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"如何优雅的使用-mybatis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何优雅的使用-mybatis"}},[e._v("#")]),e._v(" 如何优雅的使用 Mybatis")]),e._v(" "),a("p",[e._v("Orm 框架的本质是简化编程中操作数据库的编码，发展到现在基本上就剩两家了，一个是宣称可以不用写一句 Sql 的 Hibernate，一个是可以灵活调试动态 Sql 的 Mybatis ,两者各有特点，在企业级系统开发中可以根据需求灵活使用。发现一个有趣的现象：传统企业大都喜欢使用 Hibernate ,互联网行业通常使用 Mybatis 。")]),e._v(" "),a("p",[e._v("Mybatis 初期使用比较麻烦，需要各种配置文件、实体类、Dao 层映射关联、还有一大推其它配置。当然 Mybatis 也发现了这种弊端，初期开发了"),a("a",{attrs:{href:"https://github.com/mybatis/generator",target:"_blank",rel:"noopener noreferrer"}},[e._v("generator"),a("OutboundLink")],1),e._v("可以根据表结果自动生产实体类、配置文件和 Dao 层代码，可以减轻一部分开发量；后期也进行了大量的优化可以使用注解了，自动管理 Dao 层和配置文件等，发展到最顶端就是今天要讲的这种模式了，"),a("code",[e._v("mybatis-spring-boot-starter")]),e._v(" 就是 Spring Boot+ Mybatis 可以完全注解不用配置文件，也可以简单配置轻松上手。")]),e._v(" "),a("blockquote",[a("p",[e._v("现在想想 Spring Boot 就是牛逼呀，任何东西只要关联到 Spring Boot 都是化繁为简。")])]),e._v(" "),a("h2",{attrs:{id:"mybatis-spring-boot-starter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-spring-boot-starter"}},[e._v("#")]),e._v(" mybatis-spring-boot-starter")]),e._v(" "),a("p",[e._v("官方说明："),a("code",[e._v("MyBatis Spring-Boot-Starter will help you use MyBatis with Spring Boot")]),e._v("\n其实就是 Mybatis 看 Spring Boot 这么火热也开发出一套解决方案来凑凑热闹，但这一凑确实解决了很多问题，使用起来确实顺畅了许多。"),a("code",[e._v("mybatis-spring-boot-starter")]),e._v("主要有两种解决方案，一种是使用注解解决一切问题，一种是简化后的老传统。")]),e._v(" "),a("p",[e._v("当然任何模式都需要首先引入"),a("code",[e._v("mybatis-spring-boot-starter")]),e._v("的 Pom 文件，现在最新版本是 2.0.0")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<dependency>\n\t<groupId>org.mybatis.spring.boot</groupId>\n\t<artifactId>mybatis-spring-boot-starter</artifactId>\n\t<version>2.0.0</version>\n</dependency>\n")])])]),a("p",[e._v("好了下来分别介绍两种开发模式")]),e._v(" "),a("h2",{attrs:{id:"无配置文件注解版"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无配置文件注解版"}},[e._v("#")]),e._v(" 无配置文件注解版")]),e._v(" "),a("p",[e._v("就是一切使用注解搞定。")]),e._v(" "),a("h3",{attrs:{id:"_1-添加相关-maven-文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-添加相关-maven-文件"}},[e._v("#")]),e._v(" 1 添加相关 Maven 文件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<dependencies>\n\t<dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n\t<dependency>\n\t\t<groupId>org.mybatis.spring.boot</groupId>\n\t\t<artifactId>mybatis-spring-boot-starter</artifactId>\n\t\t<version>2.0.0</version>\n\t</dependency>\n     <dependency>\n        <groupId>mysql</groupId>\n        <artifactId>mysql-connector-java</artifactId>\n    </dependency>\n</dependencies>\n")])])]),a("p",[e._v("完整的 Pom 包这里就不贴了，大家直接看源码")]),e._v(" "),a("h3",{attrs:{id:"_2、application-properties-添加相关配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、application-properties-添加相关配置"}},[e._v("#")]),e._v(" 2、"),a("code",[e._v("application.properties")]),e._v(" 添加相关配置")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("mybatis.type-aliases-package=com.neo.model\n\nspring.datasource.url=jdbc:mysql://localhost:3306/test?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8&useSSL=true\nspring.datasource.username=root\nspring.datasource.password=root\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\n")])])]),a("p",[e._v("Spring Boot 会自动加载 "),a("code",[e._v("spring.datasource.*")]),e._v(" 相关配置，数据源就会自动注入到 sqlSessionFactory 中，sqlSessionFactory 会自动注入到 Mapper 中，对了，你一切都不用管了，直接拿起来使用就行了。")]),e._v(" "),a("p",[e._v("在启动类中添加对 mapper 包扫描"),a("code",[e._v("@MapperScan")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@SpringBootApplication\n@MapperScan("com.neo.mapper")\npublic class MybatisAnnotationApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(MybatisAnnotationApplication.class, args);\n\t}\n}\n')])])]),a("p",[e._v("或者直接在 Mapper 类上面添加注解"),a("code",[e._v("@Mapper")]),e._v("，建议使用上面那种，不然每个 mapper 加个注解也挺麻烦的")]),e._v(" "),a("h3",{attrs:{id:"_3、开发-mapper"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、开发-mapper"}},[e._v("#")]),e._v(" 3、开发 Mapper")]),e._v(" "),a("p",[e._v("第三步是最关键的一块， Sql 生产都在这里")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('public interface UserMapper {\n\t\n\t@Select("SELECT * FROM users")\n\t@Results({\n\t\t@Result(property = "userSex",  column = "user_sex", javaType = UserSexEnum.class),\n\t\t@Result(property = "nickName", column = "nick_name")\n\t})\n\tList<UserEntity> getAll();\n\t\n\t@Select("SELECT * FROM users WHERE id = #{id}")\n\t@Results({\n\t\t@Result(property = "userSex",  column = "user_sex", javaType = UserSexEnum.class),\n\t\t@Result(property = "nickName", column = "nick_name")\n\t})\n\tUserEntity getOne(Long id);\n\n\t@Insert("INSERT INTO users(userName,passWord,user_sex) VALUES(#{userName}, #{passWord}, #{userSex})")\n\tvoid insert(UserEntity user);\n\n\t@Update("UPDATE users SET userName=#{userName},nick_name=#{nickName} WHERE id =#{id}")\n\tvoid update(UserEntity user);\n\n\t@Delete("DELETE FROM users WHERE id =#{id}")\n\tvoid delete(Long id);\n\n}\n')])])]),a("p",[a("strong",[e._v("为了更接近生产我特地将 user_sex、nick_name 两个属性在数据库加了下划线和实体类属性名不一致，另外 user_sex 使用了枚举")])]),e._v(" "),a("blockquote",[a("ul",[a("li",[e._v("@Select 是查询类的注解，所有的查询均使用这个")]),e._v(" "),a("li",[e._v("@Result 修饰返回的结果集，关联实体类属性和数据库字段一一对应，如果实体类属性和数据库属性名保持一致，就不需要这个属性来修饰。")]),e._v(" "),a("li",[e._v("@Insert 插入数据库使用，直接传入实体类会自动解析属性到对应的值")]),e._v(" "),a("li",[e._v("@Update 负责修改，也可以直接传入对象")]),e._v(" "),a("li",[e._v("@delete 负责删除")])])]),e._v(" "),a("p",[a("a",{attrs:{href:"http://www.mybatis.org/mybatis-3/zh/java-api.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("了解更多属性参考这里"),a("OutboundLink")],1)]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("注意，使用#符号和$符号的不同：")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// This example creates a prepared statement, something like select * from teacher where name = ?;\n@Select("Select * from teacher where name = #{name}")\nTeacher selectTeachForGivenName(@Param("name") String name);\n\n// This example creates n inlined statement, something like select * from teacher where name = \'someName\';\n@Select("Select * from teacher where name = \'${name}\'")\nTeacher selectTeachForGivenName(@Param("name") String name);\n')])])]),a("h3",{attrs:{id:"_4、使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、使用"}},[e._v("#")]),e._v(" 4、使用")]),e._v(" "),a("p",[e._v("上面三步就基本完成了相关 Mapper 层开发，使用的时候当作普通的类注入进入就可以了")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class UserMapperTest {\n\n\t@Autowired\n\tprivate UserMapper userMapper;\n\n\t@Test\n\tpublic void testInsert() throws Exception {\n\t\tuserMapper.insert(new User("aa1", "a123456", UserSexEnum.MAN));\n\t\tuserMapper.insert(new User("bb1", "b123456", UserSexEnum.WOMAN));\n\t\tuserMapper.insert(new User("cc1", "b123456", UserSexEnum.WOMAN));\n\n\t\tAssert.assertEquals(3, userMapper.getAll().size());\n\t}\n\n\t@Test\n\tpublic void testQuery() throws Exception {\n\t\tList<User> users = userMapper.getAll();\n\t\tSystem.out.println(users.toString());\n\t}\n\t\n\t\n\t@Test\n\tpublic void testUpdate() throws Exception {\n\t\tUser user = userMapper.getOne(30l);\n\t\tSystem.out.println(user.toString());\n\t\tuser.setNickName("neo");\n\t\tuserMapper.update(user);\n\t\tAssert.assertTrue(("neo".equals(userMapper.getOne(30l).getNickName())));\n\t}\n}\n')])])]),a("p",[e._v("源码中 Controller 层有完整的增删改查，这里就不贴了")]),e._v(" "),a("h2",{attrs:{id:"极简-xml-版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#极简-xml-版本"}},[e._v("#")]),e._v(" 极简 xml 版本")]),e._v(" "),a("p",[e._v("极简 xml 版本保持映射文件的老传统，接口层只需要定义空方法，系统会自动根据方法名在映射文件中找对应的 Sql .")]),e._v(" "),a("h3",{attrs:{id:"_1、配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、配置"}},[e._v("#")]),e._v(" 1、配置")]),e._v(" "),a("p",[e._v("pom 文件和上个版本一样，只是"),a("code",[e._v("application.properties")]),e._v("新增以下配置")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("mybatis.config-location=classpath:mybatis/mybatis-config.xml\nmybatis.mapper-locations=classpath:mybatis/mapper/*.xml\n")])])]),a("p",[e._v("指定了 Mybatis 基础配置文件和实体类映射文件的地址")]),e._v(" "),a("p",[e._v("mybatis-config.xml 配置")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<configuration>\n\t<typeAliases>\n\t\t<typeAlias alias="Integer" type="java.lang.Integer" />\n\t\t<typeAlias alias="Long" type="java.lang.Long" />\n\t\t<typeAlias alias="HashMap" type="java.util.HashMap" />\n\t\t<typeAlias alias="LinkedHashMap" type="java.util.LinkedHashMap" />\n\t\t<typeAlias alias="ArrayList" type="java.util.ArrayList" />\n\t\t<typeAlias alias="LinkedList" type="java.util.LinkedList" />\n\t</typeAliases>\n</configuration>\n')])])]),a("p",[e._v("这里也可以添加一些 Mybatis 基础的配置")]),e._v(" "),a("h3",{attrs:{id:"_2、添加-user-的映射文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、添加-user-的映射文件"}},[e._v("#")]),e._v(" 2、添加 User 的映射文件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<mapper namespace="com.neo.mapper.UserMapper" >\n    <resultMap id="BaseResultMap" type="com.neo.entity.UserEntity" >\n        <id column="id" property="id" jdbcType="BIGINT" />\n        <result column="userName" property="userName" jdbcType="VARCHAR" />\n        <result column="passWord" property="passWord" jdbcType="VARCHAR" />\n        <result column="user_sex" property="userSex" javaType="com.neo.enums.UserSexEnum"/>\n        <result column="nick_name" property="nickName" jdbcType="VARCHAR" />\n    </resultMap>\n    \n    <sql id="Base_Column_List" >\n        id, userName, passWord, user_sex, nick_name\n    </sql>\n\n    <select id="getAll" resultMap="BaseResultMap"  >\n       SELECT \n       <include refid="Base_Column_List" />\n\t   FROM users\n    </select>\n\n    <select id="getOne" parameterType="java.lang.Long" resultMap="BaseResultMap" >\n        SELECT \n       <include refid="Base_Column_List" />\n\t   FROM users\n\t   WHERE id = #{id}\n    </select>\n\n    <insert id="insert" parameterType="com.neo.entity.UserEntity" >\n       INSERT INTO \n       \t\tusers\n       \t\t(userName,passWord,user_sex) \n       \tVALUES\n       \t\t(#{userName}, #{passWord}, #{userSex})\n    </insert>\n    \n    <update id="update" parameterType="com.neo.entity.UserEntity" >\n       UPDATE \n       \t\tusers \n       SET \n       \t<if test="userName != null">userName = #{userName},</if>\n       \t<if test="passWord != null">passWord = #{passWord},</if>\n       \tnick_name = #{nickName}\n       WHERE \n       \t\tid = #{id}\n    </update>\n    \n    <delete id="delete" parameterType="java.lang.Long" >\n       DELETE FROM\n       \t\t users \n       WHERE \n       \t\t id =#{id}\n    </delete>\n</mapper>\n')])])]),a("p",[e._v("其实就是把上个版本中 Mapper 的 Sql 搬到了这里的 xml 中了")]),e._v(" "),a("h3",{attrs:{id:"_3、编写-mapper-层的代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、编写-mapper-层的代码"}},[e._v("#")]),e._v(" 3、编写 Mapper 层的代码")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public interface UserMapper {\n\t\n\tList<UserEntity> getAll();\n\t\n\tUserEntity getOne(Long id);\n\n\tvoid insert(UserEntity user);\n\n\tvoid update(UserEntity user);\n\n\tvoid delete(Long id);\n\n}\n")])])]),a("p",[e._v("对比上一步，这里只需要定义接口方法")]),e._v(" "),a("h2",{attrs:{id:"如何选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何选择"}},[e._v("#")]),e._v(" 如何选择")]),e._v(" "),a("p",[e._v("两种模式各有特点，注解版适合简单快速的模式，其实像现在流行的这种微服务模式，一个微服务就会对应一个自已的数据库，多表连接查询的需求会大大的降低，会越来越适合这种模式。")]),e._v(" "),a("p",[e._v("老传统模式比适合大型项目，可以灵活的动态生成 Sql ，方便调整 Sql ，也有痛痛快快，洋洋洒洒的写 Sql 的感觉。")])])}),[],!1,null,null,null);t.default=r.exports}}]);