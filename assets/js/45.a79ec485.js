(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{474:function(e,o,t){"use strict";t.r(o);var n=t(30),s=Object(n.a)({},(function(){var e=this,o=e.$createElement,t=e._self._c||o;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"docker-compose-spring-boot-nginx-mysql-实践"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-spring-boot-nginx-mysql-实践"}},[e._v("#")]),e._v(" Docker Compose + Spring Boot + Nginx + Mysql 实践")]),e._v(" "),t("p",[e._v("Spring Boot + Nginx + Mysql 是实际工作中最常用的一个组合，最前端使用 Nginx 代理请求转发到后端 Spring Boot 内嵌的 Tomcat 服务，Mysql 负责业务中数据相关的交互，那么在没有 docker 之前，我们是如何来搞定这些环境的呢？")]),e._v(" "),t("ul",[t("li",[e._v("1、安装 Nginx，配置 Nginx 相关信息，重启。")]),e._v(" "),t("li",[e._v("2、安装 Mysql ，配置字符集时区等信息，重启，最后初始化脚本。")]),e._v(" "),t("li",[e._v("3、启动 Spring Boot 项目，整体进行联调测试。")])]),e._v(" "),t("p",[e._v("大家看我只写了三行，但其实搭建这些环境的时候还挺费事的，但这还不是结局，在用了一段时间时候需要迁移到另外一个环境，怎么办又需要重新搞一次？正常情况下，测试环境、SIT 环境、UAT 环境、生产环境！我们需要重复搭建四次。有人说不就是搭建四次吗？也没什么大不了的，那么我想告诉你，Too yong ,Too Simple 。")]),e._v(" "),t("p",[e._v("让我们看看以下几个因素：")]),e._v(" "),t("p",[e._v("第一，这只是一个最简单的案例，如果项目涉及到 MongoDB、Redis、ES … 一些列的环境呢？ 第二，如果你经常搭建环境或者调试程序，你就会知道什么是环境问题？有的时候明明是一模一样的配置，但是到了另外一个环境就是跑不起来。于是你花费很多时间来查找，最后才发现是少了一个参数或者逗号的问题，或者是系统内核版本不一致、或者你最后也没搞懂是为什么！只能再换另外一台服务器，那么使用 Docker 呢就可以完美的避开这些坑。")]),e._v(" "),t("p",[e._v("好了，废话不多说我们就开始吧！")]),e._v(" "),t("h2",{attrs:{id:"spring-boot-案例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-案例"}},[e._v("#")]),e._v(" Spring Boot 案例")]),e._v(" "),t("p",[e._v("首先我们先准备一个 Spring Boot 使用 Mysql 的小场景，我们做这样一个示例，使用 Spring Boot 做一个 Web 应用，提供一个按照 IP 地址统计访问次数的方法，每次请求时将统计数据存入 Mysql 并展示到页面中。")]),e._v(" "),t("h3",{attrs:{id:"配置信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置信息"}},[e._v("#")]),e._v(" 配置信息")]),e._v(" "),t("p",[t("strong",[e._v("依赖包")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<dependencies>\n     <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n\t<dependency>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>mysql</groupId>\n\t\t<artifactId>mysql-connector-java</artifactId>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t<scope>test</scope>\n\t</dependency>\n</dependencies>\n")])])]),t("p",[e._v("主要添加了 Spring Boot Web 支持，使用 Jpa 操作数据库、添加 Myql 驱动包等。")]),e._v(" "),t("p",[t("strong",[e._v("配置文件")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("spring.datasource.url=jdbc:mysql://localhost:3306/test\nspring.datasource.username=root\nspring.datasource.password=root\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n\nspring.jpa.properties.hibernate.hbm2ddl.auto=update\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect\nspring.jpa.show-sql=true\n")])])]),t("p",[e._v("配置了数据库的链接信息，以及 Jpa 更新表模式、方言和是否显示Sql")]),e._v(" "),t("h3",{attrs:{id:"核心代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#核心代码"}},[e._v("#")]),e._v(" 核心代码")]),e._v(" "),t("p",[e._v("核心代码很简单，每过来一个请求，判断是否已经统计过，如果没有统计新增数据，如果有统计数据更新数据。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('@RestController\npublic class VisitorController {\n\n    @Autowired\n    private VisitorRepository repository;\n\t\n    @RequestMapping("/")\n    public String index(HttpServletRequest request) {\n        String ip=request.getRemoteAddr();\n        Visitor visitor=repository.findByIp(ip);\n        if(visitor==null){\n            visitor=new Visitor();\n            visitor.setIp(ip);\n            visitor.setTimes(1);\n        }else {\n            visitor.setTimes(visitor.getTimes()+1);\n        }\n        repository.save(visitor);\n        return "I have been seen ip "+visitor.getIp()+" "+visitor.getTimes()+" times.";\n    }\n}\n')])])]),t("p",[e._v("实体类和 Repository 层代码比较简单，这里就不贴出来了，大家感兴趣可以下载源码查看。")]),e._v(" "),t("p",[e._v("以上内容都完成后，启动项目，访问："),t("code",[e._v("http://localhost:8080/")]),e._v(" 我们就可以看到这样的返回结果：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("I have been seen ip 0:0:0:0:0:0:0:1 1 times.\n")])])]),t("p",[e._v("再访问一次会变成")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("I have been seen ip 0:0:0:0:0:0:0:1 2 times.\n")])])]),t("p",[e._v("多次访问一直叠加，说明演示项目开发完成。")]),e._v(" "),t("h2",{attrs:{id:"docker-化改造"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-化改造"}},[e._v("#")]),e._v(" Docker 化改造")]),e._v(" "),t("p",[e._v("首先我们将目录改造成这样一个结构")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/wuyilong/picture-bed/raw/master/img/mulu.png",alt:"img"}})]),e._v(" "),t("p",[e._v("我们先从最外层说起：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("docker-compose.yaml")]),e._v("：docker-compose 的核心文件，描述如何构建整个服务")]),e._v(" "),t("li",[t("code",[e._v("nginx")]),e._v("：有关 nginx 的配置")]),e._v(" "),t("li",[t("code",[e._v("app")]),e._v("：Spring Boot 项目地址")])]),e._v(" "),t("p",[e._v("如果我们需要对 Mysql 有特殊的定制，也可以在最外层创建 mysql 文件夹，在此目录下进行配置。")]),e._v(" "),t("h3",{attrs:{id:"docker-compose-yaml-文件详解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-yaml-文件详解"}},[e._v("#")]),e._v(" "),t("code",[e._v("docker-compose.yaml")]),e._v(" 文件详解")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("version: '3'\nservices:\n  nginx:\n   container_name: v-nginx\n   image: nginx:1.13\n   restart: always\n   ports:\n   - 80:80\n   - 443:443\n   volumes:\n   - ./nginx/conf.d:/etc/nginx/conf.d\n    \n  mysql:\n   container_name: v-mysql\n   image: mysql/mysql-server:5.7\n   environment:\n    MYSQL_DATABASE: test\n    MYSQL_ROOT_PASSWORD: root\n    MYSQL_ROOT_HOST: '%'\n   ports:\n   - \"3306:3306\"\n   restart: always\n    \n  app:\n    restart: always\n    build: ./app\n    working_dir: /app\n    volumes:\n      - ./app:/app\n      - ~/.m2:/root/.m2\n    expose:\n      - \"8080\"\n    depends_on:\n      - nginx\n      - mysql\n    command: mvn clean spring-boot:run -Dspring-boot.run.profiles=docker\n")])])]),t("ul",[t("li",[t("code",[e._v("version: '3'")]),e._v("： 表示使用第三代语法来构建 docker-compose.yaml 文件。")]),e._v(" "),t("li",[t("code",[e._v("services")]),e._v(": 用来表示 compose 需要启动的服务，我们可以看出此文件中有三个服务分别为：nginx、mysql、app。")]),e._v(" "),t("li",[t("code",[e._v("container_name")]),e._v(": 容器名称")]),e._v(" "),t("li",[t("code",[e._v("environment")]),e._v(": 此节点下的信息会当作环境变量传入容器，此示例中 mysql 服务配置了数据库、密码和权限信息。")]),e._v(" "),t("li",[t("code",[e._v("ports")]),e._v(": 表示对外开放的端口")]),e._v(" "),t("li",[t("code",[e._v("restart: always")]),e._v(" 表示如果服务启动不成功会一直尝试。")]),e._v(" "),t("li",[t("code",[e._v("volumes")]),e._v(": 加载本地目录下的配置文件到容器目标地址下")]),e._v(" "),t("li",[t("code",[e._v("depends_on")]),e._v("：可以配置依赖服务，表示需要先启动 "),t("code",[e._v("depends_on")]),e._v(" 下面的服务后，再启动本服务。")]),e._v(" "),t("li",[t("code",[e._v("command: mvn clean spring-boot:run -Dspring-boot.run.profiles=docker")]),e._v(": 表示以这个命令来启动项目，"),t("code",[e._v("-Dspring-boot.run.profiles=docker")]),e._v("表示使用 "),t("code",[e._v("application-docker.properties")]),e._v("文件配置信息进行启动。")])]),e._v(" "),t("h3",{attrs:{id:"nginx-文件解读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nginx-文件解读"}},[e._v("#")]),e._v(" Nginx 文件解读")]),e._v(" "),t("p",[e._v("nginx 在目录下有一个文件 app.conf，主要配置了服务转发信息")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("server {\n    listen 80;\n    charset utf-8;\n    access_log off;\n\n    location / {\n        proxy_pass http://app:8080;\n        proxy_set_header Host $host:$server_port;\n        proxy_set_header X-Forwarded-Host $server_name;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n\n    location /static {\n        access_log   off;\n        expires      30d;\n\n        alias /app/static;\n    }\n}\n")])])]),t("p",[e._v("这块内容比较简单，配置请求转发，将80端口的请求转发到服务 app 的8080端口。其中"),t("code",[e._v("proxy_pass http://app:8080")]),e._v("这块的配置信息需要解释一下，这里使用是"),t("code",[e._v("app")]),e._v("而不是"),t("code",[e._v("localhost")]),e._v("，是因为他们没有在一个容器中，在一组 compose 的服务通讯需要使用 services 的名称进行访问。")]),e._v(" "),t("h3",{attrs:{id:"spring-boot-项目改造"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-项目改造"}},[e._v("#")]),e._v(" Spring Boot 项目改造")]),e._v(" "),t("p",[e._v("在"),t("code",[e._v("app")]),e._v("目录下也就是和"),t("code",[e._v("pom.xm")]),e._v("文件同级添加"),t("code",[e._v("Dockerfile")]),e._v("文件，文件内容如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("FROM maven:3.5-jdk-8\n")])])]),t("p",[e._v("只有一句，依赖于基础镜像"),t("code",[e._v("maven3.5")]),e._v("和"),t("code",[e._v("jdk 1.8")]),e._v("。因为在"),t("code",[e._v("docker-compose.yaml")]),e._v("文件设置了项目启动命令，这里不需要再添加启动命令。")]),e._v(" "),t("p",[e._v("在项目的"),t("code",[e._v("resources")]),e._v("目录下创建"),t("code",[e._v("application-dev.properties")]),e._v("和"),t("code",[e._v("application-docker.properties")]),e._v("文件")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("application-dev.properties")]),e._v(" 中的配置信息和上面一致")]),e._v(" "),t("li",[t("code",[e._v("application-docker.properties")]),e._v(" 中的配置信息做稍微的改造，将数据库的连接信息由"),t("code",[e._v("jdbc:mysql://localhost:3306/test")]),e._v("改为"),t("code",[e._v("jdbc:mysql://mysql:3306/test")]),e._v(" 。")])]),e._v(" "),t("p",[e._v("这样我们所有的配置都已经完成。")]),e._v(" "),t("h2",{attrs:{id:"部署"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#部署"}},[e._v("#")]),e._v(" 部署")]),e._v(" "),t("p",[e._v("我们将项目拷贝到服务器中进行测试，服务器需要先安装 Docker 和 Docker Compos 环境。")]),e._v(" "),t("p",[e._v("将项目拷贝到服务器中，进入目录"),t("code",[e._v("cd dockercompose-springboot-mysql-nginx")])]),e._v(" "),t("p",[t("strong",[e._v("启动服务："),t("code",[e._v("docker-compose up")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[root@VM_73_217_centos dockercompose-springboot-mysql-nginx]# docker-compose up\nCreating network \"dockercomposespringbootmysqlnginx_default\" with the default driver\nCreating v-nginx ... done\nCreating v-mysql ... done\nCreating dockercomposespringbootmysqlnginx_app_1 ... done\nAttaching to v-nginx, v-mysql, dockercomposespringbootmysqlnginx_app_1\nv-mysql  | [Entrypoint] MySQL Docker Image 5.7.21-1.1.4\nv-mysql  | [Entrypoint] Initializing database\napp_1    | [INFO] Scanning for projects...\n... \napp_1    | 2018-03-26 02:54:55.658  INFO 1 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''\napp_1    | 2018-03-26 02:54:55.660  INFO 1 --- [           main] com.neo.ComposeApplication               : Started ComposeApplication in 14.869 seconds (JVM running for 30.202)\n")])])]),t("p",[e._v("看到信息"),t("code",[e._v("Tomcat started on port(s): 8080")]),e._v("表示服务启动成功。也可以使用"),t("code",[e._v("docker-compose up -d")]),e._v("后台启动")]),e._v(" "),t("p",[e._v("访问服务器地址；"),t("code",[e._v("http://58.87.69.230/")]),e._v("，返回："),t("code",[e._v("I have been seen ip 172.19.0.2 1 times.")]),e._v(" 表示整体服务启动成功")]),e._v(" "),t("p",[t("strong",[e._v("使用"),t("code",[e._v("docker-compose ps")]),e._v("查看项目中目前的所有容器")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[root@VM_73_217_centos dockercompose-springboot-mysql-nginx]# docker-compose ps\n                 Name                                Command                  State                        Ports                  \n----------------------------------------------------------------------------------------------------------------------------------\ndockercomposespringbootmysqlnginx_app_1   /usr/local/bin/mvn-entrypo ...   Up             8080/tcp                                \nv-mysql                                   /entrypoint.sh mysqld            Up (healthy)   0.0.0.0:3306->3306/tcp, 33060/tcp       \nv-nginx                                   nginx -g daemon off;             Up             0.0.0.0:443->443/tcp, 0.0.0.0:80->80/tcp\n")])])]),t("p",[e._v("可以看到项目中服务的状态、命令、端口等信息。")]),e._v(" "),t("p",[t("strong",[e._v("关闭服务"),t("code",[e._v("docker-compose down")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[root@VM_73_217_centos dockercompose-springboot-mysql-nginx]# docker-compose down\nStopping dockercomposespringbootmysqlnginx_app_1 ... done\nStopping visitor-nginx                           ... done\nStopping visitor-mysql                           ... done\nRemoving dockercomposespringbootmysqlnginx_app_1 ... done\nRemoving visitor-nginx                           ... done\nRemoving visitor-mysql                           ... done\n")])])]),t("h3",{attrs:{id:"docker-compose-顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-顺序"}},[e._v("#")]),e._v(" docker-compose 顺序")]),e._v(" "),t("p",[e._v("在使用 docker-compose 启动的时候经常会出现项目报 Mysql 连接异常，跟踪了一天终于发现了问题。 docker-compose 虽然可以通过"),t("code",[e._v("depends_on")]),e._v(" 来定义服务启动的顺序，但是无法确定服务是否启动完成，因此会出现这样一个现象，Mysql 服务启动比较慢，当 Spring Boot 项目已经启动起来，但是 Mysql 还没有初始化好，这样当项目连接 Mysql 数据库的时候，就会出现连接数据库的异常。")]),e._v(" "),t("p",[e._v("针对这样的问题，有两种解决方案:")]),e._v(" "),t("p",[e._v("1、足够的容错和重试机制，比如连接数据库，在初次连接不上的时候，服务消费者可以不断重试，直到连接上服务。也就是在服务中定义： "),t("code",[e._v("restart: always")])]),e._v(" "),t("p",[e._v("2、同步等待，使用"),t("code",[e._v("wait-for-it.sh")]),e._v("或者其他"),t("code",[e._v("shell")]),e._v("脚本将当前服务启动阻塞，直到被依赖的服务加载完毕。这种方案后期可以尝试使用。")]),e._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),t("p",[e._v("没有对比就没有伤害，在没有使用 Docker 之前，我们需要搭建这样一个环境的话，需要安装 Nginx、Mysql ，再进行一系列的配置调试，还要担心各种环境问题；使用 Docker 之后简单两个命令就完成服务的上线、下线。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker-compose up\ndocker-compose down\n")])])]),t("p",[e._v("其实容器技术对部署运维的优化还有很多，这只是刚刚开始，后面使用了 Swarm 才会真正感受到它的便利和强大。")])])}),[],!1,null,null,null);o.default=s.exports}}]);