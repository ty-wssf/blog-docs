(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{493:function(t,e,a){"use strict";a.r(e);var s=a(30),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"thymeleaf-使用详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thymeleaf-使用详解"}},[t._v("#")]),t._v(" Thymeleaf 使用详解")]),t._v(" "),a("h2",{attrs:{id:"thymeleaf-介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thymeleaf-介绍"}},[t._v("#")]),t._v(" Thymeleaf 介绍")]),t._v(" "),a("p",[t._v("简单说，Thymeleaf 是一个跟 Velocity、FreeMarker 类似的模板引擎，它可以完全替代 JSP 。相较与其他的模板引擎，它有如下三个极吸引人的特点：")]),t._v(" "),a("ul",[a("li",[t._v("1.Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 Thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。")]),t._v(" "),a("li",[t._v("2.Thymeleaf 开箱即用的特性。它提供标准和 Spring 标准两种方言，可以直接套用模板实现 JSTL、 OGNL表达式效果，避免每天套模板、改 Jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。")]),t._v(" "),a("li",[t._v("3.Thymeleaf 提供 Spring 标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。")])]),t._v(" "),a("h2",{attrs:{id:"标准表达式语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标准表达式语法"}},[t._v("#")]),t._v(" 标准表达式语法")]),t._v(" "),a("p",[t._v("它们分为四类：")]),t._v(" "),a("ul",[a("li",[t._v("1.变量表达式")]),t._v(" "),a("li",[t._v("2.选择或星号表达式")]),t._v(" "),a("li",[t._v("3.文字国际化表达式")]),t._v(" "),a("li",[t._v("4.URL 表达式")])]),t._v(" "),a("h3",{attrs:{id:"变量表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量表达式"}},[t._v("#")]),t._v(" 变量表达式")]),t._v(" "),a("p",[t._v("变量表达式即 OGNL 表达式或 Spring EL 表达式(在 Spring 术语中也叫 model attributes)。如下所示：\n"),a("code",[t._v("${session.user.name}")])]),t._v(" "),a("p",[t._v("它们将以HTML标签的一个属性来表示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<span th:text="${book.author.name}">  \n<li th:each="book : ${books}">  \n')])])]),a("h3",{attrs:{id:"选择-星号-表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#选择-星号-表达式"}},[t._v("#")]),t._v(" 选择(星号)表达式")]),t._v(" "),a("p",[t._v("选择表达式很像变量表达式，不过它们用一个预先选择的对象来代替上下文变量容器(map)来执行，如下：\n"),a("code",[t._v("*{customer.name}")])]),t._v(" "),a("p",[t._v("被指定的 object 由 th:object 属性定义：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<div th:object="${book}">  \n  ...  \n  <span th:text="*{title}">...</span>  \n  ...  \n</div>  \n')])])]),a("h3",{attrs:{id:"文字国际化表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文字国际化表达式"}},[t._v("#")]),t._v(" 文字国际化表达式")]),t._v(" "),a("p",[t._v("文字国际化表达式允许我们从一个外部文件获取区域文字信息(.properties)，用 Key 索引 Value，还可以提供一组参数(可选).")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#{main.title}  \n#{message.entrycreated(${entryId})}  \n")])])]),a("p",[t._v("可以在模板文件中找到这样的表达式代码：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<table>  \n  ...  \n  <th th:text="#{header.address.city}">...</th>  \n  <th th:text="#{header.address.country}">...</th>  \n  ...  \n</table>  \n')])])]),a("h3",{attrs:{id:"url-表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#url-表达式"}},[t._v("#")]),t._v(" URL 表达式")]),t._v(" "),a("p",[t._v("URL 表达式指的是把一个有用的上下文或回话信息添加到 URL，这个过程经常被叫做 URL 重写。\n"),a("code",[t._v("@{/order/list}")])]),t._v(" "),a("p",[t._v("URL还可以设置参数：\n"),a("code",[t._v("@{/order/details(id=${orderId})}")])]),t._v(" "),a("p",[t._v("相对路径：\n"),a("code",[t._v("@{../documents/report}")])]),t._v(" "),a("p",[t._v("让我们看这些表达式：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<form th:action="@{/createOrder}">  \n<a href="main.html" th:href="@{/main}">\n')])])]),a("h3",{attrs:{id:"变量表达式和星号表达有什么区别吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量表达式和星号表达有什么区别吗"}},[t._v("#")]),t._v(" 变量表达式和星号表达有什么区别吗？")]),t._v(" "),a("p",[t._v("如果不考虑上下文的情况下，两者没有区别；星号语法评估在选定对象上表达，而不是整个上下文\n什么是选定对象？就是父标签的值，如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<div th:object="${session.user}">\n  <p>Name: <span th:text="*{firstName}">Sebastian</span>.</p>\n  <p>Surname: <span th:text="*{lastName}">Pepper</span>.</p>\n  <p>Nationality: <span th:text="*{nationality}">Saturn</span>.</p>\n</div>\n')])])]),a("p",[t._v("这是完全等价于：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<div th:object="${session.user}">\n  <p>Name: <span th:text="${session.user.firstName}">Sebastian</span>.</p>\n  <p>Surname: <span th:text="${session.user.lastName}">Pepper</span>.</p>\n  <p>Nationality: <span th:text="${session.user.nationality}">Saturn</span>.</p>\n</div>\n')])])]),a("p",[t._v("当然，美元符号和星号语法可以混合使用：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('  <div th:object="${session.user}">\n\t  <p>Name: <span th:text="*{firstName}">Sebastian</span>.</p>\n  \t  <p>Surname: <span th:text="${session.user.lastName}">Pepper</span>.</p>\n      <p>Nationality: <span th:text="*{nationality}">Saturn</span>.</p>\n  </div>\n')])])]),a("h3",{attrs:{id:"表达式支持的语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表达式支持的语法"}},[t._v("#")]),t._v(" 表达式支持的语法")]),t._v(" "),a("h4",{attrs:{id:"字面-literals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字面-literals"}},[t._v("#")]),t._v(" 字面（Literals）")]),t._v(" "),a("ul",[a("li",[t._v("文本文字（Text literals）: "),a("code",[t._v("'one text', 'Another one!',…")])]),t._v(" "),a("li",[t._v("数字文本（Number literals）: "),a("code",[t._v("0, 34, 3.0, 12.3,…")])]),t._v(" "),a("li",[t._v("布尔文本（Boolean literals）:"),a("code",[t._v("true, false")])]),t._v(" "),a("li",[t._v("空（Null literal）:"),a("code",[t._v("null")])]),t._v(" "),a("li",[t._v("文字标记（Literal tokens）:"),a("code",[t._v("one, sometext, main,…")])])]),t._v(" "),a("h4",{attrs:{id:"文本操作-text-operations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文本操作-text-operations"}},[t._v("#")]),t._v(" 文本操作（Text operations）")]),t._v(" "),a("ul",[a("li",[t._v("字符串连接(String concatenation):"),a("code",[t._v("+")])]),t._v(" "),a("li",[t._v("文本替换（Literal substitutions）:"),a("code",[t._v("|The name is ${name}|")])])]),t._v(" "),a("h4",{attrs:{id:"算术运算-arithmetic-operations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算术运算-arithmetic-operations"}},[t._v("#")]),t._v(" 算术运算（Arithmetic operations）")]),t._v(" "),a("ul",[a("li",[t._v("二元运算符（Binary operators）:"),a("code",[t._v("+, -, *, /, %")])]),t._v(" "),a("li",[t._v("减号（单目运算符）Minus sign (unary operator):"),a("code",[t._v("-")])])]),t._v(" "),a("h4",{attrs:{id:"布尔操作-boolean-operations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布尔操作-boolean-operations"}},[t._v("#")]),t._v(" 布尔操作（Boolean operations）")]),t._v(" "),a("ul",[a("li",[t._v("二元运算符（Binary operators）:"),a("code",[t._v("and, or")])]),t._v(" "),a("li",[t._v("布尔否定（一元运算符）Boolean negation (unary operator):"),a("code",[t._v("!, not")])])]),t._v(" "),a("h4",{attrs:{id:"比较和等价-comparisons-and-equality"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较和等价-comparisons-and-equality"}},[t._v("#")]),t._v(" 比较和等价(Comparisons and equality)")]),t._v(" "),a("ul",[a("li",[t._v("比较（Comparators）:"),a("code",[t._v(">, <, >=, <= (gt, lt, ge, le)")])]),t._v(" "),a("li",[t._v("等值运算符（Equality operators）:"),a("code",[t._v("==, != (eq, ne)")])])]),t._v(" "),a("h4",{attrs:{id:"条件运算符-conditional-operators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#条件运算符-conditional-operators"}},[t._v("#")]),t._v(" 条件运算符（Conditional operators）")]),t._v(" "),a("ul",[a("li",[t._v("If-then:"),a("code",[t._v("(if) ? (then)")])]),t._v(" "),a("li",[t._v("If-then-else:"),a("code",[t._v("(if) ? (then) : (else)")])]),t._v(" "),a("li",[t._v("Default: (value) ?:"),a("code",[t._v("(defaultvalue)")])])]),t._v(" "),a("p",[t._v("所有这些特征可以被组合并嵌套：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("'User is of type ' + (${user.isAdmin()} ? 'Administrator' : (${user.type} ?: 'Unknown'))\n")])])]),a("h2",{attrs:{id:"常用th标签都有那些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用th标签都有那些"}},[t._v("#")]),t._v(" 常用th标签都有那些？")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("关键字")]),t._v(" "),a("th",[t._v("功能介绍")]),t._v(" "),a("th",[t._v("案例")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("th:id")]),t._v(" "),a("td",[t._v("替换id")]),t._v(" "),a("td",[a("code",[t._v("<input th:id=\"'xxx' + ${collect.id}\"/>")])])]),t._v(" "),a("tr",[a("td",[t._v("th:text")]),t._v(" "),a("td",[t._v("文本替换")]),t._v(" "),a("td",[a("code",[t._v('<p th:text="${collect.description}">description</p>')])])]),t._v(" "),a("tr",[a("td",[t._v("th:utext")]),t._v(" "),a("td",[t._v("支持html的文本替换")]),t._v(" "),a("td",[a("code",[t._v('<p th:utext="${htmlcontent}">conten</p>')])])]),t._v(" "),a("tr",[a("td",[t._v("th:object")]),t._v(" "),a("td",[t._v("替换对象")]),t._v(" "),a("td",[a("code",[t._v('<div th:object="${session.user}">')])])]),t._v(" "),a("tr",[a("td",[t._v("th:value")]),t._v(" "),a("td",[t._v("属性赋值")]),t._v(" "),a("td",[a("code",[t._v('<input th:value="${user.name}" />')])])]),t._v(" "),a("tr",[a("td",[t._v("th:with")]),t._v(" "),a("td",[t._v("变量赋值运算")]),t._v(" "),a("td",[a("code",[t._v('<div th:with="isEven=${prodStat.count}%2==0"></div>')])])]),t._v(" "),a("tr",[a("td",[t._v("th:style")]),t._v(" "),a("td",[t._v("设置样式")]),t._v(" "),a("td",[a("code",[t._v("th:style=\"'display:' + @{(${sitrue} ? 'none' : 'inline-block')} + ''\"")])])]),t._v(" "),a("tr",[a("td",[t._v("th:onclick")]),t._v(" "),a("td",[t._v("点击事件")]),t._v(" "),a("td",[a("code",[t._v("th:onclick=\"'getCollect()'\"")])])]),t._v(" "),a("tr",[a("td",[t._v("th:each")]),t._v(" "),a("td",[t._v("属性赋值")]),t._v(" "),a("td",[a("code",[t._v('tr th:each="user,userStat:${users}">')])])]),t._v(" "),a("tr",[a("td",[t._v("th:if")]),t._v(" "),a("td",[t._v("判断条件")]),t._v(" "),a("td",[a("code",[t._v('<a th:if="${userId == collect.userId}" >')])])]),t._v(" "),a("tr",[a("td",[t._v("th:unless")]),t._v(" "),a("td",[t._v("和th:if判断相反")]),t._v(" "),a("td",[a("code",[t._v('<a th:href="@{/login}" th:unless=${session.user != null}>Login</a>')])])]),t._v(" "),a("tr",[a("td",[t._v("th:href")]),t._v(" "),a("td",[t._v("链接地址")]),t._v(" "),a("td",[a("code",[t._v('<a th:href="@{/login}" th:unless=${session.user != null}>Login</a> />')])])]),t._v(" "),a("tr",[a("td",[t._v("th:switch")]),t._v(" "),a("td",[t._v("多路选择 配合th:case 使用")]),t._v(" "),a("td",[a("code",[t._v('<div th:switch="${user.role}">')])])]),t._v(" "),a("tr",[a("td",[t._v("th:case")]),t._v(" "),a("td",[t._v("th:switch的一个分支")]),t._v(" "),a("td",[a("code",[t._v("<p th:case=\"'admin'\">User is an administrator</p>")])])]),t._v(" "),a("tr",[a("td",[t._v("th:fragment")]),t._v(" "),a("td",[t._v("布局标签，定义一个代码片段，方便其它地方引用")]),t._v(" "),a("td",[a("code",[t._v('<div th:fragment="alert">')])])]),t._v(" "),a("tr",[a("td",[t._v("th:include")]),t._v(" "),a("td",[t._v("布局标签，替换内容到引入的文件")]),t._v(" "),a("td",[a("code",[t._v('<head th:include="layout :: htmlhead" th:with="title=\'xx\'"></head> />')])])]),t._v(" "),a("tr",[a("td",[t._v("th:replace")]),t._v(" "),a("td",[t._v("布局标签，替换整个标签到引入的文件")]),t._v(" "),a("td",[a("code",[t._v('<div th:replace="fragments/header :: title"></div>')])])]),t._v(" "),a("tr",[a("td",[t._v("th:selected")]),t._v(" "),a("td",[t._v("selected选择框 选中")]),t._v(" "),a("td",[a("code",[t._v('th:selected="(${xxx.id} == ${configObj.dd})"')])])]),t._v(" "),a("tr",[a("td",[t._v("th:src")]),t._v(" "),a("td",[t._v("图片类地址引入")]),t._v(" "),a("td",[a("code",[t._v('<img class="img-responsive" alt="App Logo" th:src="@{/img/logo.png}" />')])])]),t._v(" "),a("tr",[a("td",[t._v("th:inline")]),t._v(" "),a("td",[t._v("定义js脚本可以使用变量")]),t._v(" "),a("td",[a("code",[t._v('<script type="text/javascript" th:inline="javascript">')])])]),t._v(" "),a("tr",[a("td",[t._v("th:action")]),t._v(" "),a("td",[t._v("表单提交的地址")]),t._v(" "),a("td",[a("code",[t._v('<form action="subscribe.html" th:action="@{/subscribe}">')])])]),t._v(" "),a("tr",[a("td",[t._v("th:remove")]),t._v(" "),a("td",[t._v("删除某个属性")]),t._v(" "),a("td",[a("code",[t._v('<tr th:remove="all"> 1.all:删除包含标签和所有的孩子。2.body:不包含标记删除,但删除其所有的孩子。3.tag:包含标记的删除,但不删除它的孩子。4.all-but-first:删除所有包含标签的孩子,除了第一个。5.none:什么也不做。这个值是有用的动态评估。')])])]),t._v(" "),a("tr",[a("td",[t._v("th:attr")]),t._v(" "),a("td",[t._v("设置标签属性，多个属性可以用逗号分隔")]),t._v(" "),a("td",[t._v("比如"),a("code",[t._v('th:attr="src=@{/image/aa.jpg},title=#{logo}"')]),t._v("，此标签不太优雅，一般用的比较少。")])])])]),t._v(" "),a("p",[t._v("还有非常多的标签，这里只列出最常用的几个,由于一个标签内可以包含多个th:x属性，其生效的优先级顺序为: "),a("code",[t._v("include,each,if/unless/switch/case,with,attr/attrprepend/attrappend,value/href,src ,etc,text/utext,fragment,remove。")])]),t._v(" "),a("h2",{attrs:{id:"几种常用的使用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#几种常用的使用方法"}},[t._v("#")]),t._v(" 几种常用的使用方法")]),t._v(" "),a("h3",{attrs:{id:"_1、赋值、字符串拼接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、赋值、字符串拼接"}},[t._v("#")]),t._v(" 1、赋值、字符串拼接")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<p  th:text=\"${collect.description}\">description</p>\n<span th:text=\"'Welcome to our application, ' + ${user.name} + '!'\">\n")])])]),a("p",[t._v("字符串拼接还有另外一种简洁的写法")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<span th:text="|Welcome to our application, ${user.name}!|">\n')])])]),a("h3",{attrs:{id:"_2、条件判断-if-unless"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、条件判断-if-unless"}},[t._v("#")]),t._v(" 2、条件判断 If/Unless")]),t._v(" "),a("p",[t._v("Thymeleaf中使用th:if和th:unless属性进行条件判断，下面的例子中，"),a("code",[t._v("<a>")]),t._v("标签只有在"),a("code",[t._v("th:if")]),t._v("中条件成立时才显示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<a th:if="${myself==\'yes\'}" > </i> </a>\n<a th:unless=${session.user != null} th:href="@{/login}" >Login</a>\n')])])]),a("p",[a("code",[t._v("th:unless")]),t._v(" 于 "),a("code",[t._v("th:if")]),t._v(" 恰好相反，只有表达式中的条件不成立，才会显示其内容。")]),t._v(" "),a("p",[t._v("也可以使用 "),a("code",[t._v("(if) ? (then) : (else)")]),t._v("这种语法来判断显示的内容")]),t._v(" "),a("h3",{attrs:{id:"_3、for-循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、for-循环"}},[t._v("#")]),t._v(" 3、for 循环")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<tr  th:each="collect,iterStat : ${collects}"> \n   <th scope="row" th:text="${collect.id}">1</th>\n   <td >\n      <img th:src="${collect.webLogo}"/>\n   </td>\n   <td th:text="${collect.url}">Mark</td>\n   <td th:text="${collect.title}">Otto</td>\n   <td th:text="${collect.description}">@mdo</td>\n   <td th:text="${terStat.index}">index</td>\n</tr>\n')])])]),a("p",[t._v("iterStat称作状态变量，属性有：")]),t._v(" "),a("ul",[a("li",[t._v("index:当前迭代对象的 index（从0开始计算）")]),t._v(" "),a("li",[t._v("count: 当前迭代对象的 index(从1开始计算)")]),t._v(" "),a("li",[t._v("size:被迭代对象的大小")]),t._v(" "),a("li",[t._v("current:当前迭代变量")]),t._v(" "),a("li",[t._v("even/odd:布尔值，当前循环是否是偶数/奇数（从0开始计算）")]),t._v(" "),a("li",[t._v("first:布尔值，当前循环是否是第一个")]),t._v(" "),a("li",[t._v("last:布尔值，当前循环是否是最后一个")])]),t._v(" "),a("h3",{attrs:{id:"_4、url"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、url"}},[t._v("#")]),t._v(" 4、URL")]),t._v(" "),a("p",[t._v("URL 在 Web 应用模板中占据着十分重要的地位，需要特别注意的是 Thymeleaf 对于 URL 的处理是通过语法 "),a("code",[t._v("@{...}")]),t._v(" 来处理的。 如果需要 Thymeleaf 对 URL 进行渲染，那么务必使用 "),a("code",[t._v("th:href")]),t._v("，"),a("code",[t._v("th:src")]),t._v(" 等属性，下面是一个例子")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\x3c!-- Will produce \'http://localhost:8080/standard/unread\' (plus rewriting) --\x3e\n <a  th:href="@{/standard/{type}(type=${type})}">view</a>\n\n\x3c!-- Will produce \'/gtvg/order/3/details\' (plus rewriting) --\x3e\n<a href="details.html" th:href="@{/order/{orderId}/details(orderId=${o.id})}">view</a>\n')])])]),a("p",[t._v("设置背景")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<div th:style=\"'background:url(' + @{/<path-to-image>} + ');'\"></div>\n")])])]),a("p",[t._v("根据属性值改变背景")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" <div class=\"media-object resource-card-image\"  th:style=\"'background:url(' + @{(${collect.webLogo}=='' ? 'img/favicon.png' : ${collect.webLogo})} + ')'\" ></div>\n")])])]),a("p",[t._v("几点说明：")]),t._v(" "),a("ul",[a("li",[t._v("上例中 URL 最后的"),a("code",[t._v("(orderId=${o.id})")]),t._v("表示将括号内的内容作为 URL 参数处理，该语法避免使用字符串拼接，大大提高了可读性")]),t._v(" "),a("li",[a("code",[t._v("@{...}")]),t._v("表达式中可以通过"),a("code",[t._v("{orderId}")]),t._v("访问 Context 中的 orderId 变量")]),t._v(" "),a("li",[a("code",[t._v("@{/order}")]),t._v("是 Context 相关的相对路径，在渲染时会自动添加上当前 Web 应用的 Context 名字，假设 context 名字为 app，那么结果应该是 "),a("code",[t._v("/app/order")])])]),t._v(" "),a("h3",{attrs:{id:"_5、内联-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、内联-js"}},[t._v("#")]),t._v(" 5、内联 js")]),t._v(" "),a("p",[t._v("内联文本：[[…]] 内联文本的表示方式，使用时，必须先用"),a("code",[t._v('th:inline="text/javascript/none"')]),t._v("激活，"),a("code",[t._v("th:inline")]),t._v("可以在父级标签内使用，甚至作为 body 的标签。内联文本尽管比"),a("code",[t._v("th:text")]),t._v("的代码少，不利于原型显示。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<script th:inline=\"javascript\">\n/*<![CDATA[*/\n...\nvar username = /*[[${sesion.user.name}]]*/ 'Sebastian';\nvar size = /*[[${size}]]*/ 0;\n...\n/*]]>*/\n<\/script>\n")])])]),a("p",[t._v("js 附加代码：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("/*[+\nvar msg = 'This is a working application';\n+]*/\n")])])]),a("p",[t._v("js 移除代码：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("/*[- */\nvar msg = 'This is a non-working template';\n/* -]*/\n")])])]),a("h3",{attrs:{id:"_6、内嵌变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、内嵌变量"}},[t._v("#")]),t._v(" 6、内嵌变量")]),t._v(" "),a("p",[t._v("为了模板更加易用，Thymeleaf 还提供了一系列 Utility 对象（内置于 Context 中），可以通过 # 直接访问：")]),t._v(" "),a("ul",[a("li",[t._v("dates ： "),a("em",[t._v("java.util.Date的功能方法类。")])]),t._v(" "),a("li",[t._v("calendars : "),a("em",[t._v("类似#dates，面向java.util.Calendar")])]),t._v(" "),a("li",[t._v("numbers : "),a("em",[t._v("格式化数字的功能方法类")])]),t._v(" "),a("li",[t._v("strings : "),a("em",[t._v("字符串对象的功能类，contains,startWiths,prepending/appending等等。")])]),t._v(" "),a("li",[t._v("objects: "),a("em",[t._v("对objects的功能类操作。")])]),t._v(" "),a("li",[t._v("bools: "),a("em",[t._v("对布尔值求值的功能方法。")])]),t._v(" "),a("li",[t._v("arrays："),a("em",[t._v("对数组的功能类方法。")])]),t._v(" "),a("li",[t._v("lists: "),a("em",[t._v("对lists功能类方法")])]),t._v(" "),a("li",[t._v("sets")]),t._v(" "),a("li",[t._v("maps\n…")])]),t._v(" "),a("p",[t._v("下面用一段代码来举例一些常用的方法：")]),t._v(" "),a("h4",{attrs:{id:"dates"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dates"}},[t._v("#")]),t._v(" dates")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("/*\n * Format date with the specified pattern\n * Also works with arrays, lists or sets\n */\n${#dates.format(date, 'dd/MMM/yyyy HH:mm')}\n${#dates.arrayFormat(datesArray, 'dd/MMM/yyyy HH:mm')}\n${#dates.listFormat(datesList, 'dd/MMM/yyyy HH:mm')}\n${#dates.setFormat(datesSet, 'dd/MMM/yyyy HH:mm')}\n\n/*\n * Create a date (java.util.Date) object for the current date and time\n */\n${#dates.createNow()}\n\n/*\n * Create a date (java.util.Date) object for the current date (time set to 00:00)\n */\n${#dates.createToday()}\n")])])]),a("h4",{attrs:{id:"strings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#strings"}},[t._v("#")]),t._v(" strings")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("/*\n * Check whether a String is empty (or null). Performs a trim() operation before check\n * Also works with arrays, lists or sets\n */\n${#strings.isEmpty(name)}\n${#strings.arrayIsEmpty(nameArr)}\n${#strings.listIsEmpty(nameList)}\n${#strings.setIsEmpty(nameSet)}\n\n/*\n * Check whether a String starts or ends with a fragment\n * Also works with arrays, lists or sets\n */\n${#strings.startsWith(name,'Don')}                  // also array*, list* and set*\n${#strings.endsWith(name,endingFragment)}           // also array*, list* and set*\n\n/*\n * Compute length\n * Also works with arrays, lists or sets\n */\n${#strings.length(str)}\n\n/*\n * Null-safe comparison and concatenation\n */\n${#strings.equals(str)}\n${#strings.equalsIgnoreCase(str)}\n${#strings.concat(str)}\n${#strings.concatReplaceNulls(str)}\n\n/*\n * Random\n */\n${#strings.randomAlphanumeric(count)}\n")])])]),a("h2",{attrs:{id:"使用-thymeleaf-布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-thymeleaf-布局"}},[t._v("#")]),t._v(" 使用 Thymeleaf 布局")]),t._v(" "),a("p",[t._v("Spring Boot 2.0 将布局单独提取了出来，需要单独引入依赖：thymeleaf-layout-dialect。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n<dependency>\n    <groupId>nz.net.ultraq.thymeleaf</groupId>\n    <artifactId>thymeleaf-layout-dialect</artifactId>\n</dependency>\n")])])]),a("p",[t._v("定义代码片段")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<footer th:fragment="copy"> \n&copy; 2019\n</footer>\n')])])]),a("p",[t._v("在页面任何地方引入：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<body>\n    <div th:insert="layout/copyright :: copyright"></div>\n    <div th:replace="layout/copyright :: copyright"></div>\n</body>\n')])])]),a("p",[t._v("th:insert 和 th:replace 区别，insert 只是加载，replace 是替换。Thymeleaf 3.0 推荐使用 th:insert 替换 2.0 的 th:replace。")]),t._v(" "),a("p",[t._v("返回的 HTML 如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<body> \n   <div> &copy; 2019 </div> \n  <footer>&copy; 2019 </footer> \n</body>\n")])])]),a("p",[t._v("下面是一个常用的后台页面布局，将整个页面分为头部，尾部、菜单栏、隐藏栏，点击菜单只改变 content 区域的页面")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<body class="layout-fixed">\n  <div th:fragment="navbar"  class="wrapper"  role="navigation">\n\t<div th:replace="fragments/header :: header">Header</div>\n\t<div th:replace="fragments/left :: left">left</div>\n\t<div th:replace="fragments/sidebar :: sidebar">sidebar</div>\n\t<div layout:fragment="content" id="content" ></div>\n\t<div th:replace="fragments/footer :: footer">footer</div>\n  </div>\n</body>\n')])])]),a("p",[t._v("任何页面想使用这样的布局值只需要替换中见的 content 模块即可")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<html xmlns:th="http://www.thymeleaf.org" layout:decorator="layout">\n <body>\n    <section layout:fragment="content">\n  ...\n')])])]),a("p",[t._v("也可以在引用模版的时候传参")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<head th:include="layout :: htmlhead" th:with="title=\'Hello\'"></head>\n')])])]),a("p",[t._v("layout 是文件地址，如果有文件夹可以这样写"),a("code",[t._v("fileName/layout:htmlhead")]),t._v("，htmlhead 是指定义的代码片段 如"),a("code",[t._v('th:fragment="copy"')])])])}),[],!1,null,null,null);e.default=r.exports}}]);