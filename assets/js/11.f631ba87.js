(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{439:function(e,o,s){"use strict";s.r(o);var t=s(30),r=Object(t.a)({},(function(){var e=this,o=e.$createElement,s=e._self._c||o;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"docker-三剑客之-docker-compose"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-三剑客之-docker-compose"}},[e._v("#")]),e._v(" Docker 三剑客之 Docker Compose")]),e._v(" "),s("p",[e._v("Docker-Compose 是 Docker 的一种编排服务，是一个用于在 Docker 上定义并运行复杂应用的工具，可以让用户在集群中部署分布式应用。")]),e._v(" "),s("p",[e._v("我们知道使用一个 Dockerfile 模板文件可以定义一个单独的应用容器，如果需要定义多个容器就需要服务编排。服务编排有很多种技术方案，今天给大家介绍 Docker 官方产品 Docker Compose 。")]),e._v(" "),s("p",[e._v("Dockerfile 可以让用户管理一个单独的应用容器；而 Compose 则允许用户在一个模板（YAML 格式）中定义一组相关联的应用容器（被称为一个 project，即项目），例如一个 Web 服务容器再加上后端的数据库服务容器等。")]),e._v(" "),s("h2",{attrs:{id:"docker-compose-介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-介绍"}},[e._v("#")]),e._v(" Docker Compose 介绍")]),e._v(" "),s("p",[e._v("通过 Docker-Compose 用户可以很容易地用一个配置文件定义一个多容器的应用，然后使用一条指令安装这个应用的所有依赖，完成构建。Docker-Compose 解决了容器与容器之间如何管理编排的问题。")]),e._v(" "),s("p",[e._v("Docker Compose 工作原理图")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/wuyilong/picture-bed/raw/master/img/docker-compose.png",alt:"img"}})]),e._v(" "),s("p",[e._v("Compose 中有两个重要的概念：")]),e._v(" "),s("ul",[s("li",[e._v("服务 (service) ：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。")]),e._v(" "),s("li",[e._v("项目 (project) ：由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义。")])]),e._v(" "),s("p",[e._v("一个项目可以由多个服务（容器）关联而成，Compose 面向项目进行管理，通过子命令对项目中的一组容器进行便捷地生命周期管理。")]),e._v(" "),s("p",[e._v("Compose 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。因此，只要所操作的平台支持 Docker API，就可以在其上利用 Compose 来进行编排管理。")]),e._v(" "),s("h2",{attrs:{id:"docker-compose-安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-安装"}},[e._v("#")]),e._v(" Docker Compose 安装")]),e._v(" "),s("p",[e._v("Docker Compose 是 Docker 的独立产品，因此需要安装 Docker 之后在单独安装 Docker Compose .")]),e._v(" "),s("p",[s("strong",[e._v("方法一：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("#下载\nsudo curl -L https://github.com/docker/compose/releases/download/1.20.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\n#安装\nchmod +x /usr/local/bin/docker-compose\n#查看版本\ndocker-compose version\n")])])]),s("p",[s("strong",[e._v("方法二：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("#安装pip\nyum -y install epel-release\nyum -y install python-pip\n#确认版本\npip --version\n#更新pip\npip install --upgrade pip\n#安装docker-compose\npip install docker-compose \n#查看版本\ndocker-compose version\n")])])]),s("p",[e._v("推荐使用方法一进行安装，安装成功后输入"),s("code",[e._v("docker-compose version")]),e._v("会返回 docker-compose 的版本信息，如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[root@localhost ~]# docker-compose version\ndocker-compose version 1.19.0, build 9e633ef\ndocker-py version: 2.7.0\nCPython version: 2.7.13\nOpenSSL version: OpenSSL 1.0.1t  3 May 2016\n")])])]),s("p",[e._v("出现以上信息，表明 docker-compose 安装成功")]),e._v(" "),s("p",[s("strong",[e._v("安装补全工具(可选)")])]),e._v(" "),s("p",[e._v("为了方便我们输入命令，也可以安装 Docker 的补全提示工具帮忙我们快速输入命令")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("#安装\nyum install bash-completion\n\n#下载docker-compose脚本\ncurl -L https://raw.githubusercontent.com/docker/compose/$(docker-compose version --short)/contrib/completion/bash/docker-compose > /etc/bash_completion.d/docker-compose\n")])])]),s("h2",{attrs:{id:"快速上手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速上手"}},[e._v("#")]),e._v(" 快速上手")]),e._v(" "),s("p",[e._v("没有什么比来一个小例子练练手更好的学习方法了，我们以官网上的简单示例来看看 docker compose 的使用方法。")]),e._v(" "),s("p",[e._v("我们设计这么一个场景，使用 Python 启动一个 Web 服务，输出一个"),s("code",[e._v("hello()")]),e._v("方法，每次访问的时候在 Redis 缓存中进行计数，并且将统计的结果打印到页面中。")]),e._v(" "),s("h3",{attrs:{id:"第一步-创建-python-服务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一步-创建-python-服务"}},[e._v("#")]),e._v(" 第一步，创建 Python 服务")]),e._v(" "),s("p",[e._v("创建项目路径:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("mkdir composetest\ncd composetest\n")])])]),s("p",[e._v("在目录下创建"),s("code",[e._v("app.py")]),e._v("文件")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("import time\n\nimport redis\nfrom flask import Flask\n\n\napp = Flask(__name__)\ncache = redis.Redis(host='redis', port=6379)\n\n\ndef get_hit_count():\n    retries = 5\n    while True:\n        try:\n            return cache.incr('hits')\n        except redis.exceptions.ConnectionError as exc:\n            if retries == 0:\n                raise exc\n            retries -= 1\n            time.sleep(0.5)\n\n\n@app.route('/')\ndef hello():\n    count = get_hit_count()\n    return 'Hello World! I have been seen {} times.\\n'.format(count)\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", debug=True)\n")])])]),s("p",[e._v("在这个例子中, redis 使用了容器内的网络默认端口是6379。这段 Python 程序的内容就是，启动后连接 Redis 并且输出 "),s("code",[e._v("hello()")]),e._v("方法，当每次访问的时候累计访问次数并且将结果放回到页面。")]),e._v(" "),s("p",[e._v("在同目录下创建"),s("code",[e._v("requirements.txt")]),e._v("文件，添加项目依赖的python包：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("flask\nredis\n")])])]),s("blockquote",[s("p",[e._v("Flask 是 Python 中一个微型的 Web 开发框架。")])]),e._v(" "),s("h3",{attrs:{id:"第二步-创建-dockerfile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二步-创建-dockerfile"}},[e._v("#")]),e._v(" 第二步，创建 Dockerfile")]),e._v(" "),s("p",[e._v("我们来写一个 Dockerfile 来定义 Docker 镜像，此镜像包含了 Python 的依赖包和 Python 环境。")]),e._v(" "),s("p",[e._v("同样在此目录下，我们创建一个 Dockerfile 文件。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('FROM python:3.4-alpine\nADD . /code\nWORKDIR /code\nRUN pip install -r requirements.txt\nCMD ["python", "app.py"]\n')])])]),s("p",[e._v("这段代码表示:")]),e._v(" "),s("ul",[s("li",[e._v("使用基础镜像 Python 3.4")]),e._v(" "),s("li",[e._v("将当前目录映射到镜像"),s("code",[e._v("/code")]),e._v("目录下")]),e._v(" "),s("li",[e._v("设置工作目录为 "),s("code",[e._v("/code")])]),e._v(" "),s("li",[e._v("安装 Python 依赖包")]),e._v(" "),s("li",[e._v("启动 "),s("code",[e._v("app.py")]),e._v(" 程序")])]),e._v(" "),s("h3",{attrs:{id:"第三步-使用-compose-文件定义一个服务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三步-使用-compose-文件定义一个服务"}},[e._v("#")]),e._v(" 第三步，使用 Compose 文件定义一个服务")]),e._v(" "),s("p",[e._v("在当期目录下，我们创建一个 docker-compose.yml 文件，内容如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('version: \'2\'\nservices:\n  web:\n    build: .\n    ports:\n     - "5000:5000"\n  redis:\n    image: "redis:alpine"\n')])])]),s("p",[e._v("这个 Compose 文件定义了两个服务, 一个 Pyhon Web 服务和 redis 服务。")]),e._v(" "),s("ul",[s("li",[e._v("Pyhon Web 服务：使用 Dockerfile 构建了当前镜像。将 Web 容器内部的5000端口映射到 host 的5000端口；并将 Web 容器与 redis 容器连接。")]),e._v(" "),s("li",[e._v("redis服务：该容器直接由官方的 redis 镜像创建。")])]),e._v(" "),s("h3",{attrs:{id:"第四步-使用-compose-编译启动应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第四步-使用-compose-编译启动应用"}},[e._v("#")]),e._v(" 第四步，使用 Compose 编译启动应用")]),e._v(" "),s("p",[e._v("使用命令"),s("code",[e._v("docker-compose up")]),e._v("启动")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('version: \'2\'\nservices:\n  web:\n    build: .\n    command: python app.py\n    ports:\n     - "5000:5000"\n    volumes:\n     - .:/code\n  redis:\n    image: "redis:alpine"\n')])])]),s("p",[e._v("启动成功之后，在浏览器访问："),s("code",[e._v("http://ipaddress:5000/")]),e._v(" ，返回如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Hello World! I have been seen 1 times.\n")])])]),s("p",[s("img",{attrs:{src:"https://gitee.com/wuyilong/picture-bed/raw/master/img/quick-hello-world-1.png",alt:"img"}})]),e._v(" "),s("p",[e._v("刷新再次访问返回")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Hello World! I have been seen 2 times.\n")])])]),s("p",[s("img",{attrs:{src:"https://gitee.com/wuyilong/picture-bed/raw/master/img/quick-hello-world-2.png",alt:"img"}})]),e._v(" "),s("p",[e._v("不断的刷新数字会不断的增长。")]),e._v(" "),s("h2",{attrs:{id:"docker-compose-常用命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-常用命令"}},[e._v("#")]),e._v(" Docker Compose 常用命令")]),e._v(" "),s("p",[e._v("使用"),s("code",[e._v("docker-compose up -d")]),e._v("在后台启动服务")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[root@localhost composetest]# docker-compose up -d\nStarting composetest_web_1 ... \nStarting composetest_web_1 ... done\n")])])]),s("p",[e._v("使用"),s("code",[e._v("docker-compose ps")]),e._v("命令查看启动的服务")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[root@localhost composetest]# docker-compose ps\n       Name                      Command               State           Ports         \n-------------------------------------------------------------------------------------\ncomposetest_redis_1   docker-entrypoint.sh redis ...   Up      6379/tcp              \ncomposetest_web_1     python app.py                    Up      0.0.0.0:5000->5000/tcp\n")])])]),s("p",[e._v("使用"),s("code",[e._v("docker-compose stop")]),e._v("停止服务。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[root@localhost composetest]# docker-compose stop\nStopping composetest_web_1   ... done\nStopping composetest_redis_1 ... done\n")])])]),s("p",[s("strong",[e._v("其它常用命令")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("#查看帮助\ndocker-compose -h\n\n# -f  指定使用的 Compose 模板文件，默认为 docker-compose.yml，可以多次指定。\ndocker-compose -f docker-compose.yml up -d \n\n#启动所有容器，-d 将会在后台启动并运行所有的容器\ndocker-compose up -d\n\n#停用移除所有容器以及网络相关\ndocker-compose down\n\n#查看服务容器的输出\ndocker-compose logs\n\n#列出项目中目前的所有容器\ndocker-compose ps\n\n#构建（重新构建）项目中的服务容器。服务容器一旦构建后，将会带上一个标记名，例如对于 web 项目中的一个 db 容器，可能是 web_db。可以随时在项目目录下运行 docker-compose build 来重新构建服务\ndocker-compose build\n\n#拉取服务依赖的镜像\ndocker-compose pull\n\n#重启项目中的服务\ndocker-compose restart\n\n#删除所有（停止状态的）服务容器。推荐先执行 docker-compose stop 命令来停止容器。\ndocker-compose rm \n\n#在指定服务上执行一个命令。\ndocker-compose run ubuntu ping docker.com\n\n#设置指定服务运行的容器个数。通过 service=num 的参数来设置数量\ndocker-compose scale web=3 db=2\n\n#启动已经存在的服务容器。\ndocker-compose start\n\n#停止已经处于运行状态的容器，但不删除它。通过 docker-compose start 可以再次启动这些容器。\ndocker-compose stop\n")])])])])}),[],!1,null,null,null);o.default=r.exports}}]);