(window.webpackJsonp=window.webpackJsonp||[]).push([[147],{574:function(a,e,t){"use strict";t.r(e);var v=t(30),s=Object(v.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"java-面试题-二-的21-50题答案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-面试题-二-的21-50题答案"}},[a._v("#")]),a._v(" Java 面试题（二）的21~50题答案")]),a._v(" "),t("h3",{attrs:{id:"_21、存在两个类-b-继承-a-c-继承-b-我们能将-b-转换为c-么-如-c-c-b"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_21、存在两个类-b-继承-a-c-继承-b-我们能将-b-转换为c-么-如-c-c-b"}},[a._v("#")]),a._v(" 21、存在两个类，B 继承 A，C 继承 B，我们能将 B 转换为C 么？如 C = (C) B；")]),a._v(" "),t("p",[a._v("这属于强制类型转换，如果被转换的B实例不是C类型，会有异常")]),a._v(" "),t("p",[a._v("比如你的ABC分别对应动物，猫，黑猫。")]),a._v(" "),t("p",[a._v("向上转型就是比如")]),a._v(" "),t("p",[a._v("C c = new C();")]),a._v(" "),t("p",[a._v("B b = c;")]),a._v(" "),t("p",[a._v("你把c转型为B，黑猫是猫吗？是啊，所以这是ok的。")]),a._v(" "),t("p",[a._v("但是反过来")]),a._v(" "),t("p",[a._v("B b = new B();")]),a._v(" "),t("p",[a._v("C c = (C)b;")]),a._v(" "),t("p",[a._v("这就不ok了，只知道这个b是一只猫，他不一定是黑猫。")]),a._v(" "),t("p",[a._v("但如果这个b已经确定是一只黑猫了，那就可以转型了")]),a._v(" "),t("p",[a._v("B b = new C();")]),a._v(" "),t("p",[a._v("C c = (C)b;")]),a._v(" "),t("p",[a._v("这里的b本来就是黑猫啊。")]),a._v(" "),t("h3",{attrs:{id:"_22、哪个类包含-clone-方法-是-cloneable-还是-object"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22、哪个类包含-clone-方法-是-cloneable-还是-object"}},[a._v("#")]),a._v(" 22、哪个类包含 clone 方法？是 Cloneable 还是 Object？")]),a._v(" "),t("p",[a._v("java.lang.Cloneable 是一个标示性接口，不包含任何方法，clone 方法在object 类中定义。并且需要知道 clone() 方法是一个本地方法，这意味着它是由c 或 c++ 或 其他本地语言实现的。")]),a._v(" "),t("h3",{attrs:{id:"_23、java-中-操作符是线程安全的吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_23、java-中-操作符是线程安全的吗"}},[a._v("#")]),a._v(" 23、Java 中 ++ 操作符是线程安全的吗？")]),a._v(" "),t("p",[a._v("不是线程安全的操作。它涉及到多个指令，如读取变量值，增加，然后存储回内存，这个过程可能会出现多个线程交差。")]),a._v(" "),t("h3",{attrs:{id:"_24、a-a-b-与-a-b-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_24、a-a-b-与-a-b-的区别"}},[a._v("#")]),a._v(" 24、a = a + b 与 a += b 的区别")]),a._v(" "),t("p",[a._v("+= 隐式的将加操作的结果类型强制转换为持有结果的类型。如果两这个整型相加，如 byte、short 或者 int，首先会将它们提升到 int 类型，然后在执行加法操作。如果加法操作的结果比 a 的最大值要大，则 a+b 会出现编译错误，但是")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("byte a = 127;\nbyte b = 127;\nb = a + b;\n// error : cannot convert from int to byte\nb += a;\n// ok\n")])])]),t("p",[a._v("（译者注：这个地方应该表述的有误，其实无论 a+b 的值为多少，编译器都会报错，因为 a+b 操作会将 a、b 提升为 int 类型，所以将 int 类型赋值给 byte就会编译出错）")]),a._v(" "),t("h3",{attrs:{id:"_25、我能在不进行强制转换的情况下将一个-double-值赋值给long-类型的变量吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_25、我能在不进行强制转换的情况下将一个-double-值赋值给long-类型的变量吗"}},[a._v("#")]),a._v(" 25、我能在不进行强制转换的情况下将一个 double 值赋值给long 类型的变量吗？")]),a._v(" "),t("p",[a._v("不行，你不能在没有强制类型转换的前提下将一个 double 值赋值给 long 类型的变量，因为 double 类型的范围比 long 类型更广，所以必须要进行强制转换。")]),a._v(" "),t("h3",{attrs:{id:"_26、3-0-1-0-3-将会返回什么-true-还是-false"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_26、3-0-1-0-3-将会返回什么-true-还是-false"}},[a._v("#")]),a._v(" 26、3*0.1 == 0.3 将会返回什么？true 还是 false？")]),a._v(" "),t("p",[a._v("false，因为有些浮点数不能完全精确的表示出来。")]),a._v(" "),t("h3",{attrs:{id:"_27、int-和-integer-哪个会占用更多的内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_27、int-和-integer-哪个会占用更多的内存"}},[a._v("#")]),a._v(" 27、int 和 Integer 哪个会占用更多的内存？")]),a._v(" "),t("p",[a._v("Integer 对象会占用更多的内存。Integer 是一个对象，需要存储对象的元数据。但是 int 是一个原始类型的数据，所以占用的空间更少。")]),a._v(" "),t("h3",{attrs:{id:"_28、为什么-java-中的-string-是不可变的-immutable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_28、为什么-java-中的-string-是不可变的-immutable"}},[a._v("#")]),a._v(" 28、为什么 Java 中的 String 是不可变的（Immutable）？")]),a._v(" "),t("p",[a._v("Java 中的 String 不可变是因为 Java 的设计者认为字符串使用非常频繁，将字符串设置为不可变可以允许多个客户端之间共享相同的字符串。")]),a._v(" "),t("h3",{attrs:{id:"_29、我们能在-switch-中使用-string-吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_29、我们能在-switch-中使用-string-吗"}},[a._v("#")]),a._v(" 29、我们能在 Switch 中使用 String 吗？")]),a._v(" "),t("p",[a._v("从 Java 7 开始，我们可以在 switch case 中使用字符串，但这仅仅是一个语法糖。内部实现在 switch 中使用字符串的 hash code。")]),a._v(" "),t("h3",{attrs:{id:"_30、java-中的构造器链是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_30、java-中的构造器链是什么"}},[a._v("#")]),a._v(" 30、Java 中的构造器链是什么？")]),a._v(" "),t("p",[a._v("当你从一个构造器中调用另一个构造器，就是 Java 中的构造器链。这种情况只在重载了类的构造器的时候才会出现。")]),a._v(" "),t("h3",{attrs:{id:"_31、64-位-jvm-中-int-的长度是多数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_31、64-位-jvm-中-int-的长度是多数"}},[a._v("#")]),a._v(" 31、64 位 JVM 中，int 的长度是多数？")]),a._v(" "),t("p",[a._v("Java 中，int 类型变量的长度是一个固定值，与平台无关，都是 32 位。意思就是说，在32位和64位的java虚拟机中，int 类型的长度是相同的。")]),a._v(" "),t("h3",{attrs:{id:"_32、serial-与-parallel-gc-之间的不同之处"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_32、serial-与-parallel-gc-之间的不同之处"}},[a._v("#")]),a._v(" 32、Serial 与 Parallel GC 之间的不同之处？")]),a._v(" "),t("p",[a._v("Serial 与 Parallel 在 GC 执行的时候都会引起 stop-the-world。它们之间主要不同 serial 收集器是默认的复制收集器，执行 GC 的时候只有一个线程，而parallel 收集器使用多个 GC 线程来执行。")]),a._v(" "),t("h3",{attrs:{id:"_33、32-位和-64-位的-jvm-int-类型变量的长度是多数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_33、32-位和-64-位的-jvm-int-类型变量的长度是多数"}},[a._v("#")]),a._v(" 33、32 位和 64 位的 JVM，int 类型变量的长度是多数？")]),a._v(" "),t("p",[a._v("32 位和 64 位的 JVM 中，int 类型变量的长度是相同的，都是 32 位或者 4个字节。")]),a._v(" "),t("h3",{attrs:{id:"_34、java-中-weakreference-与-softreference-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_34、java-中-weakreference-与-softreference-的区别"}},[a._v("#")]),a._v(" 34、Java 中 WeakReference 与 SoftReference 的区别？")]),a._v(" "),t("p",[a._v("虽然 WeakReference 与 SoftReference 都有利于提高 GC 和 内存的效率，但是 WeakReference ，一旦失去最后一个强引用，就会被 GC 回收，而软引用虽然不能阻止被回收，但是可以延迟到 JVM 内存不足的时候。")]),a._v(" "),t("h3",{attrs:{id:"_35、weakhashmap-是怎么工作的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_35、weakhashmap-是怎么工作的"}},[a._v("#")]),a._v(" 35、WeakHashMap 是怎么工作的？")]),a._v(" "),t("p",[a._v("WeakHashMap 的工作与正常的 HashMap 类似，但是使用弱引用作为 key，意思就是当 key 对象没有任何引用时，key/value 将会被回收。")]),a._v(" "),t("h3",{attrs:{id:"_36、jvm-选项-xx-usecompressedoops-有什么作用-为什么要使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_36、jvm-选项-xx-usecompressedoops-有什么作用-为什么要使用"}},[a._v("#")]),a._v(" 36、JVM 选项 -XX:+UseCompressedOops 有什么作用？为什么要使用？")]),a._v(" "),t("p",[a._v("当你将你的应用从 32 位的 JVM 迁移到 64 位的 JVM 时，由于对象的指针从32 位增加到了 64 位，因此堆内存会突然增加，差不多要翻倍。这也会对 CPU缓存（容量比内存小很多）的数据产生不利的影响。因为，迁移到 64 位的 JVM主要动机在于可以指定最大堆大小，通过压缩 OOP 可以节省一定的内存。通过-XX:+UseCompressedOops 选项，JVM 会使用 32 位的 OOP，而不是 64 位的 OOP。")]),a._v(" "),t("h3",{attrs:{id:"_37、怎样通过-java-程序来判断-jvm-是-32-位-还是-64位"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_37、怎样通过-java-程序来判断-jvm-是-32-位-还是-64位"}},[a._v("#")]),a._v(" 37、怎样通过 Java 程序来判断 JVM 是 32 位 还是 64位？")]),a._v(" "),t("p",[a._v("你可以检查某些系统属性如 sun.arch.data.model 或 os.arch 来获取该信息。")]),a._v(" "),t("h3",{attrs:{id:"_38、32-位-jvm-和-64-位-jvm-的最大堆内存分别是多数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_38、32-位-jvm-和-64-位-jvm-的最大堆内存分别是多数"}},[a._v("#")]),a._v(" 38、32 位 JVM 和 64 位 JVM 的最大堆内存分别是多数？")]),a._v(" "),t("p",[a._v("理论上说上 32 位的 JVM 堆内存可以到达 2^32，即 4GB，但实际上会比这个小很多。不同操作系统之间不同，如 Windows 系统大约 1.5 GB，Solaris 大约3GB。64 位 JVM 允许指定最大的堆内存，理论上可以达到 2^64，这是一个非常大的数字，实际上你可以指定堆内存大小到 100GB。甚至有的 JVM，如 Azul，堆内存到 1000G 都是可能的。")]),a._v(" "),t("h3",{attrs:{id:"_39、jre、jdk、jvm-及-jit-之间有什么不同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_39、jre、jdk、jvm-及-jit-之间有什么不同"}},[a._v("#")]),a._v(" 39、JRE、JDK、JVM 及 JIT 之间有什么不同？")]),a._v(" "),t("p",[a._v("JRE 代表 Java 运行 时（Java run-time），是 运 行 Java 引用所必须的。JDK 代表 Java 开发工具（Java development kit），是 Java 程序的开发工具，如 Java编译器，它也包含 JRE。JVM 代表 Java 虚拟机（Java virtual machine），它的责任是运行 Java 应用。JIT 代表即时编译（Just In Time compilation），当代码执行的次数超过一定的阈值时，会将 Java 字节码转换为本地代码，如，主要的热点代码会被准换为本地代码，这样有利大幅度提高 Java 应用的性能。")]),a._v(" "),t("h3",{attrs:{id:"_40、解释-java-堆空间及-gc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_40、解释-java-堆空间及-gc"}},[a._v("#")]),a._v(" 40、解释 Java 堆空间及 GC？")]),a._v(" "),t("p",[a._v("当通过 Java 命令启动 Java 进程的时候，会为它分配内存。内存的一部分用于创建堆空间，当程序中创建对象的时候，就从对空间中分配内存。GC 是 JVM 内部的一个进程，回收无效对象的内存用于将来的分配。")]),a._v(" "),t("h3",{attrs:{id:"_41、你能保证-gc-执行吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_41、你能保证-gc-执行吗"}},[a._v("#")]),a._v(" 41、你能保证 GC 执行吗？")]),a._v(" "),t("p",[a._v("不能，虽然你可以调用 System.gc() 或者 Runtime.gc()，但是没有办法保证 GC的执行。")]),a._v(" "),t("h3",{attrs:{id:"_42、怎么获取-java-程序使用的内存-堆使用的百分比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_42、怎么获取-java-程序使用的内存-堆使用的百分比"}},[a._v("#")]),a._v(" 42、怎么获取 Java 程序使用的内存？堆使用的百分比？")]),a._v(" "),t("p",[a._v("可以通过 java.lang.Runtime 类中与内存相关方法来获取剩余的内存，总内存及最大堆内存。通过这些方法你也可以获取到堆使用的百分比及堆内存的剩余空间。Runtime.freeMemory() 方法返回剩余空间的字节数，Runtime.totalMemory()方法总内存的字节数，Runtime.maxMemory() 返回最大内存的字节数。")]),a._v(" "),t("h3",{attrs:{id:"_43、java-中堆和栈有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_43、java-中堆和栈有什么区别"}},[a._v("#")]),a._v(" 43、Java 中堆和栈有什么区别？")]),a._v(" "),t("p",[a._v("JVM 中堆和栈属于不同的内存区域，使用目的也不同。栈常用于保存方法帧和局部变量，而对象总是在堆上分配。栈通常都比堆小，也不会在多个线程之间共享，而堆被整个 JVM 的所有线程共享。")]),a._v(" "),t("h3",{attrs:{id:"_44、-a-b-和-a-equals-b-有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_44、-a-b-和-a-equals-b-有什么区别"}},[a._v("#")]),a._v(" 44、“a==b”和”a.equals(b)”有什么区别？")]),a._v(" "),t("p",[a._v("如果 a 和 b 都是对象，则 a==b 是比较两个对象的引用，只有当 a 和 b 指向的是堆中的同一个对象才会返回 true，而 a.equals(b) 是进行逻辑比较，所以通常需要重写该方法来提供逻辑一致性的比较。例如，String 类重写 equals() 方法，所以可以用于两个不同对象，但是包含的字母相同的比较。")]),a._v(" "),t("h3",{attrs:{id:"_45、a-hashcode-有什么用-与-a-equals-b-有什么关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_45、a-hashcode-有什么用-与-a-equals-b-有什么关系"}},[a._v("#")]),a._v(" 45、a.hashCode() 有什么用？与 a.equals(b) 有什么关系？")]),a._v(" "),t("p",[a._v("hashCode() 方法是相应对象整型的 hash 值。它常用于基于 hash 的集合类，如 Hashtable、HashMap、LinkedHashMap 等等。它与 equals() 方法关系特别紧密。根据 Java 规范，两个使用 equal() 方法来判断相等的对象，必须具有相同的 hash code。")]),a._v(" "),t("h3",{attrs:{id:"_46、final、finalize-和-finally-的不同之处"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_46、final、finalize-和-finally-的不同之处"}},[a._v("#")]),a._v(" 46、final、finalize 和 finally 的不同之处？")]),a._v(" "),t("p",[a._v("final 是一个修饰符，可以修饰变量、方法和类。如果 final 修饰变量，意味着该变量的值在初始化后不能被改变。finalize 方法是在对象被回收之前调用的方法，给对象自己最后一个复活的机会，但是什么时候调用 finalize 没有保证。finally是一个关键字，与 try 和 catch 一起用于异常的处理。finally 块一定会被执行，无论在 try 块中是否有发生异常。")]),a._v(" "),t("h3",{attrs:{id:"_47、java-中的编译期常量是什么-使用它又什么风险"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_47、java-中的编译期常量是什么-使用它又什么风险"}},[a._v("#")]),a._v(" 47、Java 中的编译期常量是什么？使用它又什么风险？")]),a._v(" "),t("p",[a._v("公共静态不可变（public static final ）变量也就是我们所说的编译期常量，这里的 public 可选的。实际上这些变量在编译时会被替换掉，因为编译器知道这些变量的值，并且知道这些变量在运行时不能改变。这种方式存在的一个问题是你使用了一个内部的或第三方库中的公有编译时常量，但是这个值后面被其他人改变了，但是你的客户端仍然在使用老的值，甚至你已经部署了一个新的 jar。为了避免这种情况，当你在更新依赖 JAR 文件时，确保重新编译你的程序。")]),a._v(" "),t("h3",{attrs:{id:"_48、list、set、map-和-queue-之间的区别-答案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_48、list、set、map-和-queue-之间的区别-答案"}},[a._v("#")]),a._v(" 48、List、Set、Map 和 Queue 之间的区别(答案)")]),a._v(" "),t("p",[a._v("List 是一个有序集合，允许元素重复。它的某些实现可以提供基于下标值的常量访问时间，但是这不是 List 接口保证的。Set 是一个无序集合。")]),a._v(" "),t("h3",{attrs:{id:"_49、poll-方法和-remove-方法的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_49、poll-方法和-remove-方法的区别"}},[a._v("#")]),a._v(" 49、poll() 方法和 remove() 方法的区别？")]),a._v(" "),t("p",[a._v("poll() 和 remove() 都是从队列中取出一个元素，但是 poll() 在获取元素失败的时候会返回空，但是 remove() 失败的时候会抛出异常。")]),a._v(" "),t("h3",{attrs:{id:"_50、java-中-linkedhashmap-和-priorityqueue-的区别是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_50、java-中-linkedhashmap-和-priorityqueue-的区别是什么"}},[a._v("#")]),a._v(" 50、Java 中 LinkedHashMap 和 PriorityQueue 的区别是什么？")]),a._v(" "),t("p",[a._v("PriorityQueue 保证最高或者最低优先级的的元素总是在队列头部，但是LinkedHashMap 维持的顺序是元素插入的顺序。当遍历一个 PriorityQueue时，没有任何顺序保证，但是 LinkedHashMap 课保证遍历顺序是元素插入的顺序。")])])}),[],!1,null,null,null);e.default=s.exports}}]);