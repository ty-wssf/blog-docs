(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{533:function(t,n,a){"use strict";a.r(n);var e=a(30),i=Object(e.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"详解condition的await和signal等待-通知机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#详解condition的await和signal等待-通知机制"}},[t._v("#")]),t._v(" 详解Condition的await和signal等待/通知机制")]),t._v(" "),a("h2",{attrs:{id:"_1-condition简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-condition简介"}},[t._v("#")]),t._v(" 1.Condition简介")]),t._v(" "),a("p",[t._v("任何一个java对象都天然继承于Object类，在线程间实现通信的往往会应用到Object的几个方法，比如wait(),wait(long timeout),wait(long timeout, int nanos)与notify(),notifyAll()几个方法实现等待/通知机制，同样的， 在java Lock体系下依然会有同样的方法实现等待/通知机制。从整体上来看"),a("strong",[t._v("Object的wait和notify/notify是与对象监视器配合完成线程间的等待/通知机制，而Condition与Lock配合完成等待通知机制，前者是java底层级别的，后者是语言级别的，具有更高的可控制性和扩展性")]),t._v("。两者除了在使用方式上不同外，在"),a("strong",[t._v("功能特性")]),t._v("上还是有很多的不同：")]),t._v(" "),a("ol",[a("li",[t._v("Condition能够支持不响应中断，而通过使用Object方式不支持；")]),t._v(" "),a("li",[t._v("Condition能够支持多个等待队列（new 多个Condition对象），而Object方式只能支持一个；")]),t._v(" "),a("li",[t._v("Condition能够支持超时时间的设置，而Object不支持")])]),t._v(" "),a("p",[t._v("参照Object的wait和notify/notifyAll方法，Condition也提供了同样的方法：")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("针对Object的wait方法")])])]),t._v(" "),a("ol",[a("li",[t._v("void await() throws InterruptedException:当前线程进入等待状态，如果其他线程调用condition的signal或者signalAll方法并且当前线程获取Lock从await方法返回，如果在等待状态中被中断会抛出被中断异常；")]),t._v(" "),a("li",[t._v("long awaitNanos(long nanosTimeout)：当前线程进入等待状态直到被通知，中断或者"),a("strong",[t._v("超时")]),t._v("；")]),t._v(" "),a("li",[t._v("boolean await(long time, TimeUnit unit)throws InterruptedException：同第二种，支持自定义时间单位")]),t._v(" "),a("li",[t._v("boolean awaitUntil(Date deadline) throws InterruptedException：当前线程进入等待状态直到被通知，中断或者"),a("strong",[t._v("到了某个时间")])])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("针对Object的notify/notifyAll方法")])])]),t._v(" "),a("ol",[a("li",[t._v("void signal()：唤醒一个等待在condition上的线程，将该线程从"),a("strong",[t._v("等待队列")]),t._v("中转移到"),a("strong",[t._v("同步队列")]),t._v("中，如果在同步队列中能够竞争到Lock则可以从等待方法中返回。")]),t._v(" "),a("li",[t._v("void signalAll()：与1的区别在于能够唤醒所有等待在condition上的线程")])]),t._v(" "),a("h2",{attrs:{id:"_2-condition实现原理分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-condition实现原理分析"}},[t._v("#")]),t._v(" 2.Condition实现原理分析")]),t._v(" "),a("h3",{attrs:{id:"_2-1-等待队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-等待队列"}},[t._v("#")]),t._v(" 2.1 等待队列")]),t._v(" "),a("p",[t._v("要想能够深入的掌握condition还是应该知道它的实现原理，现在我们一起来看看condiiton的源码。创建一个condition对象是通过"),a("code",[t._v("lock.newCondition()")]),t._v(",而这个方法实际上是会new出一个"),a("strong",[t._v("ConditionObject")]),t._v("对象，该类是AQS（"),a("a",{attrs:{href:"https://juejin.im/post/6844903601538596877",target:"_blank",rel:"noopener noreferrer"}},[t._v("AQS的实现原理的文章"),a("OutboundLink")],1),t._v("）的一个内部类，有兴趣可以去看看。前面我们说过，condition是要和lock配合使用的也就是condition和Lock是绑定在一起的，而lock的实现原理又依赖于AQS，自然而然ConditionObject作为AQS的一个内部类无可厚非。我们知道在锁机制的实现上，AQS内部维护了一个同步队列，如果是独占式锁的话，所有获取锁失败的线程的尾插入到"),a("strong",[t._v("同步队列")]),t._v("，同样的，condition内部也是使用同样的方式，内部维护了一个 "),a("strong",[t._v("等待队列")]),t._v("，所有调用condition.await方法的线程会加入到等待队列中，并且线程状态转换为等待状态。另外注意到ConditionObject中有两个成员变量：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("/** First node of condition queue. */\nprivate transient Node firstWaiter;\n/** Last node of condition queue. */\nprivate transient Node lastWaiter;\n")])])]),a("p",[t._v("这样我们就可以看出来ConditionObject通过持有等待队列的头尾指针来管理等待队列。主要注意的是Node类复用了在AQS中的Node类，其节点状态和相关属性可以去看"),a("a",{attrs:{href:"https://juejin.im/post/6844903601538596877",target:"_blank",rel:"noopener noreferrer"}},[t._v("AQS的实现原理的文章"),a("OutboundLink")],1),t._v("，如果您仔细看完这篇文章对condition的理解易如反掌，对lock体系的实现也会有一个质的提升。Node类有这样一个属性：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//后继节点\nNode nextWaiter;\n")])])]),a("p",[t._v("进一步说明，"),a("strong",[t._v("等待队列是一个单向队列")]),t._v("，而在之前说AQS时知道同步队列是一个双向队列。接下来我们用一个demo，通过debug进去看是不是符合我们的猜想：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("public static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n        Thread thread = new Thread(() -> {\n            lock.lock();\n            try {\n                condition.await();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }finally {\n                lock.unlock();\n            }\n        });\n        thread.start();\n    }\n}\n")])])]),a("p",[t._v("这段代码没有任何实际意义，甚至很臭，只是想说明下我们刚才所想的。新建了10个线程，没有线程先获取锁，然后调用condition.await方法释放锁将当前线程加入到等待队列中，通过debug控制当走到第10个线程的时候查看"),a("code",[t._v("firstWaiter")]),t._v("即等待队列中的头结点，debug模式下情景图如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/5/6/16334382e5601863?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"debug模式下情景图"}})]),t._v(" "),a("p",[t._v("从这个图我们可以很清楚的看到这样几点：1. 调用condition.await方法后线程依次尾插入到等待队列中，如图队列中的线程引用依次为Thread-0,Thread-1,Thread-2....Thread-8；2. 等待队列是一个单向队列。通过我们的猜想然后进行实验验证，我们可以得出等待队列的示意图如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/5/6/16334382e58c4e34?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"等待队列的示意图"}})]),t._v(" "),a("p",[t._v("同时还有一点需要注意的是：我们可以多次调用lock.newCondition()方法创建多个condition对象，也就是一个lock可以持有多个等待队列。而在之前利用Object的方式实际上是指在"),a("strong",[t._v("对象Object对象监视器上只能拥有一个同步队列和一个等待队列，而并发包中的Lock拥有一个同步队列和多个等待队列")]),t._v("。示意图如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/5/6/16334382e65f9685?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"AQS持有多个Condition.png"}})]),t._v(" "),a("p",[t._v("如图所示，ConditionObject是AQS的内部类，因此每个ConditionObject能够访问到AQS提供的方法，相当于每个Condition都拥有所属同步器的引用。")]),t._v(" "),a("h3",{attrs:{id:"_2-2-await实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-await实现原理"}},[t._v("#")]),t._v(" 2.2 await实现原理")]),t._v(" "),a("p",[a("strong",[t._v("当调用condition.await()方法后会使得当前获取lock的线程进入到等待队列，如果该线程能够从await()方法返回的话一定是该线程获取了与condition相关联的lock")]),t._v("。接下来，我们还是从源码的角度去看，只有熟悉了源码的逻辑我们的理解才是最深的。await()方法源码为：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("public final void await() throws InterruptedException {\n    if (Thread.interrupted())\n        throw new InterruptedException();\n\t// 1. 将当前线程包装成Node，尾插入到等待队列中\n    Node node = addConditionWaiter();\n\t// 2. 释放当前线程所占用的lock，在释放的过程中会唤醒同步队列中的下一个节点\n    int savedState = fullyRelease(node);\n    int interruptMode = 0;\n    while (!isOnSyncQueue(node)) {\n\t\t// 3. 当前线程进入到等待状态\n        LockSupport.park(this);\n        if ((interruptMode = checkInterruptWhileWaiting(node)) != 0)\n            break;\n    }\n\t// 4. 自旋等待获取到同步状态（即获取到lock）\n    if (acquireQueued(node, savedState) && interruptMode != THROW_IE)\n        interruptMode = REINTERRUPT;\n    if (node.nextWaiter != null) // clean up if cancelled\n        unlinkCancelledWaiters();\n\t// 5. 处理被中断的情况\n    if (interruptMode != 0)\n        reportInterruptAfterWait(interruptMode);\n}\n")])])]),a("p",[t._v("代码的主要逻辑"),a("strong",[t._v("请看注释")]),t._v("，我们都知道"),a("strong",[t._v("当当前线程调用condition.await()方法后，会使得当前线程释放lock然后加入到等待队列中，直至被signal/signalAll后会使得当前线程从等待队列中移至到同步队列中去，直到获得了lock后才会从await方法返回，或者在等待时被中断会做中断处理")]),t._v("。那么关于这个实现过程我们会有这样几个问题：1. 是怎样将当前线程添加到等待队列中去的？2.释放锁的过程？3.怎样才能从await方法退出？而这段代码的逻辑就是告诉我们这三个问题的答案。具体"),a("strong",[t._v("请看注释")]),t._v("，在第1步中调用addConditionWaiter将当前线程添加到等待队列中，该方法源码为：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("private Node addConditionWaiter() {\n    Node t = lastWaiter;\n    // If lastWaiter is cancelled, clean out.\n    if (t != null && t.waitStatus != Node.CONDITION) {\n        unlinkCancelledWaiters();\n        t = lastWaiter;\n    }\n\t//将当前线程包装成Node\n    Node node = new Node(Thread.currentThread(), Node.CONDITION);\n    if (t == null)\n        firstWaiter = node;\n    else\n\t\t//尾插入\n        t.nextWaiter = node;\n\t//更新lastWaiter\n    lastWaiter = node;\n    return node;\n}\n")])])]),a("p",[t._v("这段代码就很容易理解了，将当前节点包装成Node，如果等待队列的firstWaiter为null的话（等待队列为空队列），则将firstWaiter指向当前的Node,否则，更新lastWaiter(尾节点)即可。就是"),a("strong",[t._v("通过尾插入的方式将当前线程封装的Node插入到等待队列中即可")]),t._v("，同时可以看出等待队列是一个"),a("strong",[t._v("不带头结点的链式队列")]),t._v("，之前我们学习AQS时知道同步队列"),a("strong",[t._v("是一个带头结点的链式队列")]),t._v("，这是两者的一个区别。将当前节点插入到等待对列之后，会使当前线程释放lock，由fullyRelease方法实现，fullyRelease源码为：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("final int fullyRelease(Node node) {\n    boolean failed = true;\n    try {\n        int savedState = getState();\n        if (release(savedState)) {\n\t\t\t//成功释放同步状态\n            failed = false;\n            return savedState;\n        } else {\n\t\t\t//不成功释放同步状态抛出异常\n            throw new IllegalMonitorStateException();\n        }\n    } finally {\n        if (failed)\n            node.waitStatus = Node.CANCELLED;\n    }\n}\n")])])]),a("p",[t._v("这段代码就很容易理解了，"),a("strong",[t._v("调用AQS的模板方法release方法释放AQS的同步状态并且唤醒在同步队列中头结点的后继节点引用的线程")]),t._v("，如果释放成功则正常返回，若失败的话就抛出异常。到目前为止，这两段代码已经解决了前面的两个问题的答案了，还剩下第三个问题，怎样从await方法退出？现在回过头再来看await方法有这样一段逻辑：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("while (!isOnSyncQueue(node)) {\n\t// 3. 当前线程进入到等待状态\n    LockSupport.park(this);\n    if ((interruptMode = checkInterruptWhileWaiting(node)) != 0)\n        break;\n}\n")])])]),a("p",[t._v("很显然，当线程第一次调用condition.await()方法时，会进入到这个while()循环中，然后通过LockSupport.park(this)方法使得当前线程进入等待状态，那么要想退出这个await方法第一个前提条件自然而然的是要先退出这个while循环，出口就只剩下两个地方："),a("strong",[t._v("1. 逻辑走到break退出while循环；2. while循环中的逻辑判断为false")]),t._v("。再看代码出现第1种情况的条件是当前等待的线程被中断后代码会走到break退出，第二种情况是当前节点被移动到了同步队列中（即另外线程调用的condition的signal或者signalAll方法），while中逻辑判断为false后结束while循环。总结下，就是"),a("strong",[t._v("当前线程被中断或者调用condition.signal/condition.signalAll方法当前节点移动到了同步队列后")]),t._v(" ，这是当前线程退出await方法的前提条件。当退出while循环后就会调用"),a("code",[t._v("acquireQueued(node, savedState)")]),t._v("，这个方法在介绍AQS的底层实现时说过了，若感兴趣的话可以去"),a("a",{attrs:{href:"https://juejin.im/post/6844903601538596877",target:"_blank",rel:"noopener noreferrer"}},[t._v("看这篇文章"),a("OutboundLink")],1),t._v("，该方法的作用是在"),a("strong",[t._v("自旋过程中线程不断尝试获取同步状态，直至成功（线程获取到lock）")]),t._v("。这样也说明了"),a("strong",[t._v("退出await方法必须是已经获得了condition引用（关联）的lock")]),t._v("。到目前为止，开头的三个问题我们通过阅读源码的方式已经完全找到了答案，也对await方法的理解加深。await方法示意图如下图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/5/6/16334382e74cead3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"await方法示意图"}})]),t._v(" "),a("p",[t._v("如图，调用condition.await方法的线程必须是已经获得了lock，也就是当前线程是同步队列中的头结点。调用该方法后会使得当前线程所封装的Node尾插入到等待队列中。")]),t._v(" "),a("blockquote",[a("p",[t._v("超时机制的支持")])]),t._v(" "),a("p",[t._v("condition还额外支持了超时机制，使用者可调用方法awaitNanos,awaitUtil。这两个方法的实现原理，基本上与AQS中的tryAcquire方法如出一辙，关于tryAcquire可以仔细阅读"),a("a",{attrs:{href:"https://juejin.im/post/6844903601538596877#heading-6",target:"_blank",rel:"noopener noreferrer"}},[t._v("这篇文章的第3.4部分"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("blockquote",[a("p",[t._v("不响应中断的支持")])]),t._v(" "),a("p",[t._v("要想不响应中断可以调用condition.awaitUninterruptibly()方法，该方法的源码为：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("public final void awaitUninterruptibly() {\n    Node node = addConditionWaiter();\n    int savedState = fullyRelease(node);\n    boolean interrupted = false;\n    while (!isOnSyncQueue(node)) {\n        LockSupport.park(this);\n        if (Thread.interrupted())\n            interrupted = true;\n    }\n    if (acquireQueued(node, savedState) || interrupted)\n        selfInterrupt();\n}\n")])])]),a("p",[t._v("这段方法与上面的await方法基本一致，只不过减少了对中断的处理，并省略了reportInterruptAfterWait方法抛被中断的异常。")]),t._v(" "),a("h3",{attrs:{id:"_2-3-signal-signalall实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-signal-signalall实现原理"}},[t._v("#")]),t._v(" 2.3 signal/signalAll实现原理")]),t._v(" "),a("p",[a("strong",[t._v("调用condition的signal或者signalAll方法可以将等待队列中等待时间最长的节点移动到同步队列中")]),t._v("，使得该节点能够有机会获得lock。按照等待队列是先进先出（FIFO）的，所以等待队列的头节点必然会是等待时间最长的节点，也就是每次调用condition的signal方法是将头节点移动到同步队列中。我们来通过看源码的方式来看这样的猜想是不是对的，signal方法源码为：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("public final void signal() {\n    //1. 先检测当前线程是否已经获取lock\n    if (!isHeldExclusively())\n        throw new IllegalMonitorStateException();\n    //2. 获取等待队列中第一个节点，之后的操作都是针对这个节点\n\tNode first = firstWaiter;\n    if (first != null)\n        doSignal(first);\n}\n")])])]),a("p",[t._v("signal方法首先会检测当前线程是否已经获取lock，如果没有获取lock会直接抛出异常，如果获取的话再得到等待队列的头指针引用的节点，之后的操作的doSignal方法也是基于该节点。下面我们来看看doSignal方法做了些什么事情，doSignal方法源码为：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("private void doSignal(Node first) {\n    do {\n        if ( (firstWaiter = first.nextWaiter) == null)\n            lastWaiter = null;\n\t\t//1. 将头结点从等待队列中移除\n        first.nextWaiter = null;\n\t\t//2. while中transferForSignal方法对头结点做真正的处理\n    } while (!transferForSignal(first) &&\n             (first = firstWaiter) != null);\n}\n")])])]),a("p",[t._v("具体逻辑请看注释，真正对头节点做处理的逻辑在"),a("strong",[t._v("transferForSignal")]),t._v("放，该方法源码为：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("final boolean transferForSignal(Node node) {\n    /*\n     * If cannot change waitStatus, the node has been cancelled.\n     */\n\t//1. 更新状态为0\n    if (!compareAndSetWaitStatus(node, Node.CONDITION, 0))\n        return false;\n\n    /*\n     * Splice onto queue and try to set waitStatus of predecessor to\n     * indicate that thread is (probably) waiting. If cancelled or\n     * attempt to set waitStatus fails, wake up to resync (in which\n     * case the waitStatus can be transiently and harmlessly wrong).\n     */\n\t//2.将该节点移入到同步队列中去\n    Node p = enq(node);\n    int ws = p.waitStatus;\n    if (ws > 0 || !compareAndSetWaitStatus(p, ws, Node.SIGNAL))\n        LockSupport.unpark(node.thread);\n    return true;\n}\n")])])]),a("p",[t._v("关键逻辑请看注释，这段代码主要做了两件事情1.将头结点的状态更改为CONDITION；2.调用enq方法，将该节点尾插入到同步队列中，关于enq方法请看AQS的底层实现这篇文章。现在我们可以得出结论："),a("strong",[t._v("调用condition的signal的前提条件是当前线程已经获取了lock，该方法会使得等待队列中的头节点即等待时间最长的那个节点移入到同步队列，而移入到同步队列后才有机会使得等待线程被唤醒，即从await方法中的LockSupport.park(this)方法中返回，从而才有机会使得调用await方法的线程成功退出")]),t._v("。signal执行示意图如下图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/5/6/16334382e7650d62?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"signal执行示意图"}})]),t._v(" "),a("blockquote",[a("p",[t._v("signalAll")])]),t._v(" "),a("p",[t._v("sigllAll与sigal方法的区别体现在doSignalAll方法上，前面我们已经知道d"),a("strong",[t._v("oSignal方法只会对等待队列的头节点进行操作，")]),t._v("，而doSignalAll的源码为：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("private void doSignalAll(Node first) {\n    lastWaiter = firstWaiter = null;\n    do {\n        Node next = first.nextWaiter;\n        first.nextWaiter = null;\n        transferForSignal(first);\n        first = next;\n    } while (first != null);\n}\n")])])]),a("p",[t._v("该方法只不过时间等待队列中的每一个节点都移入到同步队列中，即“通知”当前调用condition.await()方法的每一个线程。")]),t._v(" "),a("h3",{attrs:{id:"_2-4-await与signal-signalall的结合思考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-await与signal-signalall的结合思考"}},[t._v("#")]),t._v(" 2.4 await与signal/signalAll的结合思考")]),t._v(" "),a("p",[t._v("文章开篇提到等待/通知机制，通过使用condition提供的await和signal/signalAll方法就可以实现这种机制，而这种机制能够解决最经典的问题就是“生产者与消费者问题”，关于“生产者消费者问题”之后会用单独的一篇文章进行讲解，这也是面试的高频考点。await和signal和signalAll方法就像一个开关控制着线程A（等待方）和线程B（通知方）。它们之间的关系可以用下面一个图来表现得更加贴切：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/5/6/16334382e7911395?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"condition下的等待通知机制.png"}})]),t._v(" "),a("p",[t._v("如图，"),a("strong",[t._v("线程awaitThread先通过lock.lock()方法获取锁成功后调用了condition.await方法进入等待队列，而另一个线程signalThread通过lock.lock()方法获取锁成功后调用了condition.signal或者signalAll方法，使得线程awaitThread能够有机会移入到同步队列中，当其他线程释放lock后使得线程awaitThread能够有机会获取lock，从而使得线程awaitThread能够从await方法中退出执行后续操作。如果awaitThread获取lock失败会直接进入到同步队列")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"_3-一个例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-一个例子"}},[t._v("#")]),t._v(" 3. 一个例子")]),t._v(" "),a("p",[t._v("我们用一个很简单的例子说说condition的用法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('public class AwaitSignal {\n    private static ReentrantLock lock = new ReentrantLock();\n    private static Condition condition = lock.newCondition();\n    private static volatile boolean flag = false;\n\n    public static void main(String[] args) {\n        Thread waiter = new Thread(new waiter());\n        waiter.start();\n        Thread signaler = new Thread(new signaler());\n        signaler.start();\n    }\n\n    static class waiter implements Runnable {\n\n        @Override\n        public void run() {\n            lock.lock();\n            try {\n                while (!flag) {\n                    System.out.println(Thread.currentThread().getName() + "当前条件不满足等待");\n                    try {\n                        condition.await();\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n                System.out.println(Thread.currentThread().getName() + "接收到通知条件满足");\n            } finally {\n                lock.unlock();\n            }\n        }\n    }\n\n    static class signaler implements Runnable {\n\n        @Override\n        public void run() {\n            lock.lock();\n            try {\n                flag = true;\n                condition.signalAll();\n            } finally {\n                lock.unlock();\n            }\n        }\n    }\n}\n')])])]),a("p",[t._v("输出结果为：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Thread-0当前条件不满足等待\nThread-0接收到通知，条件满足\n")])])]),a("p",[t._v("开启了两个线程waiter和signaler，waiter线程开始执行的时候由于条件不满足，执行condition.await方法使该线程进入等待状态同时释放锁，signaler线程获取到锁之后更改条件，并通知所有的等待线程后释放锁。这时，waiter线程获取到锁，并由于signaler线程更改了条件此时相对于waiter来说条件满足，继续执行。")]),t._v(" "),a("p",[t._v("来源于 https://juejin.cn/post/6844903602419400718")])])}),[],!1,null,null,null);n.default=i.exports}}]);