(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{479:function(e,t,n){"use strict";n.r(t);var a=n(30),c=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"spring-boot-集成-memcached"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-集成-memcached"}},[e._v("#")]),e._v(" Spring Boot 集成 Memcached")]),e._v(" "),n("h2",{attrs:{id:"memcached-介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#memcached-介绍"}},[e._v("#")]),e._v(" Memcached 介绍")]),e._v(" "),n("p",[e._v("Memcached 是一个高性能的分布式内存对象缓存系统，用于动态Web应用以减轻数据库负载。它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提高动态、数据库驱动网站的速度。Memcached基于一个存储键/值对的hashmap。其守护进程（daemon ）是用C写的，但是客户端可以用任何语言来编写，并通过memcached协议与守护进程通信。")]),e._v(" "),n("p",[e._v("因为 Spring Boot 没有针对 Memcached 提供对应的组建包，因此需要我们自己来集成。官方推出的 Java 客户端 Spymemcached 是一个比较好的选择之一。")]),e._v(" "),n("p",[n("strong",[e._v("Spymemcached 介绍")])]),e._v(" "),n("p",[e._v("Spymemcached 最早由 Dustin Sallings 开发，Dustin 后来和别人一起创办了 Couchbase (原NorthScale)，职位为首席架构师。2014 加入 Google。")]),e._v(" "),n("p",[e._v("Spymemcached 是一个采用 Java 开发的异步、单线程的 Memcached 客户端， 使用 NIO 实现。Spymemcached 是 Memcached 的一个流行的 Java client 库，性能表现出色，广泛应用于 Java + Memcached 项目中。")]),e._v(" "),n("h2",{attrs:{id:"依赖配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#依赖配置"}},[e._v("#")]),e._v(" 依赖配置")]),e._v(" "),n("p",[n("strong",[e._v("添加依赖")])]),e._v(" "),n("p",[e._v("pomx 包中添加 spymemcached 的引用")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<dependency>\n  <groupId>net.spy</groupId>\n  <artifactId>spymemcached</artifactId>\n  <version>2.12.2</version>\n</dependency>\n")])])]),n("p",[n("strong",[e._v("添加配置")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("memcache.ip=192.168.0.161\nmemcache.port=11211\n")])])]),n("p",[e._v("分别配置 memcache 的 Ip 地址和 端口。")]),e._v(" "),n("p",[n("strong",[e._v("设置配置对象")])]),e._v(" "),n("p",[e._v("创建 "),n("code",[e._v("MemcacheSource")]),e._v(" 接收配置信息")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Component\n@ConfigurationProperties(prefix = "memcache")\npublic class MemcacheSource {\n\n    private String ip;\n\n    private int port;\n\n    public String getIp() {\n        return ip;\n    }\n\n    public void setIp(String ip) {\n        this.ip = ip;\n    }\n\n    public int getPort() {\n        return port;\n    }\n\n    public void setPort(int port) {\n        this.port = port;\n    }\n}\n')])])]),n("p",[n("code",[e._v('@ConfigurationProperties(prefix = "memcache")')]),e._v(" 的意思会以 "),n("code",[e._v("memcache.*")]),e._v(" 为开通将对应的配置文件加载到属性中。")]),e._v(" "),n("h2",{attrs:{id:"启动初始化-memcachedclient"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#启动初始化-memcachedclient"}},[e._v("#")]),e._v(" 启动初始化 MemcachedClient")]),e._v(" "),n("p",[e._v("我们使用上一节的内容"),n("a",{attrs:{href:"http://www.ityouknow.com/springboot/2018/05/03/spring-boot-commandLineRunner.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Spring Boot 2 (七)：Spring Boot 如何解决项目启动时初始化资源"),n("OutboundLink")],1),e._v(",利用 CommandLineRunner 在项目启动的时候配置好 MemcachedClient 。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Component\npublic class MemcachedRunner implements CommandLineRunner {\n    protected Logger logger =  LoggerFactory.getLogger(this.getClass());\n\n    @Resource\n    private  MemcacheSource memcacheSource;\n\n    private MemcachedClient client = null;\n\n    @Override\n    public void run(String... args) throws Exception {\n        try {\n            client = new MemcachedClient(new InetSocketAddress(memcacheSource.getIp(),memcacheSource.getPort()));\n        } catch (IOException e) {\n            logger.error("inint MemcachedClient failed ",e);\n        }\n    }\n\n    public MemcachedClient getClient() {\n        return client;\n    }\n\n}\n')])])]),n("h2",{attrs:{id:"测试使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试使用"}},[e._v("#")]),e._v(" 测试使用")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class RepositoryTests {\n\n  @Resource\n    private MemcachedRunner memcachedRunner;\n\n  @Test\n  public void testSetGet()  {\n    MemcachedClient memcachedClient = memcachedRunner.getClient();\n    memcachedClient.set("testkey",1000,"666666");\n    System.out.println("***********  "+memcachedClient.get("testkey").toString());\n  }\n\n}\n')])])]),n("p",[e._v("使用中先测试插入一个 key 为 testkey ，1000 为过期时间单位为 毫秒，最后的 “666666” 为 key 对应的值。")]),e._v(" "),n("p",[e._v("执行测试用例 testSetGet ，控制台输出内容：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("***********  666666\n")])])])])}),[],!1,null,null,null);t.default=c.exports}}]);