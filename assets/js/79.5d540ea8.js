(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{507:function(n,e,a){"use strict";a.r(e);var t=a(30),o=Object(t.a)({},(function(){var n=this,e=n.$createElement,a=n._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"spring-ioc-容器源码分析-获取单例-bean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-ioc-容器源码分析-获取单例-bean"}},[n._v("#")]),n._v(" Spring IOC 容器源码分析 - 获取单例 bean")]),n._v(" "),a("h2",{attrs:{id:"_1-简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-简介"}},[n._v("#")]),n._v(" 1. 简介")]),n._v(" "),a("p",[n._v("为了写 Spring IOC 容器源码分析系列的文章，我特地写了一篇 Spring IOC 容器的"),a("a",{attrs:{href:"http://www.coolblog.xyz/2018/05/30/Spring-IOC-%E5%AE%B9%E5%99%A8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E5%AF%BC%E8%AF%BB/",target:"_blank",rel:"noopener noreferrer"}},[n._v("导读"),a("OutboundLink")],1),n._v("文章。在导读一文中，我介绍了 Spring 的一些特性以及阅读 Spring 源码的一些建议。在做完必要的准备工作后，从本文开始，正式开始进入源码分析的阶段。")]),n._v(" "),a("p",[n._v("在本篇文章中，我将会详细分析"),a("code",[n._v("BeanFactory")]),n._v("的"),a("code",[n._v("getBean(String)")]),n._v("方法实现细节，"),a("code",[n._v("getBean(String)")]),n._v(" 及所调用的方法总体来说实现上较为复杂，代码长度比较长。作为源码分析文章，本文的文章长度也会比较长，希望大家耐心读下去。")]),n._v(" "),a("p",[n._v("好了，其他的不多说了，进入主题环节吧。")]),n._v(" "),a("h2",{attrs:{id:"_2-源码分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-源码分析"}},[n._v("#")]),n._v(" 2. 源码分析")]),n._v(" "),a("p",[n._v("简单说一下本章的内容安排吧，在本章的开始，也就是2.1节，我将会分析"),a("code",[n._v("getBean(String)")]),n._v("方法整体的实现逻辑。但不会分析它所调用的方法，这些方法将会在后续几节中依次进行分析。那接下来，我们就先来看看 getBean(String) 方法是如何实现的吧。")]),n._v(" "),a("h3",{attrs:{id:"_2-1-俯瞰-getbean-string-源码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-俯瞰-getbean-string-源码"}},[n._v("#")]),n._v(" 2.1 俯瞰 getBean(String) 源码")]),n._v(" "),a("p",[n._v("在本小节，我们先从战略上俯瞰 getBean(String) 方法的实现源码。代码如下：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('public Object getBean(String name) throws BeansException {\n    // getBean 是一个空壳方法，所有的逻辑都封装在 doGetBean 方法中\n    return doGetBean(name, null, null, false);\n}\n\nprotected <T> T doGetBean(\n        final String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly)\n        throws BeansException {\n\n    /*\n     * 通过 name 获取 beanName。这里不使用 name 直接作为 beanName 有两点原因：\n     * 1. name 可能会以 & 字符开头，表明调用者想获取 FactoryBean 本身，而非 FactoryBean \n     *    实现类所创建的 bean。在 BeanFactory 中，FactoryBean 的实现类和其他的 bean 存储\n     *    方式是一致的，即 <beanName, bean>，beanName 中是没有 & 这个字符的。所以我们需要\n     *    将 name 的首字符 & 移除，这样才能从缓存里取到 FactoryBean 实例。\n     * 2. 若 name 是一个别名，则应将别名转换为具体的实例名，也就是 beanName。\n     */\n    final String beanName = transformedBeanName(name);\n    Object bean;\n\n    /*\n     * 从缓存中获取单例 bean。Spring 是使用 Map 作为 beanName 和 bean 实例的缓存的，所以这\n     * 里暂时可以把 getSingleton(beanName) 等价于 beanMap.get(beanName)。当然，实际的\n     * 逻辑并非如此简单，后面再细说。\n     */\n    Object sharedInstance = getSingleton(beanName);\n\n    /*\n     * 如果 sharedInstance = null，则说明缓存里没有对应的实例，表明这个实例还没创建。\n     * BeanFactory 并不会在一开始就将所有的单例 bean 实例化好，而是在调用 getBean 获取 \n     * bean 时再实例化，也就是懒加载。\n     * getBean 方法有很多重载，比如 getBean(String name, Object... args)，我们在首次获取\n     * 某个 bean 时，可以传入用于初始化 bean 的参数数组（args），BeanFactory 会根据这些参数\n     * 去匹配合适的构造方法构造 bean 实例。当然，如果单例 bean 早已创建好，这里的 args 就没有\n     * 用了，BeanFactory 不会多次实例化单例 bean。\n     */\n    if (sharedInstance != null && args == null) {\n        if (logger.isDebugEnabled()) {\n            if (isSingletonCurrentlyInCreation(beanName)) {\n                logger.debug("Returning eagerly cached instance of singleton bean \'" + beanName +\n                        "\' that is not fully initialized yet - a consequence of a circular reference");\n            }\n            else {\n                logger.debug("Returning cached instance of singleton bean \'" + beanName + "\'");\n            }\n        }\n      \n        /*\n         * 如果 sharedInstance 是普通的单例 bean，下面的方法会直接返回。但如果 \n         * sharedInstance 是 FactoryBean 类型的，则需调用 getObject 工厂方法获取真正的 \n         * bean 实例。如果用户想获取 FactoryBean 本身，这里也不会做特别的处理，直接返回\n         * 即可。毕竟 FactoryBean 的实现类本身也是一种 bean，只不过具有一点特殊的功能而已。\n         */\n        bean = getObjectForBeanInstance(sharedInstance, name, beanName, null);\n    }\n    /*\n     * 如果上面的条件不满足，则表明 sharedInstance 可能为空，此时 beanName 对应的 bean \n     * 实例可能还未创建。这里还存在另一种可能，如果当前容器有父容器，beanName 对应的 bean 实例\n     * 可能是在父容器中被创建了，所以在创建实例前，需要先去父容器里检查一下。\n     */\n    else {\n        // BeanFactory 不缓存 Prototype 类型的 bean，无法处理该类型 bean 的循环依赖问题\n        if (isPrototypeCurrentlyInCreation(beanName)) {\n            throw new BeanCurrentlyInCreationException(beanName);\n        }\n\n        // 如果 sharedInstance = null，则到父容器中查找 bean 实例\n        BeanFactory parentBeanFactory = getParentBeanFactory();\n        if (parentBeanFactory != null && !containsBeanDefinition(beanName)) {\n            // 获取 name 对应的 beanName，如果 name 是以 & 字符开头，则返回 & + beanName\n            String nameToLookup = originalBeanName(name);\n            // 根据 args 是否为空，以决定调用父容器哪个方法获取 bean\n            if (args != null) {\n                return (T) parentBeanFactory.getBean(nameToLookup, args);\n            } \n            else {\n                return parentBeanFactory.getBean(nameToLookup, requiredType);\n            }\n        }\n\n        if (!typeCheckOnly) {\n            markBeanAsCreated(beanName);\n        }\n\n        try {\n            // 合并父 BeanDefinition 与子 BeanDefinition，后面会单独分析这个方法\n            final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);\n            checkMergedBeanDefinition(mbd, beanName, args);\n\n            // 检查是否有 dependsOn 依赖，如果有则先初始化所依赖的 bean\n            String[] dependsOn = mbd.getDependsOn();\n            if (dependsOn != null) {\n                for (String dep : dependsOn) {\n                    /*\n                     * 检测是否存在 depends-on 循环依赖，若存在则抛异常。比如 A 依赖 B，\n                     * B 又依赖 A，他们的配置如下：\n                     *   <bean id="beanA" class="BeanA" depends-on="beanB">\n                     *   <bean id="beanB" class="BeanB" depends-on="beanA">\n                     *   \n                     * beanA 要求 beanB 在其之前被创建，但 beanB 又要求 beanA 先于它\n                     * 创建。这个时候形成了循环，对于 depends-on 循环，Spring 会直接\n                     * 抛出异常\n                     */\n                    if (isDependent(beanName, dep)) {\n                        throw new BeanCreationException(mbd.getResourceDescription(), beanName,\n                                "Circular depends-on relationship between \'" + beanName + "\' and \'" + dep + "\'");\n                    }\n                    // 注册依赖记录\n                    registerDependentBean(dep, beanName);\n                    try {\n                        // 加载 depends-on 依赖\n                        getBean(dep);\n                    } \n                    catch (NoSuchBeanDefinitionException ex) {\n                        throw new BeanCreationException(mbd.getResourceDescription(), beanName,\n                                "\'" + beanName + "\' depends on missing bean \'" + dep + "\'", ex);\n                    }\n                }\n            }\n\n            // 创建 bean 实例\n            if (mbd.isSingleton()) {\n                /*\n                 * 这里并没有直接调用 createBean 方法创建 bean 实例，而是通过 \n                 * getSingleton(String, ObjectFactory) 方法获取 bean 实例。\n                 * getSingleton(String, ObjectFactory) 方法会在内部调用 \n                 * ObjectFactory 的 getObject() 方法创建 bean，并会在创建完成后，\n                 * 将 bean 放入缓存中。关于 getSingleton 方法的分析，本文先不展开，我会在\n                 * 后面的文章中进行分析\n                 */\n                sharedInstance = getSingleton(beanName, new ObjectFactory<Object>() {\n                    @Override\n                    public Object getObject() throws BeansException {\n                        try {\n                            // 创建 bean 实例\n                            return createBean(beanName, mbd, args);\n                        }\n                        catch (BeansException ex) {\n                            destroySingleton(beanName);\n                            throw ex;\n                        }\n                    }\n                });\n                // 如果 bean 是 FactoryBean 类型，则调用工厂方法获取真正的 bean 实例。否则直接返回 bean 实例\n                bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);\n            }\n\n            // 创建 prototype 类型的 bean 实例\n            else if (mbd.isPrototype()) {\n                Object prototypeInstance = null;\n                try {\n                    beforePrototypeCreation(beanName);\n                    prototypeInstance = createBean(beanName, mbd, args);\n                }\n                finally {\n                    afterPrototypeCreation(beanName);\n                }\n                bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);\n            }\n\n            // 创建其他类型的 bean 实例\n            else {\n                String scopeName = mbd.getScope();\n                final Scope scope = this.scopes.get(scopeName);\n                if (scope == null) {\n                    throw new IllegalStateException("No Scope registered for scope name \'" + scopeName + "\'");\n                }\n                try {\n                    Object scopedInstance = scope.get(beanName, new ObjectFactory<Object>() {\n                        @Override\n                        public Object getObject() throws BeansException {\n                            beforePrototypeCreation(beanName);\n                            try {\n                                return createBean(beanName, mbd, args);\n                            }\n                            finally {\n                                afterPrototypeCreation(beanName);\n                            }\n                        }\n                    });\n                    bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);\n                }\n                catch (IllegalStateException ex) {\n                    throw new BeanCreationException(beanName,\n                            "Scope \'" + scopeName + "\' is not active for the current thread; consider " +\n                            "defining a scoped proxy for this bean if you intend to refer to it from a singleton",\n                            ex);\n                }\n            }\n        }\n        catch (BeansException ex) {\n            cleanupAfterBeanCreationFailure(beanName);\n            throw ex;\n        }\n    }\n\n    // 如果需要进行类型转换，则在此处进行转换。类型转换这一块我没细看，就不多说了。\n    if (requiredType != null && bean != null && !requiredType.isInstance(bean)) {\n        try {\n            return getTypeConverter().convertIfNecessary(bean, requiredType);\n        }\n        catch (TypeMismatchException ex) {\n            if (logger.isDebugEnabled()) {\n                logger.debug("Failed to convert bean \'" + name + "\' to required type \'" +\n                        ClassUtils.getQualifiedName(requiredType) + "\'", ex);\n            }\n            throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());\n        }\n    }\n\n    // 返回 bean\n    return (T) bean;\n}\n')])])]),a("p",[n._v("以上就是"),a("code",[n._v("getBean(String)")]),n._v("和"),a("code",[n._v("doGetBean(String, Class, Object[], boolean)")]),n._v("两个方法的分析。代码很长，需要一点耐心阅读。为了凸显方法的主逻辑，大家可以对代码进行一定的删减，删除一些日志和异常代码，也可以删除一些不是很重要的逻辑。另外由于 doGetBean 方法调用了其他的很多方法，在看代码的话，经常会忘掉 doGetBean 所调用的方法是怎么实现的。比如 getSingleton 方法出现了两次，但两个方法并不同，在看第二个的 getSingleton 方法时，可能会忘掉第一个 getSingleton 是怎么实现的。另外，如果你想对比两个重载方法的异同，在 IDEA 里跳来跳去也是很不方便。为此，我使用了 sublime 进行分屏，左屏是删减后的 doGetBean 方法，右屏是 doGetBean 调用的一些方法，这样看起来会方便一点。忘了某个方法的实现逻辑后，可以到右屏查看，也可进行对比。分屏效果如下：")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://blog-pictures.oss-cn-shanghai.aliyuncs.com/15277418031580.jpg",alt:"img"}})]),n._v(" "),a("p",[n._v("这里我为了演示，删除了不少东西。大家可以按需进行删减，并配上注释，辅助理解。")]),n._v(" "),a("p",[n._v("看完了源码，下面我来简单总结一下 doGetBean 的执行流程。如下：")]),n._v(" "),a("ol",[a("li",[n._v("转换 beanName")]),n._v(" "),a("li",[n._v("从缓存中获取实例")]),n._v(" "),a("li",[n._v("如果实例不为空，且 args = null。调用 getObjectForBeanInstance 方法，并按 name 规则返回相应的 bean 实例")]),n._v(" "),a("li",[n._v("若上面的条件不成立，则到父容器中查找 beanName 对有的 bean 实例，存在则直接返回")]),n._v(" "),a("li",[n._v("若父容器中不存在，则进行下一步操作 – 合并 BeanDefinition")]),n._v(" "),a("li",[n._v("处理 depends-on 依赖")]),n._v(" "),a("li",[n._v("创建并缓存 bean")]),n._v(" "),a("li",[n._v("调用 getObjectForBeanInstance 方法，并按 name 规则返回相应的 bean 实例")]),n._v(" "),a("li",[n._v("按需转换 bean 类型，并返回转换后的 bean 实例。")])]),n._v(" "),a("p",[n._v("以上步骤对应的流程图如下：")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://blog-pictures.oss-cn-shanghai.aliyuncs.com/15277442845278.jpg",alt:"img"}})]),n._v(" "),a("h3",{attrs:{id:"_2-2-beanname-转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-beanname-转换"}},[n._v("#")]),n._v(" 2.2 beanName 转换")]),n._v(" "),a("p",[n._v("在获取 bean 实例之前，Spring 第一件要做的事情是对参数 name 进行转换。转换的目的主要是为了解决两个问题，第一个是处理以字符 & 开头的 name，防止 BeanFactory 无法找到与 name 对应的 bean 实例。第二个是处理别名问题，Spring 不会存储 <别名, bean 实例> 这种映射，仅会存储 <beanName, bean>。所以，同样是为了避免 BeanFactory 找不到 name 对应的 bean 的实例，对于别名也要进行转换。接下来，我们来简单分析一下转换的过程，如下：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('protected String transformedBeanName(String name) {\n    // 这里调用了两个方法：BeanFactoryUtils.transformedBeanName(name) 和 canonicalName\n    return canonicalName(BeanFactoryUtils.transformedBeanName(name));\n}\n\n/** 该方法用于处理 & 字符 */\npublic static String transformedBeanName(String name) {\n    Assert.notNull(name, "\'name\' must not be null");\n    String beanName = name;\n    // 循环处理 & 字符。比如 name = "&&&&&helloService"，最终会被转成 helloService\n    while (beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX)) {\n        beanName = beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length());\n    }\n    return beanName;\n}\n\n/** 该方法用于转换别名 */\npublic String canonicalName(String name) {\n    String canonicalName = name;\n    String resolvedName;\n    /*\n     * 这里使用 while 循环进行处理，原因是：可能会存在多重别名的问题，即别名指向别名。比如下面\n     * 的配置：\n     *   <bean id="hello" class="service.Hello"/>\n     *   <alias name="hello" alias="aliasA"/>\n     *   <alias name="aliasA" alias="aliasB"/>\n     *\n     * 上面的别名指向关系为 aliasB -> aliasA -> hello，对于上面的别名配置，aliasMap 中数据\n     * 视图为：aliasMap = [<aliasB, aliasA>, <aliasA, hello>]。通过下面的循环解析别名\n     * aliasB 最终指向的 beanName\n     */\n    do {\n        resolvedName = this.aliasMap.get(canonicalName);\n        if (resolvedName != null) {\n                canonicalName = resolvedName;\n        }\n    }\n    while (resolvedName != null);\n    return canonicalName;\n}\n')])])]),a("h3",{attrs:{id:"_2-3-从缓存中获取-bean-实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-从缓存中获取-bean-实例"}},[n._v("#")]),n._v(" 2.3 从缓存中获取 bean 实例")]),n._v(" "),a("p",[n._v("对于单例 bean，Spring 容器只会实例化一次。后续再次获取时，只需直接从缓存里获取即可，无需且不能再次实例化（否则单例就没意义了）。从缓存中取 bean 实例的方法是"),a("code",[n._v("getSingleton(String)")]),n._v("，下面我们就来看看这个方法实现方式吧。如下：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('public Object getSingleton(String beanName) {\n    return getSingleton(beanName, true);\n}\n\n/**\n * 这里解释一下 allowEarlyReference 参数，allowEarlyReference 表示是否允许其他 bean 引用\n * 正在创建中的 bean，用于处理循环引用的问题。关于循环引用，这里先简单介绍一下。先看下面的配置：\n *\n *   <bean id="hello" class="xyz.coolblog.service.Hello">\n *       <property name="world" ref="world"/>\n *   </bean>\n *   <bean id="world" class="xyz.coolblog.service.World">\n *       <property name="hello" ref="hello"/>\n *   </bean>\n * \n * 如上所示，hello 依赖 world，world 又依赖于 hello，他们之间形成了循环依赖。Spring 在构建 \n * hello 这个 bean 时，会检测到它依赖于 world，于是先去实例化 world。实例化 world 时，发现 \n * world 依赖 hello。这个时候容器又要去初始化 hello。由于 hello 已经在初始化进程中了，为了让 \n * world 能完成初始化，这里先让 world 引用正在初始化中的 hello。world 初始化完成后，hello \n * 就可引用到 world 实例，这样 hello 也就能完成初始了。关于循环依赖，我后面会专门写一篇文章讲\n * 解，这里先说这么多。\n */\nprotected Object getSingleton(String beanName, boolean allowEarlyReference) {\n    // 从 singletonObjects 获取实例，singletonObjects 中缓存的实例都是完全实例化好的 bean，可以直接使用\n    Object singletonObject = this.singletonObjects.get(beanName);\n    /*\n     * 如果 singletonObject = null，表明还没创建，或者还没完全创建好。\n     * 这里判断 beanName 对应的 bean 是否正在创建中\n     */\n    if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {\n        synchronized (this.singletonObjects) {\n            // 从 earlySingletonObjects 中获取提前曝光的 bean，用于处理循环引用\n            singletonObject = this.earlySingletonObjects.get(beanName);\n            // 如果如果 singletonObject = null，且允许提前曝光 bean 实例，则从相应的 ObjectFactory 获取一个原始的（raw）bean（尚未填充属性）\n            if (singletonObject == null && allowEarlyReference) {\n                // 获取相应的工厂类\n                ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName);\n                if (singletonFactory != null) {\n                    // 提前曝光 bean 实例，用于解决循环依赖\n                    singletonObject = singletonFactory.getObject();\n                    // 放入缓存中，如果还有其他 bean 依赖当前 bean，其他 bean 可以直接从 earlySingletonObjects 取结果\n                    this.earlySingletonObjects.put(beanName, singletonObject);\n                    this.singletonFactories.remove(beanName);\n                }\n            }\n        }\n    }\n    return (singletonObject != NULL_OBJECT ? singletonObject : null);\n}\n')])])]),a("p",[n._v("上面的代码虽然不长，但是涉及到了好几个缓存集合。如果不知道这些缓存的用途是什么，上面源码可能就很难弄懂了。这几个缓存集合用的很频繁，在后面的代码中还会出现，所以这里介绍一下。如下：")]),n._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[n._v("缓存")]),n._v(" "),a("th",{staticStyle:{"text-align":"left"}},[n._v("用途")])])]),n._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[n._v("singletonObjects")]),n._v(" "),a("td",{staticStyle:{"text-align":"left"}},[n._v("用于存放完全初始化好的 bean，从该缓存中取出的 bean 可以直接使用")])]),n._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[n._v("earlySingletonObjects")]),n._v(" "),a("td",{staticStyle:{"text-align":"left"}},[n._v("用于存放还在初始化中的 bean，用于解决循环依赖")])]),n._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[n._v("singletonFactories")]),n._v(" "),a("td",{staticStyle:{"text-align":"left"}},[n._v("用于存放 bean 工厂。bean 工厂所产生的 bean 是还未完成初始化的 bean。如代码所示，bean 工厂所生成的对象最终会被缓存到 earlySingletonObjects 中")])])])]),n._v(" "),a("p",[n._v("关于 getSingleton 先说到这里，getSingleton 源码并不多。但涉及到了循环依赖的相关逻辑，如果对这一块不理解可能不知道代码所云。等后面分析循环依赖的时候，我会再次分析这个方法，所以暂时不理解也没关系。")]),n._v(" "),a("h3",{attrs:{id:"_2-4-合并父-beandefinition-与子-beandefinition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-合并父-beandefinition-与子-beandefinition"}},[n._v("#")]),n._v(" 2.4 合并父 BeanDefinition 与子 BeanDefinition")]),n._v(" "),a("p",[n._v("Spring 支持配置继承，在标签中可以使用"),a("code",[n._v("parent")]),n._v("属性配置父类 bean。这样子类 bean 可以继承父类 bean 的配置信息，同时也可覆盖父类中的配置。比如下面的配置：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('<bean id="hello" class="xyz.coolblog.innerbean.Hello">\n    <property name="content" value="hello"/>\n</bean>\n\n<bean id="hello-child" parent="hello">\n    <property name="content" value="I`m hello-child"/>\n</bean>\n')])])]),a("p",[n._v("如上所示，hello-child 配置继承自 hello。hello-child 未配置 class 属性，这里我们让它继承父配置中的 class 属性。然后我们写点代码测试一下，如下：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('String configLocation = "application-parent-bean.xml";\nApplicationContext applicationContext = new ClassPathXmlApplicationContext(configLocation);\nSystem.out.println("hello -> " + applicationContext.getBean("hello"));\nSystem.out.println("hello-child -> " + applicationContext.getBean("hello-child"));\n')])])]),a("p",[n._v("测试结果如下：\n"),a("img",{attrs:{src:"https://blog-pictures.oss-cn-shanghai.aliyuncs.com/15277804169135.jpg",alt:"img"}})]),n._v(" "),a("p",[n._v("由测试结果可以看出，hello-child 在未配置 class 的属性下也实例化成功了，表明它成功继承了父配置的 class 属性。")]),n._v(" "),a("p",[n._v("看完代码演示，接下来我们来看看源码吧。如下：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('protected RootBeanDefinition getMergedLocalBeanDefinition(String beanName) throws BeansException {\n    // 检查缓存中是否存在“已合并的 BeanDefinition”，若有直接返回即可\n    RootBeanDefinition mbd = this.mergedBeanDefinitions.get(beanName);\n    if (mbd != null) {\n        return mbd;\n    }\n    // 调用重载方法\n    return getMergedBeanDefinition(beanName, getBeanDefinition(beanName));\n}\n\nprotected RootBeanDefinition getMergedBeanDefinition(String beanName, BeanDefinition bd)\n        throws BeanDefinitionStoreException {\n    // 继续调用重载方法\n    return getMergedBeanDefinition(beanName, bd, null);\n}\n\nprotected RootBeanDefinition getMergedBeanDefinition(\n        String beanName, BeanDefinition bd, BeanDefinition containingBd)\n        throws BeanDefinitionStoreException {\n\n    synchronized (this.mergedBeanDefinitions) {\n        RootBeanDefinition mbd = null;\n\n        // 我暂时还没去详细了解 containingBd 的用途，尽管从方法的注释上可以知道 containingBd 的大致用途，但没经过详细分析，就不多说了。见谅\n        if (containingBd == null) {\n            mbd = this.mergedBeanDefinitions.get(beanName);\n        }\n\n        if (mbd == null) {\n            // bd.getParentName() == null，表明无父配置，这时直接将当前的 BeanDefinition 升级为 RootBeanDefinition\n            if (bd.getParentName() == null) {\n                if (bd instanceof RootBeanDefinition) {\n                    mbd = ((RootBeanDefinition) bd).cloneBeanDefinition();\n                }\n                else {\n                    mbd = new RootBeanDefinition(bd);\n                }\n            }\n            else {\n                BeanDefinition pbd;\n                try {\n                    String parentBeanName = transformedBeanName(bd.getParentName());\n                    /*\n                     * 判断父类 beanName 与子类 beanName 名称是否相同。若相同，则父类 bean 一定\n                     * 在父容器中。原因也很简单，容器底层是用 Map 缓存 <beanName, bean> 键值对\n                     * 的。同一个容器下，使用同一个 beanName 映射两个 bean 实例显然是不合适的。\n                     * 有的朋友可能会觉得可以这样存储：<beanName, [bean1, bean2]> ，似乎解决了\n                     * 一对多的问题。但是也有问题，调用 getName(beanName) 时，到底返回哪个 bean \n                     * 实例好呢？\n                     */\n                    if (!beanName.equals(parentBeanName)) {\n                        /*\n                         * 这里再次调用 getMergedBeanDefinition，只不过参数值变为了 \n                         * parentBeanName，用于合并父 BeanDefinition 和爷爷辈的 \n                         * BeanDefinition。如果爷爷辈的 BeanDefinition 仍有父 \n                         * BeanDefinition，则继续合并\n                         */\n                        pbd = getMergedBeanDefinition(parentBeanName);\n                    }\n                    else {\n                        // 获取父容器，并判断，父容器的类型，若不是 ConfigurableBeanFactory 则判抛出异常\n                        BeanFactory parent = getParentBeanFactory();\n                        if (parent instanceof ConfigurableBeanFactory) {\n                            pbd = ((ConfigurableBeanFactory) parent).getMergedBeanDefinition(parentBeanName);\n                        }\n                        else {\n                            throw new NoSuchBeanDefinitionException(parentBeanName,\n                                    "Parent name \'" + parentBeanName + "\' is equal to bean name \'" + beanName +\n                                    "\': cannot be resolved without an AbstractBeanFactory parent");\n                        }\n                    }\n                }\n                catch (NoSuchBeanDefinitionException ex) {\n                    throw new BeanDefinitionStoreException(bd.getResourceDescription(), beanName,\n                            "Could not resolve parent bean definition \'" + bd.getParentName() + "\'", ex);\n                }\n                // 以父 BeanDefinition 的配置信息为蓝本创建 RootBeanDefinition，也就是“已合并的 BeanDefinition”\n                mbd = new RootBeanDefinition(pbd);\n                // 用子 BeanDefinition 中的属性覆盖父 BeanDefinition 中的属性\n                mbd.overrideFrom(bd);\n            }\n\n            // 如果用户未配置 scope 属性，则默认将该属性配置为 singleton\n            if (!StringUtils.hasLength(mbd.getScope())) {\n                mbd.setScope(RootBeanDefinition.SCOPE_SINGLETON);\n            }\n\n            if (containingBd != null && !containingBd.isSingleton() && mbd.isSingleton()) {\n                mbd.setScope(containingBd.getScope());\n            }\n\n            if (containingBd == null && isCacheBeanMetadata()) {\n                // 缓存合并后的 BeanDefinition\n                this.mergedBeanDefinitions.put(beanName, mbd);\n            }\n        }\n\n        return mbd;\n    }\n}\n')])])]),a("p",[n._v("上面的源码虽然有点长，但好在逻辑不是很复杂。加上我在源码里进行了比较详细的注解，我想耐心看一下还是可以看懂的，这里就不多说了。")]),n._v(" "),a("h3",{attrs:{id:"_2-5-从-factorybean-中获取-bean-实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-从-factorybean-中获取-bean-实例"}},[n._v("#")]),n._v(" 2.5 从 FactoryBean 中获取 bean 实例")]),n._v(" "),a("p",[n._v("在经过前面这么多的步骤处理后，到这里差不多就接近 doGetBean 方法的尾声了。在本节中，我们来看看从 FactoryBean 实现类中获取 bean 实例的过程。关于 FactoryBean 的用法，我在"),a("a",{attrs:{href:"http://www.coolblog.xyz/2018/05/30/Spring-IOC-%E5%AE%B9%E5%99%A8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E5%AF%BC%E8%AF%BB/",target:"_blank",rel:"noopener noreferrer"}},[n._v("导读"),a("OutboundLink")],1),n._v("那篇文章中已经演示过，这里就不再次说明了。那接下来，我们直入主题吧，相关的源码如下：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('protected Object getObjectForBeanInstance(\n        Object beanInstance, String name, String beanName, RootBeanDefinition mbd) {\n\n    // 如果 name 以 & 开头，但 beanInstance 却不是 FactoryBean，则认为有问题。\n    if (BeanFactoryUtils.isFactoryDereference(name) && !(beanInstance instanceof FactoryBean)) {\n        throw new BeanIsNotAFactoryException(transformedBeanName(name), beanInstance.getClass());\n    }\n\n    /* \n     * 如果上面的判断通过了，表明 beanInstance 可能是一个普通的 bean，也可能是一个 \n     * FactoryBean。如果是一个普通的 bean，这里直接返回 beanInstance 即可。如果是 \n     * FactoryBean，则要调用工厂方法生成一个 bean 实例。\n     */\n    if (!(beanInstance instanceof FactoryBean) || BeanFactoryUtils.isFactoryDereference(name)) {\n        return beanInstance;\n    }\n\n    Object object = null;\n    if (mbd == null) {\n        /*\n         * 如果 mbd 为空，则从缓存中加载 bean。FactoryBean 生成的单例 bean 会被缓存\n         * 在 factoryBeanObjectCache 集合中，不用每次都创建\n         */\n        object = getCachedObjectForFactoryBean(beanName);\n    }\n    if (object == null) {\n        // 经过前面的判断，到这里可以保证 beanInstance 是 FactoryBean 类型的，所以可以进行类型转换\n        FactoryBean<?> factory = (FactoryBean<?>) beanInstance;\n        // 如果 mbd 为空，则判断是否存在名字为 beanName 的 BeanDefinition\n        if (mbd == null && containsBeanDefinition(beanName)) {\n            // 合并 BeanDefinition\n            mbd = getMergedLocalBeanDefinition(beanName);\n        }\n        // synthetic 字面意思是"合成的"。通过全局查找，我发现在 AOP 相关的类中会将该属性设为 true。\n        // 所以我觉得该字段可能表示某个 bean 是不是被 AOP 增强过，也就是 AOP 基于原始类合成了一个新的代理类。\n        // 不过目前只是猜测，没有深究。如果有朋友知道这个字段的具体意义，还望不吝赐教\n        boolean synthetic = (mbd != null && mbd.isSynthetic());\n\n        // 调用 getObjectFromFactoryBean 方法继续获取实例\n        object = getObjectFromFactoryBean(factory, beanName, !synthetic);\n    }\n    return object;\n}\n\nprotected Object getObjectFromFactoryBean(FactoryBean<?> factory, String beanName, boolean shouldPostProcess) {\n    /*\n     * FactoryBean 也有单例和非单例之分，针对不同类型的 FactoryBean，这里有两种处理方式：\n     *   1. 单例 FactoryBean 生成的 bean 实例也认为是单例类型。需放入缓存中，供后续重复使用\n     *   2. 非单例 FactoryBean 生成的 bean 实例则不会被放入缓存中，每次都会创建新的实例\n     */\n    if (factory.isSingleton() && containsSingleton(beanName)) {\n        synchronized (getSingletonMutex()) {\n            // 从缓存中取 bean 实例，避免多次创建 bean 实例\n            Object object = this.factoryBeanObjectCache.get(beanName);\n            if (object == null) {\n                // 使用工厂对象中创建实例\n                object = doGetObjectFromFactoryBean(factory, beanName);\n                Object alreadyThere = this.factoryBeanObjectCache.get(beanName);\n                if (alreadyThere != null) {\n                    object = alreadyThere;\n                }\n                else {\n                    // shouldPostProcess 等价于上一个方法中的 !synthetic，用于表示是否应用后置处理\n                    if (object != null && shouldPostProcess) {\n                        if (isSingletonCurrentlyInCreation(beanName)) {\n                            return object;\n                        }\n                        beforeSingletonCreation(beanName);\n                        try {\n                            // 应用后置处理\n                            object = postProcessObjectFromFactoryBean(object, beanName);\n                        }\n                        catch (Throwable ex) {\n                            throw new BeanCreationException(beanName,\n                                    "Post-processing of FactoryBean\'s singleton object failed", ex);\n                        }\n                        finally {\n                            afterSingletonCreation(beanName);\n                        }\n                    }\n                    // 这里的 beanName 对应于 FactoryBean 的实现类， FactoryBean 的实现类也会被实例化，并被缓存在 singletonObjects 中\n                    if (containsSingleton(beanName)) {\n                        // FactoryBean 所创建的实例会被缓存在 factoryBeanObjectCache 中，供后续调用使用\n                        this.factoryBeanObjectCache.put(beanName, (object != null ? object : NULL_OBJECT));\n                    }\n                }\n            }\n            return (object != NULL_OBJECT ? object : null);\n        }\n    }\n    // 获取非单例实例\n    else {\n        // 从工厂类中获取实例\n        Object object = doGetObjectFromFactoryBean(factory, beanName);\n        if (object != null && shouldPostProcess) {\n            try {\n                // 应用后置处理\n                object = postProcessObjectFromFactoryBean(object, beanName);\n            }\n            catch (Throwable ex) {\n                throw new BeanCreationException(beanName, "Post-processing of FactoryBean\'s object failed", ex);\n            }\n        }\n        return object;\n    }\n}\n\nprivate Object doGetObjectFromFactoryBean(final FactoryBean<?> factory, final String beanName)\n        throws BeanCreationException {\n\n    Object object;\n    try {\n        // if 分支的逻辑是 Java 安全方面的代码，可以忽略，直接看 else 分支的代码\n        if (System.getSecurityManager() != null) {\n            AccessControlContext acc = getAccessControlContext();\n            try {\n                object = AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {\n                    @Override\n                    public Object run() throws Exception {\n                            return factory.getObject();\n                        }\n                    }, acc);\n            }\n            catch (PrivilegedActionException pae) {\n                throw pae.getException();\n            }\n        }\n        else {\n            // 调用工厂方法生成 bean 实例\n            object = factory.getObject();\n        }\n    }\n    catch (FactoryBeanNotInitializedException ex) {\n        throw new BeanCurrentlyInCreationException(beanName, ex.toString());\n    }\n    catch (Throwable ex) {\n        throw new BeanCreationException(beanName, "FactoryBean threw exception on object creation", ex);\n    }\n\n    if (object == null && isSingletonCurrentlyInCreation(beanName)) {\n        throw new BeanCurrentlyInCreationException(\n                beanName, "FactoryBean which is currently in creation returned null from getObject");\n    }\n    return object;\n}\n')])])]),a("p",[n._v("上面的源码分析完了，代码虽长，但整体逻辑不是很复杂，这里简单总结一下。getObjectForBeanInstance 及它所调用的方法主要做了如下几件事情：")]),n._v(" "),a("ol",[a("li",[n._v("检测参数 beanInstance 的类型，如果是非 FactoryBean 类型的 bean，直接返回")]),n._v(" "),a("li",[n._v("检测 FactoryBean 实现类是否单例类型，针对单例和非单例类型进行不同处理")]),n._v(" "),a("li",[n._v("对于单例 FactoryBean，先从缓存里获取 FactoryBean 生成的实例")]),n._v(" "),a("li",[n._v("若缓存未命中，则调用 FactoryBean.getObject() 方法生成实例，并放入缓存中")]),n._v(" "),a("li",[n._v("对于非单例的 FactoryBean，每次直接创建新的实例即可，无需缓存")]),n._v(" "),a("li",[n._v("如果 shouldPostProcess = true，不管是单例还是非单例 FactoryBean 生成的实例，都要进行后置处理")])])])}),[],!1,null,null,null);e.default=o.exports}}]);