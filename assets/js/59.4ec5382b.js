(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{488:function(e,s,n){"use strict";n.r(s);var t=n(30),a=Object(t.a)({},(function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"spring-boot-中-redis-的使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-中-redis-的使用"}},[e._v("#")]),e._v(" Spring Boot 中 Redis 的使用")]),e._v(" "),n("h2",{attrs:{id:"redis-介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis-介绍"}},[e._v("#")]),e._v(" Redis 介绍")]),e._v(" "),n("p",[e._v("Redis 是目前业界使用最广泛的内存数据存储。相比 Memcached，Redis 支持更丰富的数据结构，例如 hashes, lists, sets 等，同时支持数据持久化。除此之外，Redis 还提供一些类数据库的特性，比如事务，HA，主从库。可以说 Redis 兼具了缓存系统和数据库的一些特性，因此有着丰富的应用场景。本文介绍 Redis 在 Spring Boot 中两个典型的应用场景。")]),e._v(" "),n("h2",{attrs:{id:"如何使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何使用"}},[e._v("#")]),e._v(" 如何使用")]),e._v(" "),n("p",[e._v("1、"),n("strong",[e._v("引入依赖包")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.apache.commons</groupId>\n    <artifactId>commons-pool2</artifactId>\n</dependency>\n")])])]),n("p",[e._v("Spring Boot 提供了对 Redis 集成的组件包："),n("code",[e._v("spring-boot-starter-data-redis")]),e._v("，"),n("code",[e._v("spring-boot-starter-data-redis")]),e._v("依赖于"),n("code",[e._v("spring-data-redis")]),e._v(" 和 "),n("code",[e._v("lettuce")]),e._v(" 。Spring Boot 1.0 默认使用的是 Jedis 客户端，2.0 替换成 Lettuce，但如果你从 Spring Boot 1.5.X 切换过来，几乎感受不大差异，这是因为 "),n("code",[e._v("spring-boot-starter-data-redis")]),e._v(" 为我们隔离了其中的差异性。")]),e._v(" "),n("p",[e._v("Lettuce 是一个可伸缩线程安全的 Redis 客户端，多个线程可以共享同一个 RedisConnection，它利用优秀 netty NIO 框架来高效地管理多个连接。")]),e._v(" "),n("p",[e._v("2、"),n("strong",[e._v("添加配置文件")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("# Redis数据库索引（默认为0）\nspring.redis.database=0  \n# Redis服务器地址\nspring.redis.host=localhost\n# Redis服务器连接端口\nspring.redis.port=6379  \n# Redis服务器连接密码（默认为空）\nspring.redis.password=\n# 连接池最大连接数（使用负值表示没有限制） 默认 8\nspring.redis.lettuce.pool.max-active=8\n# 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1\nspring.redis.lettuce.pool.max-wait=-1\n# 连接池中的最大空闲连接 默认 8\nspring.redis.lettuce.pool.max-idle=8\n# 连接池中的最小空闲连接 默认 0\nspring.redis.lettuce.pool.min-idle=0\n")])])]),n("p",[e._v("3、"),n("strong",[e._v("添加 cache 的配置类")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Configuration\n@EnableCaching\npublic class RedisConfig extends CachingConfigurerSupport{\n    \n    @Bean\n    public KeyGenerator keyGenerator() {\n        return new KeyGenerator() {\n            @Override\n            public Object generate(Object target, Method method, Object... params) {\n                StringBuilder sb = new StringBuilder();\n                sb.append(target.getClass().getName());\n                sb.append(method.getName());\n                for (Object obj : params) {\n                    sb.append(obj.toString());\n                }\n                return sb.toString();\n            }\n        };\n    }\n}\n")])])]),n("p",[e._v("注意我们使用了注解："),n("code",[e._v("@EnableCaching")]),e._v("来开启缓存。")]),e._v(" "),n("p",[e._v("3、"),n("strong",[e._v("好了，接下来就可以直接使用了")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class TestRedis {\n    @Autowired\n    private StringRedisTemplate stringRedisTemplate;\n    @Autowired\n    private RedisTemplate redisTemplate;\n\n    @Test\n    public void test() throws Exception {\n        stringRedisTemplate.opsForValue().set("aaa", "111");\n        Assert.assertEquals("111", stringRedisTemplate.opsForValue().get("aaa"));\n    }\n    \n    @Test\n    public void testObj() throws Exception {\n        User user=new User("aa@126.com", "aa", "aa123456", "aa","123");\n        ValueOperations<String, User> operations=redisTemplate.opsForValue();\n        operations.set("com.neox", user);\n        operations.set("com.neo.f", user,1, TimeUnit.SECONDS);\n        Thread.sleep(1000);\n        //redisTemplate.delete("com.neo.f");\n        boolean exists=redisTemplate.hasKey("com.neo.f");\n        if(exists){\n            System.out.println("exists is true");\n        }else{\n            System.out.println("exists is false");\n        }\n       // Assert.assertEquals("aa", operations.get("com.neo.f").getUserName());\n    }\n}\n')])])]),n("p",[e._v("以上都是手动使用的方式，如何在查找数据库的时候自动使用缓存呢，看下面；")]),e._v(" "),n("p",[e._v("4、"),n("strong",[e._v("自动根据方法生成缓存")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@RestController\npublic class UserController {\n\n    @RequestMapping("/getUser")\n    @Cacheable(value="user-key")\n    public User getUser() {\n        User user=new User("aa@126.com", "aa", "aa123456", "aa","123");\n        System.out.println("若下面没出现“无缓存的时候调用”字样且能打印出数据表示测试成功");\n        return user;\n    }\n}\n')])])]),n("p",[e._v("其中 value 的值就是缓存到 Redis 中的 key")]),e._v(" "),n("h2",{attrs:{id:"共享-session"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#共享-session"}},[e._v("#")]),e._v(" 共享 Session")]),e._v(" "),n("p",[e._v("分布式系统中，Session 共享有很多的解决方案，其中托管到缓存中应该是最常用的方案之一，")]),e._v(" "),n("h3",{attrs:{id:"spring-session-官方说明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#spring-session-官方说明"}},[e._v("#")]),e._v(" Spring Session 官方说明")]),e._v(" "),n("p",[e._v("Spring Session provides an API and implementations for managing a user’s session information.")]),e._v(" "),n("p",[e._v("Spring Session 提供了一套创建和管理 Servlet HttpSession 的方案。Spring Session 提供了集群 Session（Clustered Sessions）功能，默认采用外置的 Redis 来存储 Session 数据，以此来解决 Session 共享的问题。")]),e._v(" "),n("h3",{attrs:{id:"如何使用-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何使用-2"}},[e._v("#")]),e._v(" 如何使用")]),e._v(" "),n("p",[e._v("1、"),n("strong",[e._v("引入依赖")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<dependency>\n    <groupId>org.springframework.session</groupId>\n    <artifactId>spring-session-data-redis</artifactId>\n</dependency>\n")])])]),n("p",[e._v("2、"),n("strong",[e._v("Session 配置：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Configuration\n@EnableRedisHttpSession(maxInactiveIntervalInSeconds = 86400*30)\npublic class SessionConfig {\n}\n")])])]),n("blockquote",[n("p",[e._v("maxInactiveIntervalInSeconds: 设置 Session 失效时间，使用 Redis Session 之后，原 Spring Boot 的 server.session.timeout 属性不再生效。")])]),e._v(" "),n("p",[e._v("好了，这样就配置好了，我们来测试一下")]),e._v(" "),n("p",[e._v("3、"),n("strong",[e._v("测试")])]),e._v(" "),n("p",[e._v("添加测试方法获取 sessionid")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@RequestMapping("/uid")\nString uid(HttpSession session) {\n    UUID uid = (UUID) session.getAttribute("uid");\n    if (uid == null) {\n        uid = UUID.randomUUID();\n    }\n    session.setAttribute("uid", uid);\n    return session.getId();\n}\n')])])]),n("p",[e._v("登录 Redis 输入 "),n("code",[e._v("keys '*sessions*'")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("t<spring:session:sessions:db031986-8ecc-48d6-b471-b137a3ed6bc4\nt(spring:session:expirations:1472976480000\n")])])]),n("p",[e._v("其中 1472976480000 为失效时间，意思是这个时间后 Session 失效，"),n("code",[e._v("db031986-8ecc-48d6-b471-b137a3ed6bc4")]),e._v(" 为 sessionId,登录 http://localhost:8080/uid 发现会一致，就说明 Session 已经在 Redis 里面进行有效的管理了。")]),e._v(" "),n("h3",{attrs:{id:"如何在两台或者多台中共享-session"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何在两台或者多台中共享-session"}},[e._v("#")]),e._v(" 如何在两台或者多台中共享 Session")]),e._v(" "),n("p",[e._v("其实就是按照上面的步骤在另一个项目中再次配置一次，启动后自动就进行了 Session 共享。")])])}),[],!1,null,null,null);s.default=a.exports}}]);