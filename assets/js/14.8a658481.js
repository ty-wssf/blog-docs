(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{444:function(e,a,r){"use strict";r.r(a);var s=r(30),t=Object(s.a)({},(function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"docker-三剑客之-docker-swarm"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker-三剑客之-docker-swarm"}},[e._v("#")]),e._v(" Docker 三剑客之 Docker Swarm")]),e._v(" "),r("p",[e._v("实践中会发现，生产环境中使用单个 Docker 节点是远远不够的，搭建 Docker 集群势在必行。然而，面对 Kubernetes, Mesos 以及 Swarm 等众多容器集群系统，我们该如何选择呢？它们之中，Swarm 是 Docker 原生的，同时也是最简单，最易学，最节省资源的，比较适合中小型公司使用。")]),e._v(" "),r("h2",{attrs:{id:"docker-swarm-介绍"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker-swarm-介绍"}},[e._v("#")]),e._v(" Docker Swarm 介绍")]),e._v(" "),r("p",[e._v("Swarm 在 Docker 1.12 版本之前属于一个独立的项目，在 Docker 1.12 版本发布之后，该项目合并到了 Docker 中，成为 Docker 的一个子命令。目前，Swarm 是 Docker 社区提供的唯一一个原生支持 Docker 集群管理的工具。它可以把多个 Docker 主机组成的系统转换为单一的虚拟 Docker 主机，使得容器可以组成跨主机的子网网络。")]),e._v(" "),r("p",[e._v("Docker Swarm 是一个为 IT 运维团队提供集群和调度能力的编排工具。用户可以把集群中所有 Docker Engine 整合进一个「虚拟 Engine」的资源池，通过执行命令与单一的主 Swarm 进行沟通，而不必分别和每个 Docker Engine 沟通。在灵活的调度策略下，IT 团队可以更好地管理可用的主机资源，保证应用容器的高效运行。")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://gitee.com/wuyilong/picture-bed/raw/master/img/swarmcluster.png",alt:"img"}})]),e._v(" "),r("h2",{attrs:{id:"docker-swarm-优点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker-swarm-优点"}},[e._v("#")]),e._v(" Docker Swarm 优点")]),e._v(" "),r("p",[r("strong",[e._v("任何规模都有高性能表现")])]),e._v(" "),r("p",[e._v("对于企业级的 Docker Engine 集群和容器调度而言，可拓展性是关键。任何规模的公司——不论是拥有五个还是上千个服务器——都能在其环境下有效使用 Swarm。 经过测试，Swarm 可拓展性的极限是在 1000 个节点上运行 50000 个部署容器，每个容器的启动时间为亚秒级，同时性能无减损。")]),e._v(" "),r("p",[r("strong",[e._v("灵活的容器调度")])]),e._v(" "),r("p",[e._v("Swarm 帮助 IT 运维团队在有限条件下将性能表现和资源利用最优化。Swarm 的内置调度器（scheduler）支持多种过滤器，包括：节点标签，亲和性和多种容器部策略如 binpack、spread、random 等等。")]),e._v(" "),r("p",[r("strong",[e._v("服务的持续可用性")])]),e._v(" "),r("p",[e._v("Docker Swarm 由 Swarm Manager 提供高可用性，通过创建多个 Swarm master 节点和制定主 master 节点宕机时的备选策略。如果一个 master 节点宕机，那么一个 slave 节点就会被升格为 master 节点，直到原来的 master 节点恢复正常。 此外，如果某个节点无法加入集群，Swarm 会继续尝试加入，并提供错误警报和日志。在节点出错时，Swarm 现在可以尝试把容器重新调度到正常的节点上去。")]),e._v(" "),r("p",[r("strong",[e._v("和 Docker API 及整合支持的兼容性")]),e._v(" Swarm 对 Docker API 完全支持，这意味着它能为使用不同 Docker 工具（如 Docker CLI，Compose，Trusted Registry，Hub 和 UCP）的用户提供无缝衔接的使用体验。")]),e._v(" "),r("p",[e._v("**Docker Swarm 为 Docker 化应用的核心功能（诸如多主机网络和存储卷管理）提供原生支持。**开发的 Compose 文件能（通过 docker-compose up ）轻易地部署到测试服务器或 Swarm 集群上。Docker Swarm 还可以从 Docker Trusted Registry 或 Hub 里 pull 并 run 镜像。")]),e._v(" "),r("p",[r("strong",[e._v("综上所述，Docker Swarm 提供了一套高可用 Docker 集群管理的解决方案，完全支持标准的 Docker API，方便管理调度集群 Docker 容器，合理充分利用集群主机资源")]),e._v("。")]),e._v(" "),r("blockquote",[r("p",[e._v("** 并非所有服务都应该部署在Swarm集群内。数据库以及其它有状态服务就不适合部署在Swarm集群内。**")])]),e._v(" "),r("h2",{attrs:{id:"相关概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#相关概念"}},[e._v("#")]),e._v(" 相关概念")]),e._v(" "),r("h3",{attrs:{id:"节点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#节点"}},[e._v("#")]),e._v(" 节点")]),e._v(" "),r("p",[e._v("运行 Docker 的主机可以主动初始化一个 Swarm 集群或者加入一个已存在的 Swarm 集群，这样这个运行 Docker 的主机就成为一个 Swarm 集群的节点 (node) 。节点分为管理 (manager) 节点和工作 (worker) 节点。")]),e._v(" "),r("p",[e._v("管理节点用于 Swarm 集群的管理，docker swarm 命令基本只能在管理节点执行（节点退出集群命令 docker swarm leave 可以在工作节点执行）。一个 Swarm 集群可以有多个管理节点，但只有一个管理节点可以成为 leader，leader 通过 raft 协议实现。")]),e._v(" "),r("p",[e._v("工作节点是任务执行节点，管理节点将服务 (service) 下发至工作节点执行。管理节点默认也作为工作节点。你也可以通过配置让服务只运行在管理节点。下图展示了集群中管理节点与工作节点的关系。")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://gitee.com/wuyilong/picture-bed/raw/master/img/swarm_manager_worker.png",alt:"img"}})]),e._v(" "),r("h3",{attrs:{id:"服务和任务"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#服务和任务"}},[e._v("#")]),e._v(" 服务和任务")]),e._v(" "),r("p",[e._v("任务 （Task）是 Swarm 中的最小的调度单位，目前来说就是一个单一的容器。 服务 （Services） 是指一组任务的集合，服务定义了任务的属性。服务有两种模式：")]),e._v(" "),r("ul",[r("li",[e._v("replicated services 按照一定规则在各个工作节点上运行指定个数的任务。")]),e._v(" "),r("li",[e._v("global services 每个工作节点上运行一个任务")])]),e._v(" "),r("p",[e._v("两种模式通过 docker service create 的 –mode 参数指定。下图展示了容器、任务、服务的关系。")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://gitee.com/wuyilong/picture-bed/raw/master/img/swarm_services.png",alt:"img"}})]),e._v(" "),r("h3",{attrs:{id:"创建-swarm-集群"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建-swarm-集群"}},[e._v("#")]),e._v(" 创建 Swarm 集群")]),e._v(" "),r("p",[e._v("我们知道 Swarm 集群由管理节点和工作节点组成。我们来创建一个包含一个管理节点和两个工作节点的最小 Swarm 集群。")]),e._v(" "),r("h3",{attrs:{id:"初始化集群"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#初始化集群"}},[e._v("#")]),e._v(" 初始化集群")]),e._v(" "),r("p",[e._v("查看虚拟主机，现在没有")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker-machine ls\nNAME   ACTIVE   DRIVER   STATE   URL   SWARM   DOCKER   ERRORS\n")])])]),r("p",[e._v("使用 virtualbox 创建管理节点")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker-machine create --driver virtualbox manager1\n#进入管理节点\ndocker-machine ssh manager1\n")])])]),r("blockquote",[r("p",[e._v("执行 sudo -i 可以进入Root 权限")])]),e._v(" "),r("p",[e._v("我们使用 docker swarm init 在 manager1 初始化一个 Swarm 集群。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker@manager1:~$ docker swarm init --advertise-addr 192.168.99.100\nSwarm initialized: current node (j0o7sykkvi86xpc00w71ew5b6) is now a manager.\n\nTo add a worker to this swarm, run the following command:\n\n    docker swarm join --token SWMTKN-1-47z6jld2o465z30dl7pie2kqe4oyug4fxdtbgkfjqgybsy4esl-8r55lxhxs7ozfil45gedd5b8a 192.168.99.100:2377\n\nTo add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.\n")])])]),r("p",[e._v("如果你的 Docker 主机有多个网卡，拥有多个 IP，必须使用 –advertise-addr 指定 IP。 执行 docker swarm init 命令的节点自动成为管理节点。")]),e._v(" "),r("p",[e._v("命令 "),r("code",[e._v("docker info")]),e._v(" 可以查看 swarm 集群状态:")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("Containers: 0\nRunning: 0\nPaused: 0\nStopped: 0\n  ...snip...\nSwarm: active\n  NodeID: dxn1zf6l61qsb1josjja83ngz\n  Is Manager: true\n  Managers: 1\n  Nodes: 1\n  ...snip...\n")])])]),r("p",[e._v("命令 "),r("code",[e._v("docker node ls")]),e._v(" 可以查看集群节点信息:")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker@manager1:~$ docker node ls\nID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS\n1ipck4z2uuwf11f4b9mnon2ul *   manager1            Ready               Active              Leader\n")])])]),r("p",[e._v("退出虚拟主机")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker@manager1:~$ exit \n")])])]),r("h3",{attrs:{id:"增加工作节点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#增加工作节点"}},[e._v("#")]),e._v(" 增加工作节点")]),e._v(" "),r("p",[e._v("上一步初始化了一个 Swarm 集群，拥有了一个管理节点，在 Docker Machine 一节中我们了解到 Docker Machine 可以在数秒内创建一个虚拟的 Docker 主机，下面我们使用它来创建两个 Docker 主机，并加入到集群中。")]),e._v(" "),r("p",[r("strong",[e._v("创建虚拟主机 worker1")])]),e._v(" "),r("p",[e._v("创建主机")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("$ docker-machine create -d virtualbox worker1\n")])])]),r("p",[e._v("进入虚拟主机 worker1")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("$ docker-machine ssh worker1\n")])])]),r("p",[e._v("加入 swarm 集群")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker@worker1:~$ docker swarm join \\\n    --token SWMTKN-1-47z6jld2o465z30dl7pie2kqe4oyug4fxdtbgkfjqgybsy4esl-8r55lxhxs7ozfil45gedd5b8a \\\n    192.168.99.100:2377\n\nThis node joined a swarm as a worker.  \n")])])]),r("p",[e._v("退出虚拟主机")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker@worker1:~$ exit \n")])])]),r("p",[r("strong",[e._v("创建虚拟主机 worker2")])]),e._v(" "),r("p",[e._v("创建")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("$ docker-machine create -d virtualbox worker2\n")])])]),r("p",[e._v("入虚拟主机worker2")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("$ docker-machine ssh worker2\n")])])]),r("p",[e._v("加入 swarm 集群")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker@worker2:~$ docker swarm join \\\n    --token SWMTKN-1-47z6jld2o465z30dl7pie2kqe4oyug4fxdtbgkfjqgybsy4esl-8r55lxhxs7ozfil45gedd5b8a \\\n    192.168.99.100:2377\n\nThis node joined a swarm as a worker. \n")])])]),r("p",[e._v("退出虚拟主机")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker@worker2:~$ exit \n")])])]),r("p",[e._v("两个工作节点添加完成")]),e._v(" "),r("h3",{attrs:{id:"查看集群"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查看集群"}},[e._v("#")]),e._v(" 查看集群")]),e._v(" "),r("p",[e._v("进入管理节点：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker-machine ssh manager1\n")])])]),r("p",[e._v("宿主机子上查看虚拟主机")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker@manager1:~$ docker-machine ls\nNAME       ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER        ERRORS\nmanager1   *        virtualbox   Running   tcp://192.168.99.100:2376           v17.12.1-ce\nworker1    -        virtualbox   Running   tcp://192.168.99.101:2376           v17.12.1-ce\nworker2    -        virtualbox   Running   tcp://192.168.99.102:2376           v17.12.1-ce\n")])])]),r("p",[e._v("在主节点上面执行 docker node ls 查询集群主机信息")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker@manager1:~$ docker node ls\nID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS\n1ipck4z2uuwf11f4b9mnon2ul *   manager1            Ready               Active              Leader\nrtcpqgcn2gytnvufwfveukgrv     worker1             Ready               Active\nte2e9tr0qzbetjju5gyahg6f7     worker2             Ready               Active\n")])])]),r("p",[e._v("这样我们就创建了一个最小的 Swarm 集群，包含一个管理节点和两个工作节点。")]),e._v(" "),r("h2",{attrs:{id:"部署服务"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#部署服务"}},[e._v("#")]),e._v(" 部署服务")]),e._v(" "),r("p",[e._v("我们使用 docker service 命令来管理 Swarm 集群中的服务，该命令只能在管理节点运行。")]),e._v(" "),r("h3",{attrs:{id:"新建服务"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#新建服务"}},[e._v("#")]),e._v(" 新建服务")]),e._v(" "),r("p",[e._v("进入集群管理节点：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker-machine ssh manager1\n")])])]),r("p",[e._v("使用 docker 中国镜像")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker search alpine \ndocker pull registry.docker-cn.com/library/alpine\n")])])]),r("p",[e._v("现在我们在上一节创建的 Swarm 集群中运行一个名为 helloworld 服务。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker@manager1:~$ docker service create --replicas 1 --name helloworld alpine ping ityouknow.com\nrwpw7eij4v6h6716jvqvpxbyv\noverall progress: 1 out of 1 tasks\n1/1: running   [==================================================>]\nverify: Service converged\n")])])]),r("p",[e._v("命令解释：")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("docker service create")]),e._v(" 命令创建一个服务")]),e._v(" "),r("li",[r("code",[e._v("--name")]),e._v(" 服务名称命名为 "),r("code",[e._v("helloworld")])]),e._v(" "),r("li",[r("code",[e._v("--replicas")]),e._v(" 设置启动的示例数")]),e._v(" "),r("li",[r("code",[e._v("alpine")]),e._v("指的是使用的镜像名称，"),r("code",[e._v("ping ityouknow.com")]),e._v("指的是容器运行的bash")])]),e._v(" "),r("p",[e._v("使用命令 "),r("code",[e._v("docker service ps rwpw7eij4v6h6716jvqvpxbyv")]),e._v(" 可以查看服务进展")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker@manager1:~$ docker service ps rwpw7eij4v6h6716jvqvpxbyv\nID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE                ERROR               PORTS\nrgroe3s9qa53        helloworld.1        alpine:latest       worker1            Running             Running about a minute ago\n")])])]),r("p",[e._v("使用 docker service ls 来查看当前 Swarm 集群运行的服务。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker@manager1:~$ docker service ls\nID                  NAME                MODE                REPLICAS            IMAGE               PORTS\nyzfmyggfky8c        helloworld          replicated          0/1                 alpine:latest\n")])])]),r("h3",{attrs:{id:"监控集群状态"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#监控集群状态"}},[e._v("#")]),e._v(" 监控集群状态")]),e._v(" "),r("p",[e._v("登录管理节点 manager1")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker-machine ssh manager1\n")])])]),r("p",[e._v("运行 "),r("code",[e._v("docker service inspect --pretty <SERVICE-ID>")]),e._v(" 查询服务概要状态，以 helloworld 服务为例：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker@manager1:~$  docker service inspect --pretty helloworld\n\nID:             rwpw7eij4v6h6716jvqvpxbyv\nName:           helloworld\nService Mode:   Replicated\n Replicas:      1\nPlacement:\nUpdateConfig:\n Parallelism:   1\n On failure:    pause\n Monitoring Period: 5s\n Max failure ratio: 0\n ...\n Rollback order:    stop-first\nContainerSpec:\n Image:         alpine:latest@sha256:7b848083f93822dd21b0a2f14a110bd99f6efb4b838d499df6d04a49d0debf8b\n Args:          ping ityouknow.com\nResources:\nEndpoint Mode:  vip\n")])])]),r("blockquote",[r("p",[e._v("运行 "),r("code",[e._v("docker service inspect helloworld")]),e._v(" 查询服务详细信息。")])]),e._v(" "),r("p",[e._v("运行"),r("code",[e._v("docker service ps <SERVICE-ID>")]),e._v(" 查看那个节点正在运行服务:")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker@manager1:~$  docker service ps helloworld\nNAME                                    IMAGE   NODE     DESIRED STATE  LAST STATE\nhelloworld.1.8p1vev3fq5zm0mi8g0as41w35  alpine  worker1  Running        Running 3 minutes\n")])])]),r("p",[e._v("在工作节点查看任务的执行情况")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker-machine ssh  worker1\n")])])]),r("p",[e._v("在节点执行"),r("code",[e._v("docker ps")]),e._v(" 查看容器的运行状态。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('docker@worker1:~$   docker ps\nCONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS               NAMES\n96bf5b1d8010        alpine:latest       "ping ityouknow.com"   4 minutes ago       Up 4 minutes                            helloworld.1.rgroe3s9qa53lf4u4ky0tzcb8\n')])])]),r("p",[e._v("这样的话，我们在 Swarm 集群中成功的运行了一个 helloworld 服务，根据命令可以看出在 worker1 节点上运行。")]),e._v(" "),r("h2",{attrs:{id:"弹性伸缩实验"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#弹性伸缩实验"}},[e._v("#")]),e._v(" 弹性伸缩实验")]),e._v(" "),r("p",[e._v("我们来做一组实验来感受 Swarm 强大的动态水平扩展特性，首先动态调整服务实例个数。")]),e._v(" "),r("h3",{attrs:{id:"调整实例个数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#调整实例个数"}},[e._v("#")]),e._v(" 调整实例个数")]),e._v(" "),r("p",[r("strong",[e._v("增加或者减少服务的节点数")])]),e._v(" "),r("p",[e._v("调整 helloworld 的服务实例数为2个")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker service update --replicas 2 helloworld\n")])])]),r("p",[e._v("查看那个节点正在运行服务:")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker service ps helloworld\nID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE                 ERROR                              PORTS\nrgroe3s9qa53        helloworld.1        alpine:latest       manager1            Running             Running 8 minutes ago\na61nqrmfhyrl        helloworld.2        alpine:latest       worker2             Running             Running 9 seconds ago\n")])])]),r("p",[e._v("调整 helloworld 的服务实例数为1个")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker service update --replicas 1 helloworld\n")])])]),r("p",[e._v("再次查看节点运行情况:")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker service ps helloworld\nID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE                 ERROR                              PORTS\na61nqrmfhyrl        helloworld.2        alpine:latest       worker2             Running             Running about a minute ago\n")])])]),r("p",[e._v("再次调整 helloworld 的服务实例数为3个")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker service update --replicas 3 helloworld\nhelloworld\noverall progress: 3 out of 3 tasks\n1/3: running   [==================================================>]\n2/3: running   [==================================================>]\n3/3: running   [==================================================>]\nverify: Service converged\n")])])]),r("p",[e._v("查看节点运行情况：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker@manager1:~$ docker service ps helloworld\nID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE             ERROR                              PORTS\nmh7ipjn74o0d        helloworld.1        alpine:latest       worker2             Running             Running 40 seconds ago\n1w4p9okvz0xw        helloworld.2        alpine:latest       manager1            Running             Running 2 minutes ago\nsnqrbnh4k94y        helloworld.3        alpine:latest       worker1             Running             Running 32 seconds ago\n")])])]),r("p",[e._v("删除集群服务")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker service rm helloworld\n")])])]),r("h3",{attrs:{id:"调整集群大小"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#调整集群大小"}},[e._v("#")]),e._v(" 调整集群大小")]),e._v(" "),r("p",[e._v("动态调整 Swarm 集群的工作节点。")]),e._v(" "),r("p",[r("strong",[e._v("添加集群")])]),e._v(" "),r("p",[e._v("创建虚拟主机 worker3")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("$ docker-machine create -d virtualbox worker3\n")])])]),r("p",[e._v("入虚拟主机 worker3")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("$ docker-machine ssh worker3\n")])])]),r("p",[e._v("加入swarm 集群")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker@worker3:~$ docker swarm join \\\n    --token SWMTKN-1-47z6jld2o465z30dl7pie2kqe4oyug4fxdtbgkfjqgybsy4esl-8r55lxhxs7ozfil45gedd5b8a \\\n    192.168.99.100:2377\n\nThis node joined a swarm as a worker. \n")])])]),r("p",[e._v("退出虚拟主机")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker@worker3:~$exit \n")])])]),r("p",[e._v("在主节点上面执行 docker node ls 查询集群主机信息")]),e._v(" "),r("p",[e._v("登录主节点")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker-machine ssh  manager1\n")])])]),r("p",[e._v("查看集群节点")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker@manager1:~$  docker node ls\nID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS\nj0o7sykkvi86xpc00w71ew5b6 *   manager1            Ready               Active              Leader\nxwv8aixasqraxwwpox0d0bp2i     worker1             Ready               Active\nij3z1edgj7nsqvl8jgqelrfvy     worker2             Ready               Active\ni31yuluyqdboyl6aq8h9nk2t5     worker3             Ready               Active\n")])])]),r("p",[e._v("可以看出集群节点多了 worker3")]),e._v(" "),r("p",[r("strong",[e._v("退出 Swarm 集群")])]),e._v(" "),r("p",[e._v("如果 Manager 想要退出 Swarm 集群， 在 Manager Node 上执行如下命令：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker swarm leave  \n")])])]),r("p",[e._v("就可以退出集群，如果集群中还存在其它的 Worker Node，还希望 Manager 退出集群，则加上一个强制选项，命令行如下所示：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker swarm leave --force\n")])])]),r("p",[e._v("在 Worker2 上进行退出测试，登录 worker2 节点")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker-machine ssh  worker2\n")])])]),r("p",[e._v("执行退出命令")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker swarm leave \n")])])]),r("p",[e._v("查看集群节点情况：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker@manager1:~$ docker node ls\nID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS\nj0o7sykkvi86xpc00w71ew5b6 *   manager1            Ready               Active              Leader\nxwv8aixasqraxwwpox0d0bp2i     worker1             Ready               Active\nij3z1edgj7nsqvl8jgqelrfvy     worker2             Down                Active\ni31yuluyqdboyl6aq8h9nk2t5     worker3             Ready               Active\n")])])]),r("p",[e._v("可以看出集群节点 worker2 状态已经下线")]),e._v(" "),r("p",[e._v("也可以再次加入")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker@worker2:~$ docker swarm join \\\n>     --token SWMTKN-1-47z6jld2o465z30dl7pie2kqe4oyug4fxdtbgkfjqgybsy4esl-8r55lxhxs7ozfil45gedd5b8a \\\n>     192.168.99.100:2377\nThis node joined a swarm as a worker.\n")])])]),r("p",[e._v("再次查看")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker@manager1:~$ docker node ls\nID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS\nj0o7sykkvi86xpc00w71ew5b6 *   manager1            Ready               Active              Leader\nxwv8aixasqraxwwpox0d0bp2i     worker1             Ready               Active\n0agpph1vtylm421rhnx555kkc     worker2             Ready               Active\nij3z1edgj7nsqvl8jgqelrfvy     worker2             Down                Active\ni31yuluyqdboyl6aq8h9nk2t5     worker3             Ready               Active\n")])])]),r("p",[e._v("可以看出集群节点 worker2 又重新加入到了集群中")]),e._v(" "),r("p",[r("strong",[e._v("重新搭建命令")])]),e._v(" "),r("p",[e._v("使用 VirtualBox 做测试的时候，如果想重复实验可以将实验节点删掉再重来。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("//停止虚拟机\ndocker-machine stop [arg...]  //一个或多个虚拟机名称\n\ndocker-machine stop   manager1 worker1 worker2\n//移除虚拟机\ndocker-machine rm [OPTIONS] [arg...]\n\ndocker-machine rm manager1 worker1 worker2\n")])])]),r("p",[e._v("停止、删除虚拟主机后，再重新创建即可。")]),e._v(" "),r("h2",{attrs:{id:"总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),r("p",[e._v("通过对 Swarm 的学习，强烈感觉到自动化水平扩展的魅力，这样在公司流量爆发的时候，只需要执行一个命令就可以完成实例上线。如果再根据公司的业务流量做自动化控制，那就真正实现了完全自动的动态伸缩。")]),e._v(" "),r("p",[e._v("举个例子，我们可以利用脚本监控公司的业务流量，当流量是某个级别的时候我们启动对应的N个节点数，当流量减少的时候我们也动态的减少服务实例个数，既可以节省公司资源，也不用操心业务爆发被流量击垮。Docker 能发展的这么好还是有原因的，容器化是 DevOps 最重要的一个环节，未来容器化的技术会越来越丰富和完善，智能化运维可期待。")])])}),[],!1,null,null,null);a.default=t.exports}}]);