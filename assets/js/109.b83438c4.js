(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{537:function(e,t,n){"use strict";n.r(t);var r=n(30),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"彻底理解reentrantlock"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#彻底理解reentrantlock"}},[e._v("#")]),e._v(" 彻底理解ReentrantLock")]),e._v(" "),n("h2",{attrs:{id:"_1-reentrantlock的介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-reentrantlock的介绍"}},[e._v("#")]),e._v(" 1. ReentrantLock的介绍")]),e._v(" "),n("p",[e._v("ReentrantLock重入锁，是实现Lock接口的一个类，也是在实际编程中使用频率很高的一个锁，"),n("strong",[e._v("支持重入性，表示能够对共享资源能够重复加锁，即当前线程获取该锁再次获取不会被阻塞")]),e._v("。在java关键字synchronized隐式支持重入性（关于synchronized可以"),n("a",{attrs:{href:"https://juejin.im/post/6844903600334831629",target:"_blank",rel:"noopener noreferrer"}},[e._v("看这篇文章"),n("OutboundLink")],1),e._v("），synchronized通过获取自增，释放自减的方式实现重入。与此同时，ReentrantLock还支持"),n("strong",[e._v("公平锁和非公平锁")]),e._v("两种方式。那么，要想完完全全的弄懂ReentrantLock的话，主要也就是ReentrantLock同步语义的学习：1. 重入性的实现原理；2. 公平锁和非公平锁。")]),e._v(" "),n("h2",{attrs:{id:"_2-重入性的实现原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-重入性的实现原理"}},[e._v("#")]),e._v(" 2. 重入性的实现原理")]),e._v(" "),n("p",[e._v("要想支持重入性，就要解决两个问题：**1. 在线程获取锁的时候，如果已经获取锁的线程是当前线程的话则直接再次获取成功；2. 由于锁会被获取n次，那么只有锁在被释放同样的n次之后，该锁才算是完全释放成功。**通过"),n("a",{attrs:{href:"https://juejin.im/post/6844903601538596877",target:"_blank",rel:"noopener noreferrer"}},[e._v("这篇文章"),n("OutboundLink")],1),e._v("，我们知道，同步组件主要是通过重写AQS的几个protected方法来表达自己的同步语义。针对第一个问题，我们来看看ReentrantLock是怎样实现的，以非公平锁为例，判断当前线程能否获得锁为例，核心方法为nonfairTryAcquire：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('final boolean nonfairTryAcquire(int acquires) {\n    final Thread current = Thread.currentThread();\n    int c = getState();\n    //1. 如果该锁未被任何线程占有，该锁能被当前线程获取\n\tif (c == 0) {\n        if (compareAndSetState(0, acquires)) {\n            setExclusiveOwnerThread(current);\n            return true;\n        }\n    }\n\t//2.若被占有，检查占有线程是否是当前线程\n    else if (current == getExclusiveOwnerThread()) {\n\t\t// 3. 再次获取，计数加一\n        int nextc = c + acquires;\n        if (nextc < 0) // overflow\n            throw new Error("Maximum lock count exceeded");\n        setState(nextc);\n        return true;\n    }\n    return false;\n}\n')])])]),n("p",[e._v("这段代码的逻辑也很简单，具体请看注释。为了支持重入性，在第二步增加了处理逻辑，如果该锁已经被线程所占有了，会继续检查占有线程是否为当前线程，如果是的话，同步状态加1返回true，表示可以再次获取成功。每次重新获取都会对同步状态进行加一的操作，那么释放的时候处理思路是怎样的了？（依然还是以非公平锁为例）核心方法为tryRelease：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("protected final boolean tryRelease(int releases) {\n\t//1. 同步状态减1\n    int c = getState() - releases;\n    if (Thread.currentThread() != getExclusiveOwnerThread())\n        throw new IllegalMonitorStateException();\n    boolean free = false;\n    if (c == 0) {\n\t\t//2. 只有当同步状态为0时，锁成功被释放，返回true\n        free = true;\n        setExclusiveOwnerThread(null);\n    }\n\t// 3. 锁未被完全释放，返回false\n    setState(c);\n    return free;\n}\n")])])]),n("p",[e._v("代码的逻辑请看注释，需要注意的是，重入锁的释放必须得等到同步状态为0时锁才算成功释放，否则锁仍未释放。如果锁被获取n次，释放了n-1次，该锁未完全释放返回false，只有被释放n次才算成功释放，返回true。到现在我们可以理清ReentrantLock重入性的实现了，也就是理解了同步语义的第一条。")]),e._v(" "),n("h2",{attrs:{id:"_3-公平锁与非公平锁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-公平锁与非公平锁"}},[e._v("#")]),e._v(" 3. 公平锁与非公平锁")]),e._v(" "),n("p",[e._v("ReentrantLock支持两种锁："),n("strong",[e._v("公平锁")]),e._v("和"),n("strong",[e._v("非公平锁")]),e._v("。"),n("strong",[e._v("何谓公平性，是针对获取锁而言的，如果一个锁是公平的，那么锁的获取顺序就应该符合请求上的绝对时间顺序，满足FIFO")]),e._v("。ReentrantLock的构造方法无参时是构造非公平锁，源码为：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public ReentrantLock() {\n    sync = new NonfairSync();\n}\n")])])]),n("p",[e._v("另外还提供了另外一种方式，可传入一个boolean值，true时为公平锁，false时为非公平锁，源码为：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public ReentrantLock(boolean fair) {\n    sync = fair ? new FairSync() : new NonfairSync();\n}\n")])])]),n("p",[e._v("在上面非公平锁获取时（nonfairTryAcquire方法）只是简单的获取了一下当前状态做了一些逻辑处理，并没有考虑到当前同步队列中线程等待的情况。我们来看看公平锁的处理逻辑是怎样的，核心方法为：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('protected final boolean tryAcquire(int acquires) {\n    final Thread current = Thread.currentThread();\n    int c = getState();\n    if (c == 0) {\n        if (!hasQueuedPredecessors() &&\n            compareAndSetState(0, acquires)) {\n            setExclusiveOwnerThread(current);\n            return true;\n        }\n    }\n    else if (current == getExclusiveOwnerThread()) {\n        int nextc = c + acquires;\n        if (nextc < 0)\n            throw new Error("Maximum lock count exceeded");\n        setState(nextc);\n        return true;\n    }\n    return false;\n  }\n}\n')])])]),n("p",[e._v("这段代码的逻辑与nonfairTryAcquire基本上一直，唯一的不同在于增加了hasQueuedPredecessors的逻辑判断，方法名就可知道该方法用来判断当前节点在同步队列中是否有前驱节点的判断，如果有前驱节点说明有线程比当前线程更早的请求资源，根据公平性，当前线程请求资源失败。如果当前节点没有前驱节点的话，再才有做后面的逻辑判断的必要性。"),n("strong",[e._v("公平锁每次都是从同步队列中的第一个节点获取到锁，而非公平性锁则不一定，有可能刚释放锁的线程能再次获取到锁")]),e._v("。")]),e._v(" "),n("blockquote",[n("p",[n("strong",[e._v("公平锁  VS  非公平锁")])])]),e._v(" "),n("ol",[n("li",[e._v("公平锁每次获取到锁为同步队列中的第一个节点，"),n("strong",[e._v("保证请求资源时间上的绝对顺序")]),e._v("，而非公平锁有可能刚释放锁的线程下次继续获取该锁，则有可能导致其他线程永远无法获取到锁，"),n("strong",[e._v("造成“饥饿”现象")]),e._v("。")]),e._v(" "),n("li",[e._v("公平锁为了保证时间上的绝对顺序，需要频繁的上下文切换，而非公平锁会降低一定的上下文切换，降低性能开销。因此，ReentrantLock默认选择的是非公平锁，则是为了减少一部分上下文切换，"),n("strong",[e._v("保证了系统更大的吞吐量")]),e._v("。")])]),e._v(" "),n("p",[e._v("来源于 https://juejin.cn/post/6844903601542807559")])])}),[],!1,null,null,null);t.default=a.exports}}]);