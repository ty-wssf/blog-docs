(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{499:function(t,e,a){"use strict";a.r(e);var n=a(30),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"使用-spring-boot-actuator-监控应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-spring-boot-actuator-监控应用"}},[t._v("#")]),t._v(" 使用 Spring Boot Actuator 监控应用")]),t._v(" "),a("p",[t._v("微服务的特点决定了功能模块的部署是分布式的，大部分功能模块都是运行在不同的机器上，彼此通过服务调用进行交互，前后台的业务流会经过很多个微服务的处理和传递，出现了异常如何快速定位是哪个环节出现了问题？")]),t._v(" "),a("p",[t._v("在这种框架下，微服务的监控显得尤为重要。本文主要结合 Spring Boot Actuator，跟大家一起分享微服务 Spring Boot Actuator 的常见用法，方便我们在日常中对我们的微服务进行监控治理。")]),t._v(" "),a("h2",{attrs:{id:"actuator-监控"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#actuator-监控"}},[t._v("#")]),t._v(" Actuator 监控")]),t._v(" "),a("p",[t._v("Spring Boot 使用“习惯优于配置的理念”，采用包扫描和自动化配置的机制来加载依赖 Jar 中的 Spring bean，不需要任何 Xml 配置，就可以实现 Spring 的所有配置。虽然这样做能让我们的代码变得非常简洁，但是整个应用的实例创建和依赖关系等信息都被离散到了各个配置类的注解上，这使得我们分析整个应用中资源和实例的各种关系变得非常的困难。")]),t._v(" "),a("p",[t._v("Actuator 是 Spring Boot 提供的对应用系统的自省和监控的集成功能，可以查看应用配置的详细信息，例如自动化配置信息、创建的 Spring beans 以及一些环境属性等。")]),t._v(" "),a("p",[t._v("为了保证 actuator 暴露的监控接口的安全性，需要添加安全控制的依赖"),a("code",[t._v("spring-boot-start-security")]),t._v("依赖，访问应用监控端点时，都需要输入验证信息。Security 依赖，可以选择不加，不进行安全管理，但不建议这么做。")]),t._v(" "),a("h2",{attrs:{id:"actuator-的-rest-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#actuator-的-rest-接口"}},[t._v("#")]),t._v(" Actuator 的 REST 接口")]),t._v(" "),a("p",[t._v("Actuator 监控分成两类：原生端点和用户自定义端点；自定义端点主要是指扩展性，用户可以根据自己的实际应用，定义一些比较关心的指标，在运行期进行监控。")]),t._v(" "),a("p",[t._v("原生端点是在应用程序里提供众多 Web 接口，通过它们了解应用程序运行时的内部状况。原生端点又可以分成三类：")]),t._v(" "),a("ul",[a("li",[t._v("应用配置类：可以查看应用在运行期的静态信息：例如自动配置信息、加载的 springbean 信息、yml 文件配置信息、环境信息、请求映射信息；")]),t._v(" "),a("li",[t._v("度量指标类：主要是运行期的动态信息，例如堆栈、请求连、一些健康指标、metrics 信息等；")]),t._v(" "),a("li",[t._v("操作控制类：主要是指 shutdown,用户可以发送一个请求将应用的监控功能关闭。")])]),t._v(" "),a("p",[t._v("Actuator 提供了 13 个接口，具体如下表所示。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("HTTP 方法")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("路径")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("GET")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("/auditevents")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("显示应用暴露的审计事件 (比如认证进入、订单失败)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("GET")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("/beans")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("描述应用程序上下文里全部的 Bean，以及它们的关系")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("GET")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("/conditions")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("就是 1.0 的 /autoconfig ，提供一份自动配置生效的条件情况，记录哪些自动配置条件通过了，哪些没通过")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("GET")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("/configprops")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("描述配置属性(包含默认值)如何注入Bean")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("GET")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("/env")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("获取全部环境属性")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("GET")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("/env/{name}")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("根据名称获取特定的环境属性值")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("GET")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("/flyway")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("提供一份 Flyway 数据库迁移信息")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("GET")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("/liquidbase")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("显示Liquibase 数据库迁移的纤细信息")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("GET")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("/health")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("报告应用程序的健康指标，这些值由 HealthIndicator 的实现类提供")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("GET")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("/heapdump")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("dump 一份应用的 JVM 堆信息")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("GET")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("/httptrace")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("显示HTTP足迹，最近100个HTTP request/repsponse")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("GET")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("/info")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("获取应用程序的定制信息，这些信息由info打头的属性提供")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("GET")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("/logfile")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("返回log file中的内容(如果 logging.file 或者 logging.path 被设置)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("GET")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("/loggers")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("显示和修改配置的loggers")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("GET")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("/metrics")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("报告各种应用程序度量信息，比如内存用量和HTTP请求计数")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("GET")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("/metrics/{name}")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("报告指定名称的应用程序度量值")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("GET")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("/scheduledtasks")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("展示应用中的定时任务信息")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("GET")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("/sessions")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("如果我们使用了 Spring Session 展示应用中的 HTTP sessions 信息")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("POST")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("/shutdown")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("关闭应用程序，要求endpoints.shutdown.enabled设置为true")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("GET")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("/mappings")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("描述全部的 URI路径，以及它们和控制器(包含Actuator端点)的映射关系")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("GET")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("/threaddump")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("获取线程活动的快照")])])])]),t._v(" "),a("h2",{attrs:{id:"快速上手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快速上手"}},[t._v("#")]),t._v(" 快速上手")]),t._v(" "),a("h3",{attrs:{id:"相关配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相关配置"}},[t._v("#")]),t._v(" 相关配置")]),t._v(" "),a("p",[a("strong",[t._v("项目依赖")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<dependencies>\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n  </dependency>\n  <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-actuator</artifactId>\n  </dependency>\n</dependencies>\n")])])]),a("p",[a("strong",[t._v("配置文件")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("info.app.name=spring-boot-actuator\ninfo.app.version= 1.0.0\ninfo.app.test=test\n\nmanagement.endpoints.web.exposure.include=*\nmanagement.endpoint.health.show-details=always\n#management.endpoints.web.base-path=/monitor\n\nmanagement.endpoint.shutdown.enabled=true\n")])])]),a("ul",[a("li",[a("code",[t._v("management.endpoints.web.base-path=/monitor")]),t._v(" 代表启用单独的url地址来监控 Spring Boot 应用，为了安全一般都启用独立的端口来访问后端的监控信息")]),t._v(" "),a("li",[a("code",[t._v("management.endpoint.shutdown.enabled=true")]),t._v(" 启用接口关闭 Spring Boot")])]),t._v(" "),a("p",[t._v("配置完成之后，启动项目就可以继续验证各个监控功能了。")]),t._v(" "),a("h2",{attrs:{id:"命令详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令详解"}},[t._v("#")]),t._v(" 命令详解")]),t._v(" "),a("p",[t._v("在 Spring Boot 2.x 中为了安全期间，Actuator 只开放了两个端点 "),a("code",[t._v("/actuator/health")]),t._v(" 和 "),a("code",[t._v("/actuator/info")]),t._v("。可以在配置文件中设置打开。")]),t._v(" "),a("p",[t._v("可以打开所有的监控点")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("management.endpoints.web.exposure.include=*\n")])])]),a("p",[t._v("也可以选择打开部分")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("management.endpoints.web.exposure.exclude=beans,trace\n")])])]),a("p",[t._v("Actuator 默认所有的监控点路径都在"),a("code",[t._v("/actuator/*")]),t._v("，当然如果有需要这个路径也支持定制。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("management.endpoints.web.base-path=/manage\n")])])]),a("p",[t._v("设置完重启后，再次访问地址就会变成"),a("code",[t._v("/manage/*")])]),t._v(" "),a("p",[t._v("Actuator 几乎监控了应用涉及的方方面面，我们重点讲述一些经常在项目中常用的命令。")]),t._v(" "),a("h3",{attrs:{id:"health"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#health"}},[t._v("#")]),t._v(" health")]),t._v(" "),a("p",[t._v("health 主要用来检查应用的运行状态，这是我们使用最高频的一个监控点。通常使用此接口提醒我们应用实例的运行状态，以及应用不”健康“的原因，比如数据库连接、磁盘空间不够等。")]),t._v(" "),a("p",[t._v("默认情况下 health 的状态是开放的，添加依赖后启动项目，访问："),a("code",[t._v("http://localhost:8080/actuator/health")]),t._v("即可看到应用的状态。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('{\n    "status" : "UP"\n}\n')])])]),a("p",[t._v("默认情况下，最终的 Spring Boot 应用的状态是由 HealthAggregator 汇总而成的，汇总的算法是：")]),t._v(" "),a("ul",[a("li",[t._v("1 设置状态码顺序："),a("code",[t._v("setStatusOrder(Status.DOWN, Status.OUT_OF_SERVICE, Status.UP, Status.UNKNOWN);")]),t._v("。")]),t._v(" "),a("li",[t._v("2 过滤掉不能识别的状态码。")]),t._v(" "),a("li",[t._v("3 如果无任何状态码，整个 Spring Boot 应用的状态是 UNKNOWN。")]),t._v(" "),a("li",[t._v("4 将所有收集到的状态码按照 1 中的顺序排序。")]),t._v(" "),a("li",[t._v("5 返回有序状态码序列中的第一个状态码，作为整个 Spring Boot 应用的状态。")])]),t._v(" "),a("p",[t._v("health 通过合并几个健康指数检查应用的健康情况。Spring Boot Actuator 有几个预定义的健康指标比如"),a("code",[t._v("DataSourceHealthIndicator")]),t._v(", "),a("code",[t._v("DiskSpaceHealthIndicator")]),t._v(", "),a("code",[t._v("MongoHealthIndicator")]),t._v(", "),a("code",[t._v("RedisHealthIndicator")]),t._v("等，它使用这些健康指标作为健康检查的一部分。")]),t._v(" "),a("p",[t._v("举个例子，如果你的应用使用 Redis，"),a("code",[t._v("RedisHealthindicator")]),t._v(" 将被当作检查的一部分；如果使用 MongoDB，那么"),a("code",[t._v("MongoHealthIndicator")]),t._v(" 将被当作检查的一部分。")]),t._v(" "),a("p",[t._v("可以在配置文件中关闭特定的健康检查指标，比如关闭 redis 的健康检查：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("management.health.redise.enabled=false\n")])])]),a("p",[t._v("默认，所有的这些健康指标被当作健康检查的一部分。")]),t._v(" "),a("h3",{attrs:{id:"info"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#info"}},[t._v("#")]),t._v(" info")]),t._v(" "),a("p",[t._v("info 就是我们自己配置在配置文件中以 info 开头的配置信息，比如我们在示例项目中的配置是：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("info.app.name=spring-boot-actuator\ninfo.app.version= 1.0.0\ninfo.app.test= test\n")])])]),a("p",[t._v("启动示例项目，访问："),a("code",[t._v("http://localhost:8080/actuator/info")]),t._v("返回部分信息如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('{\n  "app": {\n    "name": "spring-boot-actuator",\n    "version": "1.0.0",\n    "test":"test"\n  }\n}\n')])])]),a("h3",{attrs:{id:"beans"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#beans"}},[t._v("#")]),t._v(" beans")]),t._v(" "),a("p",[t._v("根据示例就可以看出，展示了 bean 的别名、类型、是否单例、类的地址、依赖等信息。")]),t._v(" "),a("p",[t._v("启动示例项目，访问："),a("code",[t._v("http://localhost:8080/actuator/beans")]),t._v("返回部分信息如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('[\n  {\n    "context": "application:8080:management",\n    "parent": "application:8080",\n    "beans": [\n      {\n        "bean": "embeddedServletContainerFactory",\n        "aliases": [\n          \n        ],\n        "scope": "singleton",\n        "type": "org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory",\n        "resource": "null",\n        "dependencies": [\n          \n        ]\n      },\n      {\n        "bean": "endpointWebMvcChildContextConfiguration",\n        "aliases": [\n          \n        ],\n        "scope": "singleton",\n        "type": "org.springframework.boot.actuate.autoconfigure.EndpointWebMvcChildContextConfiguration$$EnhancerBySpringCGLIB$$a4a10f9d",\n        "resource": "null",\n        "dependencies": [\n          \n        ]\n      }\n  }\n]\n')])])]),a("h3",{attrs:{id:"conditions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#conditions"}},[t._v("#")]),t._v(" conditions")]),t._v(" "),a("p",[t._v("Spring Boot 的自动配置功能非常便利，但有时候也意味着出问题比较难找出具体的原因。使用 conditions 可以在应用运行时查看代码了某个配置在什么条件下生效，或者某个自动配置为什么没有生效。")]),t._v(" "),a("p",[t._v("启动示例项目，访问："),a("code",[t._v("http://localhost:8080/actuator/conditions")]),t._v("返回部分信息如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('{\n    "positiveMatches": {\n     "DevToolsDataSourceAutoConfiguration": {\n            "notMatched": [\n                {\n                    "condition": "DevToolsDataSourceAutoConfiguration.DevToolsDataSourceCondition", \n                    "message": "DevTools DataSource Condition did not find a single DataSource bean"\n                }\n            ], \n            "matched": [ ]\n        }, \n        "RemoteDevToolsAutoConfiguration": {\n            "notMatched": [\n                {\n                    "condition": "OnPropertyCondition", \n                    "message": "@ConditionalOnProperty (spring.devtools.remote.secret) did not find property \'secret\'"\n                }\n            ], \n            "matched": [\n                {\n                    "condition": "OnClassCondition", \n                    "message": "@ConditionalOnClass found required classes \'javax.servlet.Filter\', \'org.springframework.http.server.ServerHttpRequest\'; @ConditionalOnMissingClass did not find unwanted class"\n                }\n            ]\n        }\n    }\n}\n')])])]),a("h3",{attrs:{id:"heapdump"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#heapdump"}},[t._v("#")]),t._v(" heapdump")]),t._v(" "),a("p",[t._v("返回一个 GZip 压缩的 JVM 堆 dump")]),t._v(" "),a("p",[t._v("启动示例项目，访问："),a("code",[t._v("http://localhost:8080/actuator/heapdump")]),t._v("会自动生成一个 Jvm 的堆文件 heapdump，我们可以使用 JDK 自带的 Jvm 监控工具 VisualVM 打开此文件查看内存快照。类似如下图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://favorites.ren/assets/images/2018/springboot/heapdump.png",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"shutdown"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shutdown"}},[t._v("#")]),t._v(" shutdown")]),t._v(" "),a("p",[t._v("开启接口优雅关闭 Spring Boot 应用，要使用这个功能首先需要在配置文件中开启：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("management.endpoint.shutdown.enabled=true\n")])])]),a("p",[t._v("配置完成之后，启动示例项目，使用 curl 模拟 post 请求访问 shutdown 接口。")]),t._v(" "),a("blockquote",[a("p",[t._v("shutdown 接口默认只支持 post 请求。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('curl -X POST "http://localhost:8080/actuator/shutdown" \n{\n    "message": "Shutting down, bye..."\n}\n')])])]),a("p",[t._v("此时你会发现应用已经被关闭。")]),t._v(" "),a("h3",{attrs:{id:"mappings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mappings"}},[t._v("#")]),t._v(" mappings")]),t._v(" "),a("p",[t._v("描述全部的 URI 路径，以及它们和控制器的映射关系")]),t._v(" "),a("p",[t._v("启动示例项目，访问："),a("code",[t._v("http://localhost:8080/actuator/mappings")]),t._v("返回部分信息如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('{\n  "/**/favicon.ico": {\n    "bean": "faviconHandlerMapping"\n  },\n  "{[/hello]}": {\n    "bean": "requestMappingHandlerMapping",\n    "method": "public java.lang.String com.neo.controller.HelloController.index()"\n  },\n  "{[/error]}": {\n    "bean": "requestMappingHandlerMapping",\n    "method": "public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)"\n  }\n}\n')])])]),a("h3",{attrs:{id:"threaddump"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#threaddump"}},[t._v("#")]),t._v(" threaddump")]),t._v(" "),a("p",[t._v("/threaddump 接口会生成当前线程活动的快照。这个功能非常好，方便我们在日常定位问题的时候查看线程的情况。 主要展示了线程名、线程ID、线程的状态、是否等待锁资源等信息。")]),t._v(" "),a("p",[t._v("启动示例项目，访问："),a("code",[t._v("http://localhost:8080/actuator/threaddump")]),t._v("返回部分信息如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('[\n  {\n    "threadName": "http-nio-8088-exec-6",\n    "threadId": 49,\n    "blockedTime": -1,\n    "blockedCount": 0,\n    "waitedTime": -1,\n    "waitedCount": 2,\n    "lockName": "java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@1630a501",\n    "lockOwnerId": -1,\n    "lockOwnerName": null,\n    "inNative": false,\n    "suspended": false,\n    "threadState": "WAITING",\n    "stackTrace": [\n      {\n        "methodName": "park",\n        "fileName": "Unsafe.java",\n        "lineNumber": -2,\n        "className": "sun.misc.Unsafe",\n        "nativeMethod": true\n      },\n      ...\n      {\n        "methodName": "run",\n        "fileName": "TaskThread.java",\n        "lineNumber": 61,\n        "className": "org.apache.tomcat.util.threads.TaskThread$WrappingRunnable",\n        "nativeMethod": false\n      }\n      ...\n    ],\n    "lockInfo": {\n      "className": "java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject",\n      "identityHashCode": 372286721\n    }\n  }\n  ...\n]\n')])])]),a("p",[t._v("生产出现问题的时候，可以通过应用的线程快照来检测应用正在执行的任务。")])])}),[],!1,null,null,null);e.default=s.exports}}]);