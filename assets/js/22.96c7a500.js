(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{450:function(e,t,n){"use strict";n.r(t);var a=n(30),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"mybatis-源码分析-插件机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-源码分析-插件机制"}},[e._v("#")]),e._v(" MyBatis 源码分析 - 插件机制")]),e._v(" "),n("h2",{attrs:{id:"_1-简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-简介"}},[e._v("#")]),e._v(" 1.简介")]),e._v(" "),n("p",[e._v("一般情况下，开源框架都会提供插件或其他形式的拓展点，供开发者自行拓展。这样的好处是显而易见的，一是增加了框架的灵活性。二是开发者可以结合实际需求，对框架进行拓展，使其能够更好的工作。以 MyBatis 为例，我们可基于 MyBatis 插件机制实现分页、分表，监控等功能。由于插件和业务无关，业务也无法感知插件的存在。因此可以无感植入插件，在无形中增强功能。")]),e._v(" "),n("p",[e._v("开发 MyBatis 插件需要对 MyBatis 比较深了解才行，一般来说最好能够掌握 MyBatis 的源码，门槛相对较高。本篇文章在分析完 MyBatis 插件机制后，会手写一个简单的分页插件，以帮助大家更好的掌握 MyBatis 插件的编写。")]),e._v(" "),n("h2",{attrs:{id:"_2-插件机制原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-插件机制原理"}},[e._v("#")]),e._v(" 2. 插件机制原理")]),e._v(" "),n("p",[e._v("我们在编写插件时，除了需要让插件类实现 Interceptor 接口，还需要通过注解标注该插件的拦截点。所谓拦截点指的是插件所能拦截的方法，MyBatis 所允许拦截的方法如下：")]),e._v(" "),n("ul",[n("li",[e._v("Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)")]),e._v(" "),n("li",[e._v("ParameterHandler (getParameterObject, setParameters)")]),e._v(" "),n("li",[e._v("ResultSetHandler (handleResultSets, handleOutputParameters)")]),e._v(" "),n("li",[e._v("StatementHandler (prepare, parameterize, batch, update, query)")])]),e._v(" "),n("p",[e._v("如果我们想要拦截 Executor 的 query 方法，那么可以这样定义插件。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Intercepts({\n    @Signature(\n        type = Executor.class,\n        method = "query",\n        args ={MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class}\n    )\n})\npublic class ExamplePlugin implements Interceptor {\n    // 省略逻辑\n}\n')])])]),n("p",[e._v("除此之外，我们还需将插件配置到相关文件中。这样 MyBatis 在启动时可以加载插件，并保存插件实例到相关对象（InterceptorChain，拦截器链）中。待准备工作做完后，MyBatis 处于就绪状态。我们在执行 SQL 时，需要先通过 DefaultSqlSessionFactory 创建 SqlSession 。Executor 实例会在创建 SqlSession 的过程中被创建，Executor 实例创建完毕后，MyBatis 会通过 JDK 动态代理为实例生成代理类。这样，插件逻辑即可在 Executor 相关方法被调用前执行。")]),e._v(" "),n("p",[e._v("以上就是 MyBatis 插件机制的基本原理。接下来，我们来看一下原理背后对应的源码是怎样的。")]),e._v(" "),n("h2",{attrs:{id:"_3-源码分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-源码分析"}},[e._v("#")]),e._v(" 3. 源码分析")]),e._v(" "),n("h3",{attrs:{id:"_3-1-植入插件逻辑"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-植入插件逻辑"}},[e._v("#")]),e._v(" 3.1 植入插件逻辑")]),e._v(" "),n("p",[e._v("本节，我将以 Executor 为例，分析 MyBatis 是如何为 Executor 实例植入插件逻辑的。Executor 实例是在开启 SqlSession 时被创建的，因此，下面我们从源头进行分析。先来看一下 SqlSession 开启的过程。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// -☆- DefaultSqlSessionFactory\npublic SqlSession openSession() {\n    return openSessionFromDataSource(configuration.getDefaultExecutorType(), null, false);\n}\n\nprivate SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {\n    Transaction tx = null;\n    try {\n        // 省略部分逻辑\n        \n        // 创建 Executor\n        final Executor executor = configuration.newExecutor(tx, execType);\n        return new DefaultSqlSession(configuration, executor, autoCommit);\n    } \n    catch (Exception e) {...} \n    finally {...}\n}\n")])])]),n("p",[e._v("Executor 的创建过程封装在 Configuration 中，我们跟进去看看看。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// -☆- Configuration\npublic Executor newExecutor(Transaction transaction, ExecutorType executorType) {\n    executorType = executorType == null ? defaultExecutorType : executorType;\n    executorType = executorType == null ? ExecutorType.SIMPLE : executorType;\n    Executor executor;\n    \n    // 根据 executorType 创建相应的 Executor 实例\n    if (ExecutorType.BATCH == executorType) {...} \n    else if (ExecutorType.REUSE == executorType) {...} \n    else {\n        executor = new SimpleExecutor(this, transaction);\n    }\n    if (cacheEnabled) {\n        executor = new CachingExecutor(executor);\n    }\n    \n    // 植入插件\n    executor = (Executor) interceptorChain.pluginAll(executor);\n    return executor;\n}\n")])])]),n("p",[e._v("如上，newExecutor 方法在创建好 Executor 实例后，紧接着通过拦截器链 interceptorChain 为 Executor 实例植入代理逻辑。那下面我们看一下 InterceptorChain 的代码是怎样的。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class InterceptorChain {\n\n    private final List<Interceptor> interceptors = new ArrayList<Interceptor>();\n\n    public Object pluginAll(Object target) {\n        // 遍历拦截器集合\n        for (Interceptor interceptor : interceptors) {\n            // 调用拦截器的 plugin 方法植入相应的插件逻辑\n            target = interceptor.plugin(target);\n        }\n        return target;\n    }\n    \n    /** 添加插件实例到 interceptors 集合中 */\n    public void addInterceptor(Interceptor interceptor) {\n        interceptors.add(interceptor);\n    }\n\n    /** 获取插件列表 */\n    public List<Interceptor> getInterceptors() {\n        return Collections.unmodifiableList(interceptors);\n    }\n}\n")])])]),n("p",[e._v("以上是 InterceptorChain 的全部代码，比较简单。它的 pluginAll 方法会调用具体插件的 plugin 方法植入相应的插件逻辑。如果有多个插件，则会多次调用 plugin 方法，最终生成一个层层嵌套的代理类。形如下面：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://blog-pictures.oss-cn-shanghai.aliyuncs.com/15352797020539.jpg",alt:"img"}})]),e._v(" "),n("p",[e._v("当 Executor 的某个方法被调用的时候，插件逻辑会先行执行。执行顺序由外而内，比如上图的执行顺序为 "),n("code",[e._v("plugin3 → plugin2 → Plugin1 → Executor")]),e._v("。")]),e._v(" "),n("p",[e._v("plugin 方法是由具体的插件类实现，不过该方法代码一般比较固定，所以下面找个示例分析一下。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// -☆- ExamplePlugin\npublic Object plugin(Object target) {\n    return Plugin.wrap(target, this);\n}\n\n// -☆- Plugin\npublic static Object wrap(Object target, Interceptor interceptor) {\n    /*\n     * 获取插件类 @Signature 注解内容，并生成相应的映射结构。形如下面：\n     * {\n     *     Executor.class : [query, update, commit],\n     *     ParameterHandler.class : [getParameterObject, setParameters]\n     * }\n     */\n    Map<Class<?>, Set<Method>> signatureMap = getSignatureMap(interceptor);\n    Class<?> type = target.getClass();\n    // 获取目标类实现的接口\n    Class<?>[] interfaces = getAllInterfaces(type, signatureMap);\n    if (interfaces.length > 0) {\n        // 通过 JDK 动态代理为目标类生成代理类\n        return Proxy.newProxyInstance(\n            type.getClassLoader(),\n            interfaces,\n            new Plugin(target, interceptor, signatureMap));\n    }\n    return target;\n}\n")])])]),n("p",[e._v("如上，plugin 方法在内部调用了 Plugin 类的 wrap 方法，用于为目标对象生成代理。Plugin 类实现了 InvocationHandler 接口，因此它可以作为参数传给 Proxy 的 newProxyInstance 方法。")]),e._v(" "),n("p",[e._v("到这里，关于插件植入的逻辑就分析完了。接下来，我们来看看插件逻辑是怎样执行的。")]),e._v(" "),n("h3",{attrs:{id:"_3-2-执行插件逻辑"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-执行插件逻辑"}},[e._v("#")]),e._v(" 3.2 执行插件逻辑")]),e._v(" "),n("p",[e._v("Plugin 实现了 InvocationHandler 接口，因此它的 invoke 方法会拦截所有的方法调用。invoke 方法会对所拦截的方法进行检测，以决定是否执行插件逻辑。该方法的逻辑如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// -☆- Plugin\npublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n    try {\n        /*\n         * 获取被拦截方法列表，比如：\n         *    signatureMap.get(Executor.class)，可能返回 [query, update, commit]\n         */\n        Set<Method> methods = signatureMap.get(method.getDeclaringClass());\n        // 检测方法列表是否包含被拦截的方法\n        if (methods != null && methods.contains(method)) {\n            // 执行插件逻辑\n            return interceptor.intercept(new Invocation(target, method, args));\n        }\n        // 执行被拦截的方法\n        return method.invoke(target, args);\n    } catch (Exception e) {\n        throw ExceptionUtil.unwrapThrowable(e);\n    }\n}\n")])])]),n("p",[e._v("invoke 方法的代码比较少，逻辑不难理解。首先，invoke 方法会检测被拦截方法是否配置在插件的 @Signature 注解中，若是，则执行插件逻辑，否则执行被拦截方法。插件逻辑封装在 intercept 中，该方法的参数类型为 Invocation。Invocation 主要用于存储目标类，方法以及方法参数列表。下面简单看一下该类的定义。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class Invocation {\n\n    private final Object target;\n    private final Method method;\n    private final Object[] args;\n\n    public Invocation(Object target, Method method, Object[] args) {\n        this.target = target;\n        this.method = method;\n        this.args = args;\n    }\n\n    // 省略部分代码\n\n    public Object proceed() throws InvocationTargetException, IllegalAccessException {\n        // 调用被拦截的方法\n        return method.invoke(target, args);\n    }\n}\n")])])]),n("p",[e._v("关于插件的执行逻辑就分析到这，整个过程不难理解，大家简单看看即可。")]),e._v(" "),n("h2",{attrs:{id:"_4-实现一个分页插件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-实现一个分页插件"}},[e._v("#")]),e._v(" 4. 实现一个分页插件")]),e._v(" "),n("p",[e._v("为了更好的向大家介绍 MyBatis 的插件机制，下面我将手写一个针对 MySQL 的分页插件。Talk is cheap. Show the code。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Intercepts({\n    @Signature(\n        type = Executor.class,    // 目标类\n        method = "query",    // 目标方法\n        args ={MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class}\n    )\n})\npublic class MySqlPagingPlugin implements Interceptor {\n\n    private static final Integer MAPPED_STATEMENT_INDEX = 0;\n    private static final Integer PARAMETER_INDEX = 1;\n    private static final Integer ROW_BOUNDS_INDEX = 2;\n\n    @Override\n    public Object intercept(Invocation invocation) throws Throwable {\n        Object[] args = invocation.getArgs();\n        RowBounds rb = (RowBounds) args[ROW_BOUNDS_INDEX];\n        // 无需分页\n        if (rb == RowBounds.DEFAULT) {\n            return invocation.proceed();\n        }\n        \n        // 将原 RowBounds 参数设为 RowBounds.DEFAULT，关闭 MyBatis 内置的分页机制\n        args[ROW_BOUNDS_INDEX] = RowBounds.DEFAULT;\n\n        MappedStatement ms = (MappedStatement) args[MAPPED_STATEMENT_INDEX];\n        BoundSql boundSql = ms.getBoundSql(args[PARAMETER_INDEX]);\n\n        // 获取 SQL 语句，拼接 limit 语句\n        String sql = boundSql.getSql();\n        String limit = String.format("LIMIT %d,%d", rb.getOffset(), rb.getLimit());\n        sql = sql + " " + limit;\n\n        // 创建一个 StaticSqlSource，并将拼接好的 sql 传入\n        SqlSource sqlSource = new StaticSqlSource(ms.getConfiguration(), sql, boundSql.getParameterMappings());\n\n        // 通过反射获取并设置 MappedStatement 的 sqlSource 字段\n        Field field = MappedStatement.class.getDeclaredField("sqlSource");\n        field.setAccessible(true);\n        field.set(ms, sqlSource);\n        \n        // 执行被拦截方法\n        return invocation.proceed();\n    }\n\n    @Override\n    public Object plugin(Object target) {\n        return Plugin.wrap(target, this);\n    }\n\n    @Override\n    public void setProperties(Properties properties) {\n    }\n}\n')])])]),n("p",[e._v("上面的分页插件通过 RowBounds 参数获取分页信息，并生成相应的 limit 语句。之后拼接 sql，并使用该 sql 作为参数创建 StaticSqlSource。最后通过反射替换 MappedStatement 对象中的 sqlSource 字段。以上代码中出现了一些大家不太熟悉的类，比如 BoundSql，MappedStatement 以及 StaticSqlSource，这里简单解释一下吧。BoundSql 包含了经过解析后的 sql 语句，以及使用者运行时传入的参数，这些参数最终会被设置到 sql 中。MappedStatement 与映射文件中的 "),n("select",[e._v("，"),n("insert",[e._v(" 等节点对应，包含了节点的配置信息，比如 id，fetchSize 以及 SqlSource。StaticSqlSource 是 SqlSource 实现类之一，包含完全解析后的 sql 语句。所谓完全解析是指 sql 语句中不包含 ${xxx} 或 #{xxx} 等占位符，以及其他一些未解析的动态节点，比如 "),n("if",[e._v("，"),n("where",[e._v(" 等。关于这些类就介绍这么多，如果大家还是不怎么理解的话，可以看看我之前写的文章。接下里，写点测试代码验证一下插件是否可以正常运行。先来看一下 Dao 接口与映射文件的定义：")])],1)],1)],1)]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public interface StudentDao {\n    List<Student> findByPaging(@Param("id") Integer id, RowBounds rb);\n}\n<mapper namespace="xyz.coolblog.dao6.StudentDao">\n    <select id="findByPaging" resultType="xyz.coolblog.model5.Student">\n        SELECT\n            `id`, `name`, `age`\n        FROM\n            student\n        WHERE\n            id > #{id}\n    </select>\n</mapper>\n')])])]),n("p",[e._v("测试代码如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class PluginTest {\n\n    private SqlSessionFactory sqlSessionFactory;\n\n    @Before\n    public void prepare() throws IOException {\n        String resource = "mybatis-plugin-config.xml";\n        InputStream inputStream = Resources.getResourceAsStream(resource);\n        sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n        inputStream.close();\n    }\n\n    @Test\n    public void testPlugin() {\n        SqlSession session = sqlSessionFactory.openSession();\n        try {\n            StudentDao studentDao = session.getMapper(StudentDao.class);\n            studentDao.findByPaging(1, new RowBounds(20, 10));\n        } finally {\n            session.close();\n        }\n    }\n}\n')])])]),n("p",[e._v("上面代码运行之后，会打印如下日志。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://blog-pictures.oss-cn-shanghai.aliyuncs.com/15352145822059.jpg",alt:"img"}})]),e._v(" "),n("p",[e._v("在上面的输出中，SQL 语句中包含了 LIMIT 字样，这说明插件生效了。")])])}),[],!1,null,null,null);t.default=r.exports}}]);