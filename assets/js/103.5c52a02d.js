(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{532:function(t,e,u){"use strict";u.r(e);var a=u(30),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,u=t._self._c||e;return u("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[u("h1",{attrs:{id:"futuretask基本操作总结"}},[u("a",{staticClass:"header-anchor",attrs:{href:"#futuretask基本操作总结"}},[t._v("#")]),t._v(" FutureTask基本操作总结")]),t._v(" "),u("h2",{attrs:{id:"_1-futuretask-简介"}},[u("a",{staticClass:"header-anchor",attrs:{href:"#_1-futuretask-简介"}},[t._v("#")]),t._v(" 1.FutureTask 简介")]),t._v(" "),u("p",[t._v("在 Executors 框架体系中，FutureTask 用来表示可获取结果的异步任务。FutureTask 实现了 Future 接口，FutureTask 提供了启动和取消异步任务，查询异步任务是否计算结束以及获取最终的异步任务的结果的一些常用的方法。通过"),u("code",[t._v("get()")]),t._v("方法来获取异步任务的结果，但是会阻塞当前线程直至异步任务执行结束。一旦任务执行结束，任务不能重新启动或取消，除非调用"),u("code",[t._v("runAndReset()")]),t._v("方法。在 FutureTask 的源码中为其定义了这些状态：")]),t._v(" "),u("div",{staticClass:"language- extra-class"},[u("pre",{pre:!0,attrs:{class:"language-text"}},[u("code",[t._v("private static final int NEW          = 0;\nprivate static final int COMPLETING   = 1;\nprivate static final int NORMAL       = 2;\nprivate static final int EXCEPTIONAL  = 3;\nprivate static final int CANCELLED    = 4;\nprivate static final int INTERRUPTING = 5;\nprivate static final int INTERRUPTED  = 6;\n复制代码\n")])])]),u("p",[t._v("另外，在《java 并发编程的艺术》一书，作者根据 FutureTask.run()方法的执行的时机，FutureTask 分为了 3 种状态：")]),t._v(" "),u("ol",[u("li",[u("strong",[t._v("未启动")]),t._v("。FutureTask.run()方法还没有被执行之前，FutureTask 处于未启动状态。当创建一个 FutureTask，还没有执行 FutureTask.run()方法之前，FutureTask 处于未启动状态。")]),t._v(" "),u("li",[u("strong",[t._v("已启动")]),t._v("。FutureTask.run()方法被执行的过程中，FutureTask 处于已启动状态。")]),t._v(" "),u("li",[u("strong",[t._v("已完成")]),t._v("。FutureTask.run()方法执行结束，或者调用 FutureTask.cancel(...)方法取消任务，或者在执行任务期间抛出异常，这些情况都称之为 FutureTask 的已完成状态。")])]),t._v(" "),u("p",[t._v("下图总结了 FutureTask 的状态变化的过程：")]),t._v(" "),u("p",[t._v('![FutureTask状态迁移图.jpg](data:image/svg+xml;utf8,<?xml version="1.0"?>'),u("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",version:"1.1",width:"1240",height:"541"}}),t._v(")FutureTask状态迁移图.jpg")]),t._v(" "),u("p",[t._v("由于 FutureTask 具有这三种状态，因此执行 FutureTask 的 get 方法和 cancel 方法，当前处于不同的状态对应的结果也是大不相同。这里对 get 方法和 cancel 方法做个总结：")]),t._v(" "),u("blockquote",[u("p",[t._v("get 方法")])]),t._v(" "),u("p",[t._v("当 FutureTask 处于未启动或已启动状态时，执行 FutureTask.get()方法将导致调用线程阻塞。如果 FutureTask 处于已完成状态，调用 FutureTask.get()方法将导致调用线程立即返回结果或者抛出异常")]),t._v(" "),u("blockquote",[u("p",[t._v("cancel 方法")])]),t._v(" "),u("p",[t._v("当 FutureTask 处于"),u("strong",[t._v("未启动状态")]),t._v("时，执行 FutureTask.cancel()方法将此任务永远不会执行；")]),t._v(" "),u("p",[t._v("当 FutureTask 处于"),u("strong",[t._v("已启动状态")]),t._v("时，执行 FutureTask.cancel(true)方法将以中断线程的方式来阻止任务继续进行，如果执行 FutureTask.cancel(false)将不会对正在执行任务的线程有任何影响；")]),t._v(" "),u("p",[t._v("当"),u("strong",[t._v("FutureTask")]),t._v("处于已完成状态时，执行 FutureTask.cancel(...)方法将返回 false。")]),t._v(" "),u("p",[t._v("对 Future 的 get()方法和 cancel()方法用下图进行总结")]),t._v(" "),u("p",[u("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/5/6/16334a72fd899d43?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"FutureTask的get和cancel的执行示意图.jpg"}}),t._v("FutureTask的get和cancel的执行示意图.jpg")]),t._v(" "),u("h2",{attrs:{id:"_2-futuretask-的基本使用"}},[u("a",{staticClass:"header-anchor",attrs:{href:"#_2-futuretask-的基本使用"}},[t._v("#")]),t._v(" 2. FutureTask 的基本使用")]),t._v(" "),u("p",[t._v("FutureTask 除了实现 Future 接口外，还实现了 Runnable 接口。因此，FutureTask 可以交给 Executor 执行，也可以由调用的线程直接执行（FutureTask.run()）。另外，FutureTask 的获取也可以通过 ExecutorService.submit()方法返回一个 FutureTask 对象，然后在通过 FutureTask.get()或者 FutureTask.cancel 方法。")]),t._v(" "),u("p",[t._v("**应用场景：**当一个线程需要等待另一个线程把某个任务执行完后它才能继续执行，此时可以使用 FutureTask。假设有多个线程执行若干任务，每个任务最多只能被执行一次。当多个线程试图执行同一个任务时，只允许一个线程执行任务，其他线程需要等待这个任务执行完后才能继续执行。")]),t._v(" "),u("p",[t._v("来源于 https://juejin.cn/post/6844903602457149453")])])}),[],!1,null,null,null);e.default=r.exports}}]);