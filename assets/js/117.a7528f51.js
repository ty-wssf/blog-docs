(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{532:function(e,t,n){"use strict";n.r(t);var r=n(30),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"深入理解读写锁reentrantreadwritelock"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#深入理解读写锁reentrantreadwritelock"}},[e._v("#")]),e._v(" 深入理解读写锁ReentrantReadWriteLock")]),e._v(" "),n("h2",{attrs:{id:"_1-读写锁的介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-读写锁的介绍"}},[e._v("#")]),e._v(" 1.读写锁的介绍")]),e._v(" "),n("p",[e._v("在并发场景中用于解决线程安全的问题，我们几乎会高频率的使用到独占式锁，通常使用java提供的关键字synchronized（关于synchronized可以"),n("a",{attrs:{href:"https://juejin.im/post/6844903600334831629",target:"_blank",rel:"noopener noreferrer"}},[e._v("看这篇文章"),n("OutboundLink")],1),e._v("）或者concurrents包中实现了Lock接口的"),n("a",{attrs:{href:"https://juejin.im/post/6844903601542807559",target:"_blank",rel:"noopener noreferrer"}},[e._v("ReentrantLock"),n("OutboundLink")],1),e._v("。它们都是独占式获取锁，也就是在同一时刻只有一个线程能够获取锁。而在一些业务场景中，大部分只是读数据，写数据很少，如果仅仅是读数据的话并不会影响数据正确性（出现脏读），而如果在这种业务场景下，依然使用独占锁的话，很显然这将是出现性能瓶颈的地方。针对这种读多写少的情况，java还提供了另外一个实现Lock接口的ReentrantReadWriteLock(读写锁)。"),n("strong",[e._v("读写所允许同一时刻被多个读线程访问，但是在写线程访问时，所有的读线程和其他的写线程都会被阻塞")]),e._v("。在分析WirteLock和ReadLock的互斥性时可以按照WriteLock与WriteLock之间，WriteLock与ReadLock之间以及ReadLock与ReadLock之间进行分析。更多关于读写锁特性介绍大家可以看源码上的介绍（阅读源码时最好的一种学习方式，我也正在学习中，与大家共勉），这里做一个归纳总结：")]),e._v(" "),n("ol",[n("li",[n("strong",[e._v("公平性选择")]),e._v("：支持非公平性（默认）和公平的锁获取方式，吞吐量还是非公平优于公平；")]),e._v(" "),n("li",[n("strong",[e._v("重入性")]),e._v("：支持重入，读锁获取后能再次获取，写锁获取之后能够再次获取写锁，同时也能够获取读锁；")]),e._v(" "),n("li",[n("strong",[e._v("锁降级")]),e._v("：遵循获取写锁，获取读锁再释放写锁的次序，写锁能够降级成为读锁")])]),e._v(" "),n("p",[e._v("要想能够彻底的理解读写锁必须能够理解这样几个问题：")]),e._v(" "),n("ol",[n("li",[e._v("读写锁是怎样实现分别记录读写状态的？")]),e._v(" "),n("li",[e._v("写锁是怎样获取和释放的？")]),e._v(" "),n("li",[e._v("读锁是怎样获取和释放的？我们带着这样的三个问题，再去了解下读写锁。")])]),e._v(" "),n("h2",{attrs:{id:"_2-写锁详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-写锁详解"}},[e._v("#")]),e._v(" 2.写锁详解")]),e._v(" "),n("h3",{attrs:{id:"_2-1-写锁的获取"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-写锁的获取"}},[e._v("#")]),e._v(" 2.1.写锁的获取")]),e._v(" "),n("p",[e._v("同步组件的实现聚合了同步器（AQS），并通过重写重写同步器（AQS）中的方法实现同步组件的同步语义（关于同步组件的实现层级结构可以"),n("a",{attrs:{href:"https://juejin.im/post/6844903601534418958",target:"_blank",rel:"noopener noreferrer"}},[e._v("看这篇文章"),n("OutboundLink")],1),e._v("，AQS的底层实现分析可以"),n("a",{attrs:{href:"https://juejin.im/post/6844903601538596877",target:"_blank",rel:"noopener noreferrer"}},[e._v("看这篇文章"),n("OutboundLink")],1),e._v("）。因此，写锁的实现依然也是采用这种方式。在同一时刻写锁是不能被多个线程所获取，很显然写锁是独占式锁，而实现写锁的同步语义是通过重写AQS中的tryAcquire方法实现的。源码为:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('protected final boolean tryAcquire(int acquires) {\n    /*\n     * Walkthrough:\n     * 1. If read count nonzero or write count nonzero\n     *    and owner is a different thread, fail.\n     * 2. If count would saturate, fail. (This can only\n     *    happen if count is already nonzero.)\n     * 3. Otherwise, this thread is eligible for lock if\n     *    it is either a reentrant acquire or\n     *    queue policy allows it. If so, update state\n     *    and set owner.\n     */\n    Thread current = Thread.currentThread();\n\t// 1. 获取写锁当前的同步状态\n    int c = getState();\n\t// 2. 获取写锁获取的次数\n    int w = exclusiveCount(c);\n    if (c != 0) {\n        // (Note: if c != 0 and w == 0 then shared count != 0)\n\t\t// 3.1 当读锁已被读线程获取或者当前线程不是已经获取写锁的线程的话\n\t\t// 当前线程获取写锁失败\n        if (w == 0 || current != getExclusiveOwnerThread())\n            return false;\n        if (w + exclusiveCount(acquires) > MAX_COUNT)\n            throw new Error("Maximum lock count exceeded");\n        // Reentrant acquire\n\t\t// 3.2 当前线程获取写锁，支持可重复加锁\n        setState(c + acquires);\n        return true;\n    }\n\t// 3.3 写锁未被任何线程获取，当前线程可获取写锁\n    if (writerShouldBlock() ||\n        !compareAndSetState(c, c + acquires))\n        return false;\n    setExclusiveOwnerThread(current);\n    return true;\n}\n')])])]),n("p",[e._v("这段代码的逻辑请看注释，这里有一个地方需要重点关注，exclusiveCount(c)方法，该方法源码为：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("static int exclusiveCount(int c) { return c & EXCLUSIVE_MASK; }\n")])])]),n("p",[e._v("其中"),n("strong",[e._v("EXCLUSIVE_MASK")]),e._v("为:  "),n("code",[e._v("static final int EXCLUSIVE_MASK = (1 << SHARED_SHIFT) - 1;")]),e._v("      EXCLUSIVE _MASK为1左移16位然后减1，即为0x0000FFFF。而exclusiveCount方法是将同步状态（state为int类型）与0x0000FFFF相与，即取同步状态的低16位。那么低16位代表什么呢？根据exclusiveCount方法的注释为独占式获取的次数即写锁被获取的次数，现在就可以得出来一个结论"),n("strong",[e._v("同步状态的低16位用来表示写锁的获取次数")]),e._v("。同时还有一个方法值得我们注意：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("static int sharedCount(int c)    { return c >>> SHARED_SHIFT; }\n")])])]),n("p",[e._v("该方法是获取读锁被获取的次数，是将同步状态（int c）右移16次，即取同步状态的高16位，现在我们可以得出另外一个结论"),n("strong",[e._v("同步状态的高16位用来表示读锁被获取的次数")]),e._v("。现在还记得我们开篇说的需要弄懂的第一个问题吗？读写锁是怎样实现分别记录读锁和写锁的状态的，现在这个问题的答案就已经被我们弄清楚了，其示意图如下图所示：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/5/3/163262ec97ebeac9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"读写锁的读写状态设计.png"}})]),e._v(" "),n("p",[e._v("现在我们回过头来看写锁获取方法tryAcquire，其主要逻辑为："),n("strong",[e._v("当读锁已经被读线程获取或者写锁已经被其他写线程获取，则写锁获取失败；否则，获取成功并支持重入，增加写状态。")])]),e._v(" "),n("h3",{attrs:{id:"_2-2-写锁的释放"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-写锁的释放"}},[e._v("#")]),e._v(" 2.2.写锁的释放")]),e._v(" "),n("p",[e._v("写锁释放通过重写AQS的tryRelease方法，源码为：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("protected final boolean tryRelease(int releases) {\n    if (!isHeldExclusively())\n        throw new IllegalMonitorStateException();\n\t//1. 同步状态减去写状态\n    int nextc = getState() - releases;\n\t//2. 当前写状态是否为0，为0则释放写锁\n    boolean free = exclusiveCount(nextc) == 0;\n    if (free)\n        setExclusiveOwnerThread(null);\n\t//3. 不为0则更新同步状态\n    setState(nextc);\n    return free;\n}\n")])])]),n("p",[e._v("源码的实现逻辑请看注释，不难理解与ReentrantLock基本一致，这里需要注意的是，减少写状态"),n("code",[e._v("int nextc = getState() - releases;")]),e._v("只需要用"),n("strong",[e._v("当前同步状态直接减去写状态的原因正是我们刚才所说的写状态是由同步状态的低16位表示的")]),e._v("。")]),e._v(" "),n("h2",{attrs:{id:"_3-读锁详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-读锁详解"}},[e._v("#")]),e._v(" 3.读锁详解")]),e._v(" "),n("h3",{attrs:{id:"_3-1-读锁的获取"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-读锁的获取"}},[e._v("#")]),e._v(" 3.1.读锁的获取")]),e._v(" "),n("p",[e._v("看完了写锁，现在来看看读锁，读锁不是独占式锁，即同一时刻该锁可以被多个读线程获取也就是一种共享式锁。按照之前对AQS介绍，实现共享式同步组件的同步语义需要通过重写AQS的tryAcquireShared方法和tryReleaseShared方法。读锁的获取实现方法为：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("protected final int tryAcquireShared(int unused) {\n    /*\n     * Walkthrough:\n     * 1. If write lock held by another thread, fail.\n     * 2. Otherwise, this thread is eligible for\n     *    lock wrt state, so ask if it should block\n     *    because of queue policy. If not, try\n     *    to grant by CASing state and updating count.\n     *    Note that step does not check for reentrant\n     *    acquires, which is postponed to full version\n     *    to avoid having to check hold count in\n     *    the more typical non-reentrant case.\n     * 3. If step 2 fails either because thread\n     *    apparently not eligible or CAS fails or count\n     *    saturated, chain to version with full retry loop.\n     */\n    Thread current = Thread.currentThread();\n    int c = getState();\n\t//1. 如果写锁已经被获取并且获取写锁的线程不是当前线程的话，当前\n\t// 线程获取读锁失败返回-1\n    if (exclusiveCount(c) != 0 &&\n        getExclusiveOwnerThread() != current)\n        return -1;\n    int r = sharedCount(c);\n    if (!readerShouldBlock() &&\n        r < MAX_COUNT &&\n\t\t//2. 当前线程获取读锁\n        compareAndSetState(c, c + SHARED_UNIT)) {\n\t\t//3. 下面的代码主要是新增的一些功能，比如getReadHoldCount()方法\n\t\t//返回当前获取读锁的次数\n        if (r == 0) {\n            firstReader = current;\n            firstReaderHoldCount = 1;\n        } else if (firstReader == current) {\n            firstReaderHoldCount++;\n        } else {\n            HoldCounter rh = cachedHoldCounter;\n            if (rh == null || rh.tid != getThreadId(current))\n                cachedHoldCounter = rh = readHolds.get();\n            else if (rh.count == 0)\n                readHolds.set(rh);\n            rh.count++;\n        }\n        return 1;\n    }\n\t//4. 处理在第二步中CAS操作失败的自旋已经实现重入性\n    return fullTryAcquireShared(current);\n}\n")])])]),n("p",[e._v("代码的逻辑请看注释，需要注意的是  "),n("strong",[e._v("当写锁被其他线程获取后，读锁获取失败")]),e._v("，否则获取成功利用CAS更新同步状态。另外，当前同步状态需要加上SHARED_UNIT（"),n("code",[e._v("(1 << SHARED_SHIFT)")]),e._v("即0x00010000）的原因这是我们在上面所说的同步状态的高16位用来表示读锁被获取的次数。如果CAS失败或者已经获取读锁的线程再次获取读锁时，是靠fullTryAcquireShared方法实现的，这段代码就不展开说了，有兴趣可以看看。")]),e._v(" "),n("h3",{attrs:{id:"_3-2-读锁的释放"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-读锁的释放"}},[e._v("#")]),e._v(" 3.2.读锁的释放")]),e._v(" "),n("p",[e._v("读锁释放的实现主要通过方法tryReleaseShared，源码如下，主要逻辑请看注释：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("protected final boolean tryReleaseShared(int unused) {\n    Thread current = Thread.currentThread();\n\t// 前面还是为了实现getReadHoldCount等新功能\n    if (firstReader == current) {\n        // assert firstReaderHoldCount > 0;\n        if (firstReaderHoldCount == 1)\n            firstReader = null;\n        else\n            firstReaderHoldCount--;\n    } else {\n        HoldCounter rh = cachedHoldCounter;\n        if (rh == null || rh.tid != getThreadId(current))\n            rh = readHolds.get();\n        int count = rh.count;\n        if (count <= 1) {\n            readHolds.remove();\n            if (count <= 0)\n                throw unmatchedUnlockException();\n        }\n        --rh.count;\n    }\n    for (;;) {\n        int c = getState();\n\t\t// 读锁释放 将同步状态减去读状态即可\n        int nextc = c - SHARED_UNIT;\n        if (compareAndSetState(c, nextc))\n            // Releasing the read lock has no effect on readers,\n            // but it may allow waiting writers to proceed if\n            // both read and write locks are now free.\n            return nextc == 0;\n    }\n}\n")])])]),n("h2",{attrs:{id:"_4-锁降级"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-锁降级"}},[e._v("#")]),e._v(" 4.锁降级")]),e._v(" "),n("p",[e._v("读写锁支持锁降级，"),n("strong",[e._v("遵循按照获取写锁，获取读锁再释放写锁的次序，写锁能够降级成为读锁")]),e._v("，不支持锁升级，关于锁降级下面的示例代码摘自ReentrantWriteReadLock源码中：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("void processCachedData() {\n        rwl.readLock().lock();\n        if (!cacheValid) {\n            // Must release read lock before acquiring write lock\n            rwl.readLock().unlock();\n            rwl.writeLock().lock();\n            try {\n                // Recheck state because another thread might have\n                // acquired write lock and changed state before we did.\n                if (!cacheValid) {\n                    data = ...\n            cacheValid = true;\n          }\n          // Downgrade by acquiring read lock before releasing write lock\n          rwl.readLock().lock();\n        } finally {\n          rwl.writeLock().unlock(); // Unlock write, still hold read\n        }\n      }\n \n      try {\n        use(data);\n      } finally {\n        rwl.readLock().unlock();\n      }\n    }\n}\n")])])]),n("p",[e._v("来源于 https://juejin.cn/post/6844903601546985485")])])}),[],!1,null,null,null);t.default=a.exports}}]);