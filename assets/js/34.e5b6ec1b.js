(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{451:function(e,t,n){"use strict";n.r(t);var a=n(30),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"mybatis-源码分析-sql-的执行过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-源码分析-sql-的执行过程"}},[e._v("#")]),e._v(" MyBatis 源码分析 - SQL 的执行过程")]),e._v(" "),n("h2",{attrs:{id:"本文速览"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#本文速览"}},[e._v("#")]),e._v(" 本文速览")]),e._v(" "),n("p",[e._v("本篇文章较为详细的介绍了 MyBatis 执行 SQL 的过程。该过程本身比较复杂，牵涉到的技术点比较多。包括但不限于 Mapper 接口代理类的生成、接口方法的解析、SQL 语句的解析、运行时参数的绑定、查询结果自动映射、延迟加载等。本文对所列举的技术点，以及部分未列举的技术点都做了较为详细的分析。全文篇幅很大，需要大家耐心阅读。下面来看一下本文的目录：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://blog-pictures.oss-cn-shanghai.aliyuncs.com/15344933870130.jpg",alt:"img"}})]),e._v(" "),n("p",[e._v("源码分析类文章通常比较枯燥。因此，我在分析源码的过程中写了一些示例，同时也绘制了一些图片。希望通过这些示例和图片，帮助大家理解 MyBatis 的源码。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://blog-pictures.oss-cn-shanghai.aliyuncs.com/15344935868615.jpg",alt:"img"}})]),e._v(" "),n("p",[e._v("本篇文章篇幅很大，全文字数约 26000 字，阅读时间预计超过 100 分钟。通读本文可能会比较累，大家可以分次阅读。好了，本文的速览就先到这，下面进入正文。")]),e._v(" "),n("h2",{attrs:{id:"_1-简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-简介"}},[e._v("#")]),e._v(" 1.简介")]),e._v(" "),n("p",[e._v("在前面的文章中，我分析了配置文件和映射文件的解析过程。经过前面复杂的解析过程后，现在，MyBatis 已经进入了就绪状态，等待使用者发号施令。本篇文章我将分析MyBatis 执行 SQL 的过程，该过程比较复杂，涉及的技术点很多。包括但不限于以下技术点：")]),e._v(" "),n("ol",[n("li",[e._v("为 mapper 接口生成实现类")]),e._v(" "),n("li",[e._v("根据配置信息生成 SQL，并将运行时参数设置到 SQL 中")]),e._v(" "),n("li",[e._v("一二级缓存的实现")]),e._v(" "),n("li",[e._v("插件机制")]),e._v(" "),n("li",[e._v("数据库连接的获取与管理")]),e._v(" "),n("li",[e._v("查询结果的处理，以及延迟加载等")])]),e._v(" "),n("p",[e._v("如果大家能掌握上面的技术点，那么对 MyBatis 的原理将会有很深入的理解。若将以上技术点一一展开分析，会导致文章篇幅很大，因此我打算将以上知识点分成数篇文章进行分析。本篇文章将分析以上列表中的第1个、第2个以及第6个技术点，其他技术点将会在随后的文章中进行分析。好了，其他的就不多说了，下面开始我们的源码分析之旅。")]),e._v(" "),n("h2",{attrs:{id:"_2-sql-执行过程分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-sql-执行过程分析"}},[e._v("#")]),e._v(" 2.SQL 执行过程分析")]),e._v(" "),n("h3",{attrs:{id:"_2-1-sql-执行入口分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-sql-执行入口分析"}},[e._v("#")]),e._v(" 2.1 SQL 执行入口分析")]),e._v(" "),n("p",[e._v("在单独使用 MyBatis 进行数据库操作时，我们通常都会先调用 SqlSession 接口的 getMapper 方法为我们的 Mapper 接口生成实现类。然后就可以通过 Mapper 进行数据库操作。比如像下面这样：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("ArticleMapper articleMapper = session.getMapper(ArticleMapper.class);\nArticle article = articleMapper.findOne(1);\n")])])]),n("p",[e._v("如果大家对 MyBatis 较为理解，会知道 SqlSession 是通过 JDK 动态代理的方式为接口生成代理对象的。在调用接口方法时，方法调用会被代理逻辑拦截。在代理逻辑中可根据方法名及方法归属接口获取到当前方法对应的 SQL 以及其他一些信息，拿到这些信息即可进行数据库操作。")]),e._v(" "),n("p",[e._v("上面是一个简版的 SQL 执行过程，省略了很多细节。下面我们先按照这个简版的流程进行分析，首先我们来看一下 Mapper 接口的代理对象创建过程。")]),e._v(" "),n("h4",{attrs:{id:"_2-1-1-为-mapper-接口创建代理对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-为-mapper-接口创建代理对象"}},[e._v("#")]),e._v(" 2.1.1 为 Mapper 接口创建代理对象")]),e._v(" "),n("p",[e._v("本节，我们从 DefaultSqlSession 的 getMapper 方法开始看起，如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// -☆- DefaultSqlSession\npublic <T> T getMapper(Class<T> type) {\n    return configuration.<T>getMapper(type, this);\n}\n\n// -☆- Configuration\npublic <T> T getMapper(Class<T> type, SqlSession sqlSession) {\n    return mapperRegistry.getMapper(type, sqlSession);\n}\n\n// -☆- MapperRegistry\npublic <T> T getMapper(Class<T> type, SqlSession sqlSession) {\n    // 从 knownMappers 中获取与 type 对应的 MapperProxyFactory\n    final MapperProxyFactory<T> mapperProxyFactory = (MapperProxyFactory<T>) knownMappers.get(type);\n    if (mapperProxyFactory == null) {\n        throw new BindingException("Type " + type + " is not known to the MapperRegistry.");\n    }\n    try {\n        // 创建代理对象\n        return mapperProxyFactory.newInstance(sqlSession);\n    } catch (Exception e) {\n        throw new BindingException("Error getting mapper instance. Cause: " + e, e);\n    }\n}\n')])])]),n("p",[e._v("如上，经过连续的调用，Mapper 接口代理对象的创建逻辑初现端倪。如果没看过我前面的分析文章，大家可能不知道 knownMappers 集合中的元素是何时存入的。这里再说一遍吧，MyBatis 在解析配置文件的 "),n("mappers",[e._v(" 节点的过程中，会调用 MapperRegistry 的 addMapper 方法将 Class 到 MapperProxyFactory 对象的映射关系存入到 knownMappers。具体的代码就不分析了，大家可以阅读我之前写的文章，或者自行分析相关的代码。")])],1),e._v(" "),n("p",[e._v("在获取到 MapperProxyFactory 对象后，即可调用工厂方法为 Mapper 接口生成代理对象了。相关逻辑如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// -☆- MapperProxyFactory\npublic T newInstance(SqlSession sqlSession) {\n    /*\n     * 创建 MapperProxy 对象，MapperProxy 实现了 \n     * InvocationHandler 接口，代理逻辑封装在此类中\n     */\n    final MapperProxy<T> mapperProxy = new MapperProxy<T>(sqlSession, mapperInterface, methodCache);\n    return newInstance(mapperProxy);\n}\n\nprotected T newInstance(MapperProxy<T> mapperProxy) {\n    // 通过 JDK 动态代理创建代理对象\n    return (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), new Class[]{mapperInterface}, mapperProxy);\n}\n")])])]),n("p",[e._v("上面的代码首先创建了一个 MapperProxy 对象，该对象实现了 InvocationHandler 接口。然后将对象作为参数传给重载方法，并在重载方法中调用 JDK 动态代理接口为 Mapper 生成代理对象。")]),e._v(" "),n("p",[e._v("到此，关于 Mapper 接口代理对象的创建过程就分析完了。现在我们的 ArticleMapper 接口指向的代理对象已经创建完毕，下面就可以调用接口方法进行数据库操作了。由于接口方法会被代理逻辑拦截，所以下面我们把目光聚焦在代理逻辑上面，看看代理逻辑会做哪些事情。")]),e._v(" "),n("h4",{attrs:{id:"_2-1-2-执行代理逻辑"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-执行代理逻辑"}},[e._v("#")]),e._v(" 2.1.2 执行代理逻辑")]),e._v(" "),n("p",[e._v("在 MyBatis 中，Mapper 接口方法的代理逻辑实现的比较简单。该逻辑首先会对拦截的方法进行一些检测，以决定是否执行后续的数据库操作。对应的代码如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n    try {\n        // 如果方法是定义在 Object 类中的，则直接调用\n        if (Object.class.equals(method.getDeclaringClass())) {\n            return method.invoke(this, args);\n            \n        /*\n         * 下面的代码最早出现在 mybatis-3.4.2 版本中，用于支持 JDK 1.8 中的\n         * 新特性 - 默认方法。这段代码的逻辑就不分析了，有兴趣的同学可以\n         * 去 Github 上看一下相关的相关的讨论（issue #709），链接如下：\n         * \n         *   https://github.com/mybatis/mybatis-3/issues/709\n         */  \n        } else if (isDefaultMethod(method)) {\n            return invokeDefaultMethod(proxy, method, args);\n        }\n    } catch (Throwable t) {\n        throw ExceptionUtil.unwrapThrowable(t);\n    }\n    \n    // 从缓存中获取 MapperMethod 对象，若缓存未命中，则创建 MapperMethod 对象\n    final MapperMethod mapperMethod = cachedMapperMethod(method);\n    \n    // 调用 execute 方法执行 SQL\n    return mapperMethod.execute(sqlSession, args);\n}\n")])])]),n("p",[e._v("如上，代理逻辑会首先检测被拦截的方法是不是定义在 Object 中的，比如 equals、hashCode 方法等。对于这类方法，直接执行即可。除此之外，MyBatis 从 3.4.2 版本开始，对 JDK 1.8 接口的默认方法提供了支持，具体就不分析了。完成相关检测后，紧接着从缓存中获取或者创建 MapperMethod 对象，然后通过该对象中的 execute 方法执行 SQL。在分析 execute 方法之前，我们先来看一下 MapperMethod 对象的创建过程。MapperMethod 的创建过程看似普通，但却包含了一些重要的逻辑，所以不能忽视。")]),e._v(" "),n("h5",{attrs:{id:"_2-1-2-1-创建-mappermethod-对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-1-创建-mappermethod-对象"}},[e._v("#")]),e._v(" 2.1.2.1 创建 MapperMethod 对象")]),e._v(" "),n("p",[e._v("本节来分析一下 MapperMethod 的构造方法，看看它的构造方法中都包含了哪些逻辑。如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class MapperMethod {\n\n    private final SqlCommand command;\n    private final MethodSignature method;\n\n    public MapperMethod(Class<?> mapperInterface, Method method, Configuration config) {\n        // 创建 SqlCommand 对象，该对象包含一些和 SQL 相关的信息\n        this.command = new SqlCommand(config, mapperInterface, method);\n        // 创建 MethodSignature 对象，从类名中可知，该对象包含了被拦截方法的一些信息\n        this.method = new MethodSignature(config, mapperInterface, method);\n    }\n}\n")])])]),n("p",[e._v("如上，MapperMethod 构造方法的逻辑很简单，主要是创建 SqlCommand 和 MethodSignature 对象。这两个对象分别记录了不同的信息，这些信息在后续的方法调用中都会被用到。下面我们深入到这两个类的构造方法中，探索它们的初始化逻辑。")]),e._v(" "),n("h6",{attrs:{id:"_1-创建-sqlcommand-对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建-sqlcommand-对象"}},[e._v("#")]),e._v(" ① 创建 SqlCommand 对象")]),e._v(" "),n("p",[e._v("前面说了 SqlCommand 中保存了一些和 SQL 相关的信息，那具体有哪些信息呢？答案在下面的代码中。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public static class SqlCommand {\n\n    private final String name;\n    private final SqlCommandType type;\n\n    public SqlCommand(Configuration configuration, Class<?> mapperInterface, Method method) {\n        final String methodName = method.getName();\n        final Class<?> declaringClass = method.getDeclaringClass();\n        // 解析 MappedStatement\n        MappedStatement ms = resolveMappedStatement(mapperInterface, methodName, declaringClass, configuration);\n        \n        // 检测当前方法是否有对应的 MappedStatement\n        if (ms == null) {\n            // 检测当前方法是否有 @Flush 注解\n            if (method.getAnnotation(Flush.class) != null) {\n                // 设置 name 和 type 遍历\n                name = null;\n                type = SqlCommandType.FLUSH;\n            } else {\n                /*\n                 * 若 ms == null 且方法无 @Flush 注解，此时抛出异常。\n                 * 这个异常比较常见，大家应该眼熟吧\n                 */ \n                throw new BindingException("Invalid bound statement (not found): "\n                    + mapperInterface.getName() + "." + methodName);\n            }\n        } else {\n            // 设置 name 和 type 变量\n            name = ms.getId();\n            type = ms.getSqlCommandType();\n            if (type == SqlCommandType.UNKNOWN) {\n                throw new BindingException("Unknown execution method for: " + name);\n            }\n        }\n    }\n}\n')])])]),n("p",[e._v("如上，SqlCommand 的构造方法主要用于初始化它的两个成员变量。代码不是很长，逻辑也不难理解，就不多说了。继续往下看。")]),e._v(" "),n("h6",{attrs:{id:"_2-创建-methodsignature-对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-创建-methodsignature-对象"}},[e._v("#")]),e._v(" ② 创建 MethodSignature 对象")]),e._v(" "),n("p",[e._v("MethodSignature 即方法签名，顾名思义，该类保存了一些和目标方法相关的信息。比如目标方法的返回类型，目标方法的参数列表信息等。下面，我们来分析一下 MethodSignature 的构造方法。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public static class MethodSignature {\n\n    private final boolean returnsMany;\n    private final boolean returnsMap;\n    private final boolean returnsVoid;\n    private final boolean returnsCursor;\n    private final Class<?> returnType;\n    private final String mapKey;\n    private final Integer resultHandlerIndex;\n    private final Integer rowBoundsIndex;\n    private final ParamNameResolver paramNameResolver;\n\n    public MethodSignature(Configuration configuration, Class<?> mapperInterface, Method method) {\n\n        // 通过反射解析方法返回类型\n        Type resolvedReturnType = TypeParameterResolver.resolveReturnType(method, mapperInterface);\n        if (resolvedReturnType instanceof Class<?>) {\n            this.returnType = (Class<?>) resolvedReturnType;\n        } else if (resolvedReturnType instanceof ParameterizedType) {\n            this.returnType = (Class<?>) ((ParameterizedType) resolvedReturnType).getRawType();\n        } else {\n            this.returnType = method.getReturnType();\n        }\n        \n        // 检测返回值类型是否是 void、集合或数组、Cursor、Map 等\n        this.returnsVoid = void.class.equals(this.returnType);\n        this.returnsMany = configuration.getObjectFactory().isCollection(this.returnType) || this.returnType.isArray();\n        this.returnsCursor = Cursor.class.equals(this.returnType);\n        // 解析 @MapKey 注解，获取注解内容\n        this.mapKey = getMapKey(method);\n        this.returnsMap = this.mapKey != null;\n        /*\n         * 获取 RowBounds 参数在参数列表中的位置，如果参数列表中\n         * 包含多个 RowBounds 参数，此方法会抛出异常\n         */ \n        this.rowBoundsIndex = getUniqueParamIndex(method, RowBounds.class);\n        // 获取 ResultHandler 参数在参数列表中的位置\n        this.resultHandlerIndex = getUniqueParamIndex(method, ResultHandler.class);\n        // 解析参数列表\n        this.paramNameResolver = new ParamNameResolver(configuration, method);\n    }\n}\n")])])]),n("p",[e._v("上面的代码用于检测目标方法的返回类型，以及解析目标方法参数列表。其中，检测返回类型的目的是为避免查询方法返回错误的类型。比如我们要求接口方法返回一个对象，结果却返回了对象集合，这会导致类型转换错误。关于返回值类型的解析过程先说到这，下面分析参数列表的解析过程。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class ParamNameResolver {\n\n    private static final String GENERIC_NAME_PREFIX = "param";\n    private final SortedMap<Integer, String> names;\n\n    public ParamNameResolver(Configuration config, Method method) {\n        // 获取参数类型列表\n        final Class<?>[] paramTypes = method.getParameterTypes();\n        // 获取参数注解\n        final Annotation[][] paramAnnotations = method.getParameterAnnotations();\n        final SortedMap<Integer, String> map = new TreeMap<Integer, String>();\n        int paramCount = paramAnnotations.length;\n\n        for (int paramIndex = 0; paramIndex < paramCount; paramIndex++) {\n            // 检测当前的参数类型是否为 RowBounds 或 ResultHandler\n            if (isSpecialParameter(paramTypes[paramIndex])) {\n                continue;\n            }\n            String name = null;\n            for (Annotation annotation : paramAnnotations[paramIndex]) {\n                if (annotation instanceof Param) {\n                    hasParamAnnotation = true;\n                    // 获取 @Param 注解内容\n                    name = ((Param) annotation).value();\n                    break;\n                }\n            }\n            // name 为空，表明未给参数配置 @Param 注解\n            if (name == null) {\n                // 检测是否设置了 useActualParamName 全局配置\n                if (config.isUseActualParamName()) {\n                    /*\n                     * 通过反射获取参数名称。此种方式要求 JDK 版本为 1.8+，\n                     * 且要求编译时加入 -parameters 参数，否则获取到的参数名\n                     * 仍然是 arg1, arg2, ..., argN\n                     */\n                    name = getActualParamName(method, paramIndex);\n                }\n                if (name == null) {\n                    /*\n                     * 使用 map.size() 返回值作为名称，思考一下为什么不这样写：\n                     *   name = String.valueOf(paramIndex);\n                     * 因为如果参数列表中包含 RowBounds 或 ResultHandler，这两个参数\n                     * 会被忽略掉，这样将导致名称不连续。\n                     *\n                     * 比如参数列表 (int p1, int p2, RowBounds rb, int p3)\n                     *  - 期望得到名称列表为 ["0", "1", "2"]\n                     *  - 实际得到名称列表为 ["0", "1", "3"]\n                     */\n                    name = String.valueOf(map.size());\n                }\n            }\n            // 存储 paramIndex 到 name 的映射\n            map.put(paramIndex, name);\n        }\n        names = Collections.unmodifiableSortedMap(map);\n    }\n}\n')])])]),n("p",[e._v("以上就是方法参数列表的解析过程，解析完毕后，可得到参数下标到参数名的映射关系，这些映射关系最终存储在 ParamNameResolver 的 names 成员变量中。这些映射关系将会在后面的代码中被用到，大家留意一下。")]),e._v(" "),n("p",[e._v("下面写点代码测试一下 ParamNameResolver 的解析逻辑。如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class ParamNameResolverTest {\n\n    @Test\n    public void test() throws NoSuchMethodException, NoSuchFieldException, IllegalAccessException {\n        Configuration config = new Configuration();\n        config.setUseActualParamName(false);\n        Method method = ArticleMapper.class.getMethod("select", Integer.class, String.class, RowBounds.class, Article.class);\n\n        ParamNameResolver resolver = new ParamNameResolver(config, method);\n        Field field = resolver.getClass().getDeclaredField("names");\n        field.setAccessible(true);\n        // 通过反射获取 ParamNameResolver 私有成员变量 names\n        Object names = field.get(resolver);\n\n        System.out.println("names: " + names);\n    }\n\n    class ArticleMapper {\n        public void select(@Param("id") Integer id, @Param("author") String author, RowBounds rb, Article article) {}\n    }\n}\n')])])]),n("p",[e._v("测试结果如下：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://blog-pictures.oss-cn-shanghai.aliyuncs.com/15332278473776.jpg",alt:"img"}})]),e._v(" "),n("p",[e._v("参数索引与名称映射图如下：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://blog-pictures.oss-cn-shanghai.aliyuncs.com/15332286696017.jpg",alt:"img"}})]),e._v(" "),n("p",[e._v("到此，关于 MapperMethod 的初始化逻辑就分析完了，继续往下分析。")]),e._v(" "),n("h5",{attrs:{id:"_2-1-2-2-执行-execute-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-2-执行-execute-方法"}},[e._v("#")]),e._v(" 2.1.2.2 执行 execute 方法")]),e._v(" "),n("p",[e._v("前面已经分析了 MapperMethod 的初始化过程，现在 MapperMethod 创建好了。那么，接下来要做的事情是调用 MapperMethod 的 execute 方法，执行 SQL。代码如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// -☆- MapperMethod\npublic Object execute(SqlSession sqlSession, Object[] args) {\n    Object result;\n    \n    // 根据 SQL 类型执行相应的数据库操作\n    switch (command.getType()) {\n        case INSERT: {\n            // 对用户传入的参数进行转换，下同\n            Object param = method.convertArgsToSqlCommandParam(args);\n            // 执行插入操作，rowCountResult 方法用于处理返回值\n            result = rowCountResult(sqlSession.insert(command.getName(), param));\n            break;\n        }\n        case UPDATE: {\n            Object param = method.convertArgsToSqlCommandParam(args);\n            // 执行更新操作\n            result = rowCountResult(sqlSession.update(command.getName(), param));\n            break;\n        }\n        case DELETE: {\n            Object param = method.convertArgsToSqlCommandParam(args);\n            // 执行删除操作\n            result = rowCountResult(sqlSession.delete(command.getName(), param));\n            break;\n        }\n        case SELECT:\n            // 根据目标方法的返回类型进行相应的查询操作\n            if (method.returnsVoid() && method.hasResultHandler()) {\n                /*\n                 * 如果方法返回值为 void，但参数列表中包含 ResultHandler，表明使用者\n                 * 想通过 ResultHandler 的方式获取查询结果，而非通过返回值获取结果\n                 */\n                executeWithResultHandler(sqlSession, args);\n                result = null;\n            } else if (method.returnsMany()) {\n                // 执行查询操作，并返回多个结果 \n                result = executeForMany(sqlSession, args);\n            } else if (method.returnsMap()) {\n                // 执行查询操作，并将结果封装在 Map 中返回\n                result = executeForMap(sqlSession, args);\n            } else if (method.returnsCursor()) {\n                // 执行查询操作，并返回一个 Cursor 对象\n                result = executeForCursor(sqlSession, args);\n            } else {\n                Object param = method.convertArgsToSqlCommandParam(args);\n                // 执行查询操作，并返回一个结果\n                result = sqlSession.selectOne(command.getName(), param);\n            }\n            break;\n        case FLUSH:\n            // 执行刷新操作\n            result = sqlSession.flushStatements();\n            break;\n        default:\n            throw new BindingException("Unknown execution method for: " + command.getName());\n    }\n    \n    // 如果方法的返回值为基本类型，而返回值却为 null，此种情况下应抛出异常\n    if (result == null && method.getReturnType().isPrimitive() && !method.returnsVoid()) {\n        throw new BindingException("Mapper method \'" + command.getName()\n            + " attempted to return null from a method with a primitive return type (" + method.getReturnType()\n            + ").");\n    }\n    return result;\n}\n')])])]),n("p",[e._v("如上，execute 方法主要由一个 switch 语句组成，用于根据 SQL 类型执行相应的数据库操作。该方法的逻辑清晰，不需要太多的分析。不过在上面的方法中 convertArgsToSqlCommandParam 方法出现次数比较频繁，这里分析一下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// -☆- MapperMethod\npublic Object convertArgsToSqlCommandParam(Object[] args) {\n    return paramNameResolver.getNamedParams(args);\n}\n\npublic Object getNamedParams(Object[] args) {\n    final int paramCount = names.size();\n    if (args == null || paramCount == 0) {\n        return null;\n    } else if (!hasParamAnnotation && paramCount == 1) {\n        /*\n         * 如果方法参数列表无 @Param 注解，且仅有一个非特别参数，则返回该参数的值。\n         * 比如如下方法：\n         *     List findList(RowBounds rb, String name)\n         * names 如下：\n         *     names = {1 : "0"}\n         * 此种情况下，返回 args[names.firstKey()]，即 args[1] -> name\n         */\n        return args[names.firstKey()];\n    } else {\n        final Map<String, Object> param = new ParamMap<Object>();\n        int i = 0;\n        for (Map.Entry<Integer, String> entry : names.entrySet()) {\n            // 添加 <参数名, 参数值> 键值对到 param 中\n            param.put(entry.getValue(), args[entry.getKey()]);\n            // genericParamName = param + index。比如 param1, param2, ... paramN\n            final String genericParamName = GENERIC_NAME_PREFIX + String.valueOf(i + 1);\n            /*\n             * 检测 names 中是否包含 genericParamName，什么情况下会包含？答案如下：\n             *\n             *   使用者显式将参数名称配置为 param1，即 @Param("param1")\n             */\n            if (!names.containsValue(genericParamName)) {\n                // 添加 <param*, value> 到 param 中\n                param.put(genericParamName, args[entry.getKey()]);\n            }\n            i++;\n        }\n        return param;\n    }\n}\n')])])]),n("p",[e._v("如上，convertArgsToSqlCommandParam 是一个空壳方法，该方法最终调用了 ParamNameResolver 的 getNamedParams 方法。getNamedParams 方法的主要逻辑是根据条件返回不同的结果，该方法的代码不是很难理解，我也进行了比较详细的注释，就不多说了。")]),e._v(" "),n("p",[e._v("分析完 convertArgsToSqlCommandParam 的逻辑，接下来说说 MyBatis 对哪些 SQL 指令提供了支持，如下：")]),e._v(" "),n("ul",[n("li",[e._v("查询语句：SELECT")]),e._v(" "),n("li",[e._v("更新语句：INSERT/UPDATE/DELETE")]),e._v(" "),n("li",[e._v("存储过程：CALL")])]),e._v(" "),n("p",[e._v("在上面的列表中，我刻意对 SELECT/INSERT/UPDATE/DELETE 等指令进行了分类，分类依据指令的功能以及 MyBatis 执行这些指令的过程。这里把 SELECT 称为查询语句，INSERT/UPDATE/DELETE 等称为更新语句。接下来，先来分析查询语句的执行过程。")]),e._v(" "),n("h3",{attrs:{id:"_2-2-查询语句的执行过程分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-查询语句的执行过程分析"}},[e._v("#")]),e._v(" 2.2 查询语句的执行过程分析")]),e._v(" "),n("p",[e._v("查询语句对应的方法比较多，有如下几种：")]),e._v(" "),n("ul",[n("li",[e._v("executeWithResultHandler")]),e._v(" "),n("li",[e._v("executeForMany")]),e._v(" "),n("li",[e._v("executeForMap")]),e._v(" "),n("li",[e._v("executeForCursor")])]),e._v(" "),n("p",[e._v("这些方法在内部调用了 SqlSession 中的一些 select* 方法，比如 selectList、selectMap、selectCursor 等。这些方法的返回值类型是不同的，因此对于每种返回类型，需要有专门的处理方法。以 selectList 方法为例，该方法的返回值类型为 List。但如果我们的 Mapper 或 Dao 的接口方法返回值类型为数组，或者 Set，直接将 List 类型的结果返回给 Mapper/Dao 就不合适了。execute* 等方法只是对 select* 等方法做了一层简单的封装，因此接下来我们应该把目光放在这些 select* 方法上。下面我们来分析一下 selectOne 方法的源码，如下：")]),e._v(" "),n("h4",{attrs:{id:"_2-2-1-selectone-方法分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-selectone-方法分析"}},[e._v("#")]),e._v(" 2.2.1 selectOne 方法分析")]),e._v(" "),n("p",[e._v("本节选择分析 selectOne 方法，而不是其他的方法，大家或许会觉得奇怪。前面提及了 selectList、selectMap、selectCursor 等方法，这里却分析一个未提及的方法。这样做并没什么特别之处，主要原因是 selectOne 在内部会调用 selectList 方法。这里分析 selectOne 方法是为了告知大家，selectOne 和 selectList 方法是有联系的，同时分析 selectOne 方法等同于分析 selectList 方法。如果你不信的话，那我们看源码吧，源码面前了无秘密。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// -☆- DefaultSqlSession\npublic <T> T selectOne(String statement, Object parameter) {\n    // 调用 selectList 获取结果\n    List<T> list = this.<T>selectList(statement, parameter);\n    if (list.size() == 1) {\n        // 返回结果\n        return list.get(0);\n    } else if (list.size() > 1) {\n        // 如果查询结果大于1则抛出异常，这个异常也是很常见的\n        throw new TooManyResultsException(\n            "Expected one result (or null) to be returned by selectOne(), but found: " + list.size());\n    } else {\n        return null;\n    }\n}\n')])])]),n("p",[e._v("如上，selectOne 方法在内部调用 selectList 了方法，并取 selectList 返回值的第1个元素作为自己的返回值。如果 selectList 返回的列表元素大于1，则抛出异常。上面代码比较易懂，就不多说了。下面我们来看看 selectList 方法的实现。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// -☆- DefaultSqlSession\npublic <E> List<E> selectList(String statement, Object parameter) {\n    // 调用重载方法\n    return this.selectList(statement, parameter, RowBounds.DEFAULT);\n}\n\nprivate final Executor executor;\n\npublic <E> List<E> selectList(String statement, Object parameter, RowBounds rowBounds) {\n    try {\n        // 获取 MappedStatement\n        MappedStatement ms = configuration.getMappedStatement(statement);\n        // 调用 Executor 实现类中的 query 方法\n        return executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);\n    } catch (Exception e) {\n        throw ExceptionFactory.wrapException("Error querying database.  Cause: " + e, e);\n    } finally {\n        ErrorContext.instance().reset();\n    }\n}\n')])])]),n("p",[e._v("如上，这里要来说说 executor 变量，该变量类型为 Executor。Executor 是一个接口，它的实现类如下：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://blog-pictures.oss-cn-shanghai.aliyuncs.com/15336511991684.jpg",alt:"img"}})]),e._v(" "),n("p",[e._v("如上，Executor 有这么多的实现类，大家猜一下 executor 变量对应哪个实现类。要弄清楚这个问题，需要大家到源头去查证。这里提示一下，大家可以跟踪一下 DefaultSqlSessionFactory 的 openSession 方法，很快就能发现executor 变量创建的踪迹。限于篇幅原因，本文就不分析 openSession 方法的源码了。好了，下面我来直接告诉大家 executor 变量对应哪个实现类吧。默认情况下，executor 的类型为 CachingExecutor，该类是一个装饰器类，用于给目标 Executor 增加二级缓存功能。那目标 Executor 是谁呢？默认情况下是 SimpleExecutor。")]),e._v(" "),n("p",[e._v("现在大家搞清楚 executor 变量的身份了，接下来继续分析 selectOne 方法的调用栈。先来看看 CachingExecutor 的 query 方法是怎样实现的。如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// -☆- CachingExecutor\npublic <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler) throws SQLException {\n    // 获取 BoundSql\n    BoundSql boundSql = ms.getBoundSql(parameterObject);\n    // 创建 CacheKey\n    CacheKey key = createCacheKey(ms, parameterObject, rowBounds, boundSql);\n    // 调用重载方法\n    return query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);\n}\n")])])]),n("p",[e._v("上面的代码用于获取 BoundSql 对象，创建 CacheKey 对象，然后再将这两个对象传给重载方法。关于 BoundSql 的获取过程较为复杂，我将在下一节进行分析。CacheKey 以及接下来即将出现的一二级缓存将会独立成文进行分析。")]),e._v(" "),n("p",[e._v("上面的方法和 SimpleExecutor 父类 BaseExecutor 中的实现没什么区别，有区别的地方在于这个方法所调用的重载方法。我们继续往下看。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// -☆- CachingExecutor\npublic <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {\n    // 从 MappedStatement 中获取缓存\n    Cache cache = ms.getCache();\n    // 若映射文件中未配置缓存或参照缓存，此时 cache = null\n    if (cache != null) {\n        flushCacheIfRequired(ms);\n        if (ms.isUseCache() && resultHandler == null) {\n            ensureNoOutParams(ms, boundSql);\n            List<E> list = (List<E>) tcm.getObject(cache, key);\n            if (list == null) {\n                // 若缓存未命中，则调用被装饰类的 query 方法\n                list = delegate.<E>query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);\n                tcm.putObject(cache, key, list); // issue #578 and #116\n            }\n            return list;\n        }\n    }\n    // 调用被装饰类的 query 方法\n    return delegate.<E>query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);\n}\n")])])]),n("p",[e._v("上面的代码涉及到了二级缓存，若二级缓存为空，或未命中，则调用被装饰类的 query 方法。下面来看一下 BaseExecutor 的中签名相同的 query 方法是如何实现的。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// -☆- BaseExecutor\npublic <E> List<E> query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {\n    if (closed) {\n        throw new ExecutorException("Executor was closed.");\n    }\n    if (queryStack == 0 && ms.isFlushCacheRequired()) {\n        clearLocalCache();\n    }\n    List<E> list;\n    try {\n        queryStack++;\n        // 从一级缓存中获取缓存项\n        list = resultHandler == null ? (List<E>) localCache.getObject(key) : null;\n        if (list != null) {\n            // 存储过程相关处理逻辑，本文不分析存储过程，故该方法不分析了\n            handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);\n        } else {\n            // 一级缓存未命中，则从数据库中查询\n            list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);\n        }\n    } finally {\n        queryStack--;\n    }\n    if (queryStack == 0) {\n        // 从一级缓存中延迟加载嵌套查询结果\n        for (DeferredLoad deferredLoad : deferredLoads) {\n            deferredLoad.load();\n        }\n        deferredLoads.clear();\n        if (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) {\n            clearLocalCache();\n        }\n    }\n    return list;\n}\n')])])]),n("p",[e._v("如上，上面的方法主要用于从一级缓存中查找查询结果。若缓存未命中，再向数据库进行查询。在上面的代码中，出现了一个新的类 DeferredLoad，这个类用于延迟加载。该类的实现并不复杂，但是具体用途让我有点疑惑。这个我目前也未完全搞清楚，就不强行分析了。接下来，我们来看一下 queryFromDatabase 方法的实现。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// -☆- BaseExecutor\nprivate <E> List<E> queryFromDatabase(MappedStatement ms, Object parameter, RowBounds rowBounds,\n    ResultHandler resultHandler, CacheKey key, BoundSql boundSql) throws SQLException {\n    List<E> list;\n    // 向缓存中存储一个占位符\n    localCache.putObject(key, EXECUTION_PLACEHOLDER);\n    try {\n        // 调用 doQuery 进行查询\n        list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);\n    } finally {\n        // 移除占位符\n        localCache.removeObject(key);\n    }\n    // 缓存查询结果\n    localCache.putObject(key, list);\n    if (ms.getStatementType() == StatementType.CALLABLE) {\n        localOutputParameterCache.putObject(key, parameter);\n    }\n    return list;\n}\n")])])]),n("p",[e._v("上面的代码仍然不是 selectOne 方法调用栈的终点，抛开缓存操作，queryFromDatabase 最终还会调用 doQuery 进行查询。下面我们继续进行跟踪。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// -☆- SimpleExecutor\npublic <E> List<E> doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) throws SQLException {\n    Statement stmt = null;\n    try {\n        Configuration configuration = ms.getConfiguration();\n        // 创建 StatementHandler\n        StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);\n        // 创建 Statement\n        stmt = prepareStatement(handler, ms.getStatementLog());\n        // 执行查询操作\n        return handler.<E>query(stmt, resultHandler);\n    } finally {\n        // 关闭 Statement\n        closeStatement(stmt);\n    }\n}\n")])])]),n("p",[e._v("上面的方法中仍然有不少的逻辑，完全看不到即将要到达终点的趋势，不过这离终点又近了一步。接下来，我们先跳过 StatementHandler 和 Statement 创建过程，这两个对象的创建过程会在后面进行说明。这里，我们以 PreparedStatementHandler 为例，看看它的 query 方法是怎样实现的。如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// -☆- PreparedStatementHandler\npublic <E> List<E> query(Statement statement, ResultHandler resultHandler) throws SQLException {\n    PreparedStatement ps = (PreparedStatement) statement;\n    // 执行 SQL\n    ps.execute();\n    // 处理执行结果\n    return resultSetHandler.<E>handleResultSets(ps);\n}\n")])])]),n("p",[e._v("到这里似乎看到了希望，整个调用过程总算要结束了。不过先别高兴的太早，SQL 执行结果的处理过程也很复杂，稍后将会专门拿出一节内容进行分析。")]),e._v(" "),n("p",[e._v("以上就是 selectOne 方法的执行过程，尽管我已经简化了代码分析，但是整个过程看起来还是很复杂的。查询过程涉及到了很多方法调用，不把这些调用方法搞清楚，很难对 MyBatis 的查询过程有深入的理解。所以在接下来的章节中，我将会对一些重要的调用进行分析。如果大家不满足于泛泛而谈，那么接下来咱们一起进行更为深入的探索吧。")]),e._v(" "),n("h4",{attrs:{id:"_2-2-2-获取-boundsql"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-获取-boundsql"}},[e._v("#")]),e._v(" 2.2.2 获取 BoundSql")]),e._v(" "),n("p",[e._v("我们在执行 SQL 时，一个重要的任务是将 SQL 语句解析出来。我们都知道 SQL 是配置在映射文件中的，但由于映射文件中的 SQL 可能会包含占位符 #{}，以及动态 SQL 标签，比如 "),n("if",[e._v("、"),n("where",[e._v(" 等。因此，我们并不能直接使用映射文件中配置的 SQL。MyBatis 会将映射文件中的 SQL 解析成一组 SQL 片段。如果某个片段中也包含动态 SQL 相关的标签，那么，MyBatis 会对该片段再次进行分片。最终，一个 SQL 配置将会被解析成一个 SQL 片段树。形如下面的图片：")])],1)],1),e._v(" "),n("p",[n("img",{attrs:{src:"https://blog-pictures.oss-cn-shanghai.aliyuncs.com/15328318597125.jpg",alt:"img"}})]),e._v(" "),n("p",[e._v("我们需要对片段树进行解析，以便从每个片段对象中获取相应的内容。然后将这些内容组合起来即可得到一个完成的 SQL 语句，这个完整的 SQL 以及其他的一些信息最终会存储在 BoundSql 对象中。下面我们来看一下 BoundSql 类的成员变量信息，如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private final String sql;\nprivate final List<ParameterMapping> parameterMappings;\nprivate final Object parameterObject;\nprivate final Map<String, Object> additionalParameters;\nprivate final MetaObject metaParameters;\n")])])]),n("p",[e._v("下面用一个表格列举各个成员变量的含义。")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"left"}},[e._v("变量名")]),e._v(" "),n("th",{staticStyle:{"text-align":"left"}},[e._v("类型")]),e._v(" "),n("th",{staticStyle:{"text-align":"left"}},[e._v("用途")])])]),e._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("sql")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("String")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("一个完整的 SQL 语句，可能会包含问号 ? 占位符")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("parameterMappings")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("List")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("参数映射列表，SQL 中的每个 #{xxx} 占位符都会被解析成相应的 ParameterMapping 对象")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("parameterObject")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("Object")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("运行时参数，即用户传入的参数，比如 Article 对象，或是其他的参数")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("additionalParameters")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("Map")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("附加参数集合，用于存储一些额外的信息，比如 datebaseId 等")])]),e._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[e._v("metaParameters")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("MetaObject")]),e._v(" "),n("td",{staticStyle:{"text-align":"left"}},[e._v("additionalParameters 的元信息对象")])])])]),e._v(" "),n("p",[e._v("以上对 BoundSql 的成员变量做了简要的说明，部分参数的用途大家现在可能不是很明白。不过不用着急，这些变量在接下来的源码分析过程中会陆续的出现。到时候对着源码多思考，或是写点测试代码调试一下，即可弄懂。")]),e._v(" "),n("p",[e._v("好了，现在准备工作已经做好。接下来，开始分析 BoundSql 的构建过程。我们源码之旅的第一站是 MappedStatement 的 getBoundSql 方法，代码如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// -☆- MappedStatement\npublic BoundSql getBoundSql(Object parameterObject) {\n\n    // 调用 sqlSource 的 getBoundSql 获取 BoundSql\n    BoundSql boundSql = sqlSource.getBoundSql(parameterObject);\n    List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();\n    if (parameterMappings == null || parameterMappings.isEmpty()) {\n        /*\n         * 创建新的 BoundSql，这里的 parameterMap 是 ParameterMap 类型。\n         * 由<ParameterMap> 节点进行配置，该节点已经废弃，不推荐使用。默认情况下，\n         * parameterMap.getParameterMappings() 返回空集合\n         */ \n        boundSql = new BoundSql(configuration, boundSql.getSql(), parameterMap.getParameterMappings(), parameterObject);\n    }\n\n    // 省略不重要的逻辑\n\n    return boundSql;\n}\n")])])]),n("p",[e._v("如上，MappedStatement 的 getBoundSql 在内部调用了 SqlSource 实现类的 getBoundSql 方法。处理此处的调用，余下的逻辑都不是重要逻辑，就不啰嗦了。接下来，我们把目光转移到 SqlSource 实现类的 getBoundSql 方法上。SqlSource 是一个接口，它有如下几个实现类：")]),e._v(" "),n("ul",[n("li",[e._v("DynamicSqlSource")]),e._v(" "),n("li",[e._v("RawSqlSource")]),e._v(" "),n("li",[e._v("StaticSqlSource")]),e._v(" "),n("li",[e._v("ProviderSqlSource")]),e._v(" "),n("li",[e._v("VelocitySqlSource")])]),e._v(" "),n("p",[e._v("在如上几个实现类中，我们应该选择分析哪个实现类的逻辑呢？如果大家分析过 MyBatis 映射文件的解析过程，或者阅读过我上一篇的关于"),n("a",{attrs:{href:"http://www.coolblog.xyz/2018/07/30/MyBatis-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B/",target:"_blank",rel:"noopener noreferrer"}},[e._v("MyBatis 映射文件分析"),n("OutboundLink")],1),e._v("的文章，那么这个问题不难回答。好了，不卖关子了，我来回答一下这个问题吧。首先我们把最后两个排除掉，不常用。剩下的三个实现类中，仅前两个实现类会在映射文件解析的过程中被使用。当 SQL 配置中包含 "),n("code",[e._v("${}")]),e._v("（不是 #{}）占位符，或者包含 "),n("if",[e._v("、"),n("where",[e._v(" 等标签时，会被认为是动态 SQL，此时使用 DynamicSqlSource 存储 SQL 片段。否则，使用 RawSqlSource 存储 SQL 配置信息。相比之下 DynamicSqlSource 存储的 SQL 片段类型较多，解析起来也更为复杂一些。因此下面我将分析 DynamicSqlSource 的 getBoundSql 方法。弄懂这个，RawSqlSource 也不在话下。好了，下面开始分析。")])],1)],1),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// -☆- DynamicSqlSource\npublic BoundSql getBoundSql(Object parameterObject) {\n    // 创建 DynamicContext\n    DynamicContext context = new DynamicContext(configuration, parameterObject);\n\n    // 解析 SQL 片段，并将解析结果存储到 DynamicContext 中\n    rootSqlNode.apply(context);\n    \n    SqlSourceBuilder sqlSourceParser = new SqlSourceBuilder(configuration);\n    Class<?> parameterType = parameterObject == null ? Object.class : parameterObject.getClass();\n    /*\n     * 构建 StaticSqlSource，在此过程中将 sql 语句中的占位符 #{} 替换为问号 ?，\n     * 并为每个占位符构建相应的 ParameterMapping\n     */\n    SqlSource sqlSource = sqlSourceParser.parse(context.getSql(), parameterType, context.getBindings());\n    \n    // 调用 StaticSqlSource 的 getBoundSql 获取 BoundSql\n    BoundSql boundSql = sqlSource.getBoundSql(parameterObject);\n\n    // 将 DynamicContext 的 ContextMap 中的内容拷贝到 BoundSql 中\n    for (Map.Entry<String, Object> entry : context.getBindings().entrySet()) {\n        boundSql.setAdditionalParameter(entry.getKey(), entry.getValue());\n    }\n    return boundSql;\n}\n")])])]),n("p",[e._v("如上，DynamicSqlSource 的 getBoundSql 方法的代码看起来不多，但是逻辑却并不简单。该方法由数个步骤组成，这里总结一下：")]),e._v(" "),n("ol",[n("li",[e._v("创建 DynamicContext")]),e._v(" "),n("li",[e._v("解析 SQL 片段，并将解析结果存储到 DynamicContext 中")]),e._v(" "),n("li",[e._v("解析 SQL 语句，并构建 StaticSqlSource")]),e._v(" "),n("li",[e._v("调用 StaticSqlSource 的 getBoundSql 获取 BoundSql")]),e._v(" "),n("li",[e._v("将 DynamicContext 的 ContextMap 中的内容拷贝到 BoundSql 中")])]),e._v(" "),n("p",[e._v("如上5个步骤中，第5步为常规操作，就不多说了，其他步骤将会在接下来章节中一一进行分析。按照顺序，我们先来分析 DynamicContext 的实现。")]),e._v(" "),n("h5",{attrs:{id:"_2-2-2-1-dynamiccontext"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-1-dynamiccontext"}},[e._v("#")]),e._v(" 2.2.2.1 DynamicContext")]),e._v(" "),n("p",[e._v("DynamicContext 是 SQL 语句构建的上下文，每个 SQL 片段解析完成后，都会将解析结果存入 DynamicContext 中。待所有的 SQL 片段解析完毕后，一条完整的 SQL 语句就会出现在 DynamicContext 对象中。下面我们来看一下 DynamicContext 类的定义。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class DynamicContext {\n\n    public static final String PARAMETER_OBJECT_KEY = "_parameter";\n    public static final String DATABASE_ID_KEY = "_databaseId";\n\n    private final ContextMap bindings;\n    private final StringBuilder sqlBuilder = new StringBuilder();\n\n    public DynamicContext(Configuration configuration, Object parameterObject) {\n        // 创建 ContextMap\n        if (parameterObject != null && !(parameterObject instanceof Map)) {\n            MetaObject metaObject = configuration.newMetaObject(parameterObject);\n            bindings = new ContextMap(metaObject);\n        } else {\n            bindings = new ContextMap(null);\n        }\n\n        // 存放运行时参数 parameterObject 以及 databaseId\n        bindings.put(PARAMETER_OBJECT_KEY, parameterObject);\n        bindings.put(DATABASE_ID_KEY, configuration.getDatabaseId());\n    }\n\n    // 省略部分代码\n}\n')])])]),n("p",[e._v("如上，上面只贴了 DynamicContext 类的部分代码。其中 sqlBuilder 变量用于存放 SQL 片段的解析结果，bindings 则用于存储一些额外的信息，比如运行时参数 和 databaseId 等。bindings 类型为 ContextMap，ContextMap 定义在 DynamicContext 中，是一个静态内部类。该类继承自 HashMap，并覆写了 get 方法。它的代码如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("static class ContextMap extends HashMap<String, Object> {\n\n    private MetaObject parameterMetaObject;\n\n    public ContextMap(MetaObject parameterMetaObject) {\n        this.parameterMetaObject = parameterMetaObject;\n    }\n\n    @Override\n    public Object get(Object key) {\n        String strKey = (String) key;\n        // 检查是否包含 strKey，若包含则直接返回\n        if (super.containsKey(strKey)) {\n            return super.get(strKey);\n        }\n\n        if (parameterMetaObject != null) {\n            // 从运行时参数中查找结果\n            return parameterMetaObject.getValue(strKey);\n        }\n\n        return null;\n    }\n}\n")])])]),n("p",[e._v("DynamicContext 对外提供了两个接口，用于操作 sqlBuilder。分别如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public void appendSql(String sql) {\n    sqlBuilder.append(sql);\n    sqlBuilder.append(" ");\n}\n\npublic String getSql() {\n    return sqlBuilder.toString().trim();\n}\n')])])]),n("p",[e._v("以上就是对 DynamicContext 的简单介绍，DynamicContext 的源码不难理解，这里就不多说了。继续往下分析。")]),e._v(" "),n("h5",{attrs:{id:"_2-2-2-2-解析-sql-片段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-2-解析-sql-片段"}},[e._v("#")]),e._v(" 2.2.2.2 解析 SQL 片段")]),e._v(" "),n("p",[e._v("对于一个包含了 ${} 占位符，或 "),n("if",[e._v("、"),n("where",[e._v(" 等标签的 SQL，在解析的过程中，会被分解成多个片段。每个片段都有对应的类型，每种类型的片段都有不同的解析逻辑。在源码中，片段这个概念等价于 sql 节点，即 SqlNode。SqlNode 是一个接口，它有众多的实现类。其继承体系如下：")])],1)],1),e._v(" "),n("p",[n("img",{attrs:{src:"https://blog-pictures.oss-cn-shanghai.aliyuncs.com/15337454686583.jpg",alt:"img"}})]),e._v(" "),n("p",[e._v("上图只画出了部分的实现类，还有一小部分没画出来，不过这并不影响接下来的分析。在众多实现类中，StaticTextSqlNode 用于存储静态文本，TextSqlNode 用于存储带有 ${} 占位符的文本，IfSqlNode 则用于存储 "),n("if",[e._v(" 节点的内容。MixedSqlNode 内部维护了一个 SqlNode 集合，用于存储各种各样的 SqlNode。接下来，我将会对 MixedSqlNode 、StaticTextSqlNode、TextSqlNode、IfSqlNode、WhereSqlNode 以及 TrimSqlNode 等进行分析，其他的实现类请大家自行分析。Talk is cheap，show you the code.")])],1),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class MixedSqlNode implements SqlNode {\n    private final List<SqlNode> contents;\n\n    public MixedSqlNode(List<SqlNode> contents) {\n        this.contents = contents;\n    }\n\n    @Override\n    public boolean apply(DynamicContext context) {\n        // 遍历 SqlNode 集合\n        for (SqlNode sqlNode : contents) {\n            // 调用 salNode 对象本身的 apply 方法解析 sql\n            sqlNode.apply(context);\n        }\n        return true;\n    }\n}\n")])])]),n("p",[e._v("MixedSqlNode 可以看做是 SqlNode 实现类对象的容器，凡是实现了 SqlNode 接口的类都可以存储到 MixedSqlNode 中，包括它自己。MixedSqlNode 解析方法 apply 逻辑比较简单，即遍历 SqlNode 集合，并调用其他 SalNode 实现类对象的 apply 方法解析 sql。那下面我们来看看其他 SalNode 实现类的 apply 方法是怎样实现的。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class StaticTextSqlNode implements SqlNode {\n\n    private final String text;\n\n    public StaticTextSqlNode(String text) {\n        this.text = text;\n    }\n\n    @Override\n    public boolean apply(DynamicContext context) {\n        context.appendSql(text);\n        return true;\n    }\n}\n")])])]),n("p",[e._v("StaticTextSqlNode 用于存储静态文本，所以它不需要什么解析逻辑，直接将其存储的 SQL 片段添加到 DynamicContext 中即可。StaticTextSqlNode 的实现比较简单，看起来很轻松。下面分析一下 TextSqlNode。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class TextSqlNode implements SqlNode {\n\n    private final String text;\n    private final Pattern injectionFilter;\n\n    @Override\n    public boolean apply(DynamicContext context) {\n        // 创建 ${} 占位符解析器\n        GenericTokenParser parser = createParser(new BindingTokenParser(context, injectionFilter));\n        // 解析 ${} 占位符，并将解析结果添加到 DynamicContext 中\n        context.appendSql(parser.parse(text));\n        return true;\n    }\n\n    private GenericTokenParser createParser(TokenHandler handler) {\n        // 创建占位符解析器，GenericTokenParser 是一个通用解析器，并非只能解析 ${}\n        return new GenericTokenParser("${", "}", handler);\n    }\n\n    private static class BindingTokenParser implements TokenHandler {\n\n        private DynamicContext context;\n        private Pattern injectionFilter;\n\n        public BindingTokenParser(DynamicContext context, Pattern injectionFilter) {\n            this.context = context;\n            this.injectionFilter = injectionFilter;\n        }\n\n        @Override\n        public String handleToken(String content) {\n            Object parameter = context.getBindings().get("_parameter");\n            if (parameter == null) {\n                context.getBindings().put("value", null);\n            } else if (SimpleTypeRegistry.isSimpleType(parameter.getClass())) {\n                context.getBindings().put("value", parameter);\n            }\n            // 通过 ONGL 从用户传入的参数中获取结果\n            Object value = OgnlCache.getValue(content, context.getBindings());\n            String srtValue = (value == null ? "" : String.valueOf(value));\n            // 通过正则表达式检测 srtValue 有效性\n            checkInjection(srtValue);\n            return srtValue;\n        }\n    }\n}\n')])])]),n("p",[e._v("如上，GenericTokenParser 是一个通用的标记解析器，用于解析形如 ${xxx}，#{xxx} 等标记。GenericTokenParser 负责将标记中的内容抽取出来，并将标记内容交给相应的 TokenHandler 去处理。BindingTokenParser 负责解析标记内容，并将解析结果返回给 GenericTokenParser，用于替换 ${xxx} 标记。举个例子说明一下吧，如下。")]),e._v(" "),n("p",[e._v("我们有这样一个 SQL 语句，用于从 article 表中查询某个作者所写的文章。如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("SELECT * FROM article WHERE author = '${author}'\n")])])]),n("p",[e._v("假设我们我们传入的 author 值为 tianxiaobo，那么该 SQL 最终会被解析成如下的结果：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("SELECT * FROM article WHERE author = 'tianxiaobo'\n")])])]),n("p",[e._v("一般情况下，使用 ${author} 接受参数都没什么问题。但是怕就怕在有人不怀好意，构建了一些恶意的参数。当用这些恶意的参数替换 ${author} 时就会出现灾难性问题 – SQL 注入。比如我们构建这样一个参数 "),n("code",[e._v("author = tianxiaobo'; DELETE FROM article;#")]),e._v("，然后我们把这个参数传给 TextSqlNode 进行解析。得到的结果如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("SELECT * FROM article WHERE author = 'tianxiaobo'; DELETE FROM article;#'\n")])])]),n("p",[e._v("看到没，由于传入的参数没有经过转义，最终导致了一条 SQL 被恶意参数拼接成了两条 SQL。更要命的是，第二天 SQL 会把 article 表的数据清空，这个后果就很严重了（从删库到跑路）。这就是为什么我们不应该在 SQL 语句中是用 ${} 占位符，风险太大。")]),e._v(" "),n("p",[e._v("分析完 TextSqlNode 的逻辑，接下来，分析 IfSqlNode 的实现。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class IfSqlNode implements SqlNode {\n\n    private final ExpressionEvaluator evaluator;\n    private final String test;\n    private final SqlNode contents;\n\n    public IfSqlNode(SqlNode contents, String test) {\n        this.test = test;\n        this.contents = contents;\n        this.evaluator = new ExpressionEvaluator();\n    }\n\n    @Override\n    public boolean apply(DynamicContext context) {\n        // 通过 ONGL 评估 test 表达式的结果\n        if (evaluator.evaluateBoolean(test, context.getBindings())) {\n            // 若 test 表达式中的条件成立，则调用其他节点的 apply 方法进行解析\n            contents.apply(context);\n            return true;\n        }\n        return false;\n    }\n}\n")])])]),n("p",[e._v("IfSqlNode 对应的是 "),n("if",{attrs:{test:"‘xxx’"}},[e._v(" 节点，"),n("if",[e._v(" 节点是日常开发中使用频次比较高的一个节点。它的具体用法我想大家都很熟悉了，这里就不多啰嗦。IfSqlNode 的 apply 方法逻辑并不复杂，首先是通过 ONGL 检测 test 表达式是否为 true，如果为 true，则调用其他节点的 apply 方法继续进行解析。需要注意的是 "),n("if",[e._v(" 节点中也可嵌套其他的动态节点，并非只有纯文本。因此 contents 变量遍历指向的是 MixedSqlNode，而非 StaticTextSqlNode。")])],1)],1)],1),e._v(" "),n("p",[e._v("关于 IfSqlNode 就说到这，接下来分析 WhereSqlNode 的实现。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class WhereSqlNode extends TrimSqlNode {\n\n    /** 前缀列表 */\n    private static List<String> prefixList = Arrays.asList("AND ", "OR ", "AND\\n", "OR\\n", "AND\\r", "OR\\r", "AND\\t", "OR\\t");\n\n    public WhereSqlNode(Configuration configuration, SqlNode contents) {\n        // 调用父类的构造方法\n        super(configuration, contents, "WHERE", prefixList, null, null);\n    }\n}\n')])])]),n("p",[e._v("在 MyBatis 中，WhereSqlNode 和 SetSqlNode 都是基于 TrimSqlNode 实现的，所以上面的代码看起来很简单。WhereSqlNode 对应于 "),n("where",[e._v(" 节点，关于该节点的用法以及它的应用场景，大家请自行查阅资料。我在分析源码的过程中，默认大家已经知道了该节点的用途和应用场景。")])],1),e._v(" "),n("p",[e._v("接下来，我们把目光聚焦在 TrimSqlNode 的实现上。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class TrimSqlNode implements SqlNode {\n\n    private final SqlNode contents;\n    private final String prefix;\n    private final String suffix;\n    private final List<String> prefixesToOverride;\n    private final List<String> suffixesToOverride;\n    private final Configuration configuration;\n\n   // 省略构造方法\n\n    @Override\n    public boolean apply(DynamicContext context) {\n        // 创建具有过滤功能的 DynamicContext\n        FilteredDynamicContext filteredDynamicContext = new FilteredDynamicContext(context);\n        // 解析节点内容\n        boolean result = contents.apply(filteredDynamicContext);\n        // 过滤掉前缀和后缀\n        filteredDynamicContext.applyAll();\n        return result;\n    }\n}\n")])])]),n("p",[e._v("如上，apply 方法首选调用了其他 SqlNode 的 apply 方法解析节点内容，这步操作完成后，FilteredDynamicContext 中会得到一条 SQL 片段字符串。接下里需要做的事情是过滤字符串前缀后和后缀，并添加相应的前缀和后缀。这个事情由 FilteredDynamicContext 负责，FilteredDynamicContext 是 TrimSqlNode 的私有内部类。我们去看一下它的代码。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private class FilteredDynamicContext extends DynamicContext {\n\n    private DynamicContext delegate;\n    /** 构造方法会将下面两个布尔值置为 false */\n    private boolean prefixApplied;\n    private boolean suffixApplied;\n    private StringBuilder sqlBuffer;\n    \n    // 省略构造方法\n\n    public void applyAll() {\n        sqlBuffer = new StringBuilder(sqlBuffer.toString().trim());\n        String trimmedUppercaseSql = sqlBuffer.toString().toUpperCase(Locale.ENGLISH);\n        if (trimmedUppercaseSql.length() > 0) {\n            // 引用前缀和后缀，也就是对 sql 进行过滤操作，移除掉前缀或后缀\n            applyPrefix(sqlBuffer, trimmedUppercaseSql);\n            applySuffix(sqlBuffer, trimmedUppercaseSql);\n        }\n        // 将当前对象的 sqlBuffer 内容添加到代理类中\n        delegate.appendSql(sqlBuffer.toString());\n    }\n\n    // 省略部分方法\n\n    private void applyPrefix(StringBuilder sql, String trimmedUppercaseSql) {\n        if (!prefixApplied) {\n            // 设置 prefixApplied 为 true，以下逻辑仅会被执行一次\n            prefixApplied = true;\n            if (prefixesToOverride != null) {\n                for (String toRemove : prefixesToOverride) {\n                    // 检测当前 sql 字符串是否包含 toRemove 前缀，比如 'AND ', 'AND\\t'\n                    if (trimmedUppercaseSql.startsWith(toRemove)) {\n                        // 移除前缀\n                        sql.delete(0, toRemove.trim().length());\n                        break;\n                    }\n                }\n            }\n\n            // 插入前缀，比如 WHERE\n            if (prefix != null) {\n                sql.insert(0, \" \");\n                sql.insert(0, prefix);\n            }\n        }\n    }\n\n    // 该方法逻辑与 applyPrefix 大同小异，大家自行分析\n    private void applySuffix(StringBuilder sql, String trimmedUppercaseSql) {...}\n}\n")])])]),n("p",[e._v('在上面的代码中，我们重点关注 applyAll 和 applyPrefix 方法，其他的方法大家自行分析。applyAll 方法的逻辑比较简单，首先从 sqlBuffer 中获取 SQL 字符串。然后调用 applyPrefix 和 applySuffix 进行过滤操作。最后将过滤后的 SQL 字符串添加到被装饰的类中。applyPrefix 方法会首先检测 SQL 字符串是不是以 "AND "，"OR "，或 “AND\\n”， “OR\\n” 等前缀开头，若是则将前缀从 sqlBuffer 中移除。然后将前缀插入到 sqlBuffer 的首部，整个逻辑就结束了。下面写点代码简单验证一下，如下：')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class SqlNodeTest {\n\n    @Test\n    public void testWhereSqlNode() throws IOException {\n        String sqlFragment = "AND id = #{id}";\n        MixedSqlNode msn = new MixedSqlNode(Arrays.asList(new StaticTextSqlNode(sqlFragment)));\n        WhereSqlNode wsn = new WhereSqlNode(new Configuration(), msn);\n        DynamicContext dc = new DynamicContext(new Configuration(), new ParamMap<>());\n        wsn.apply(dc);\n        System.out.println("解析前：" + sqlFragment);\n        System.out.println("解析后：" + dc.getSql());\n    }\n}\n')])])]),n("p",[e._v("测试结果如下：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://blog-pictures.oss-cn-shanghai.aliyuncs.com/15337932275070.jpg",alt:"img"}})]),e._v(" "),n("h5",{attrs:{id:"_2-2-2-3-解析-占位符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-3-解析-占位符"}},[e._v("#")]),e._v(" 2.2.2.3 解析 #{} 占位符")]),e._v(" "),n("p",[e._v("经过前面的解析，我们已经能从 DynamicContext 获取到完整的 SQL 语句了。但这并不意味着解析过程就结束了，因为当前的 SQL 语句中还有一种占位符没有处理，即 #{}。与 ${} 占位符的处理方式不同，MyBatis 并不会直接将 #{} 占位符替换为相应的参数值。#{} 占位符的解析逻辑这里先不多说，等相应的源码分析完了，答案就明了了。")]),e._v(" "),n("p",[e._v("#{} 占位符的解析逻辑是包含在 SqlSourceBuilder 的 parse 方法中，该方法最终会将解析后的 SQL 以及其他的一些数据封装到 StaticSqlSource 中。下面，一起来看一下 SqlSourceBuilder 的 parse 方法。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// -☆- SqlSourceBuilder\npublic SqlSource parse(String originalSql, Class<?> parameterType, Map<String, Object> additionalParameters) {\n    // 创建 #{} 占位符处理器\n    ParameterMappingTokenHandler handler = new ParameterMappingTokenHandler(configuration, parameterType, additionalParameters);\n    // 创建 #{} 占位符解析器\n    GenericTokenParser parser = new GenericTokenParser("#{", "}", handler);\n    // 解析 #{} 占位符，并返回解析结果\n    String sql = parser.parse(originalSql);\n    // 封装解析结果到 StaticSqlSource 中，并返回\n    return new StaticSqlSource(configuration, sql, handler.getParameterMappings());\n}\n')])])]),n("p",[e._v("如上，GenericTokenParser 的用途上一节已经介绍过了，就不多说了。接下来，我们重点关注 #{} 占位符处理器 ParameterMappingTokenHandler 的逻辑。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public String handleToken(String content) {\n    // 获取 content 的对应的 ParameterMapping\n    parameterMappings.add(buildParameterMapping(content));\n    // 返回 ?\n    return "?";\n}\n')])])]),n("p",[e._v("ParameterMappingTokenHandler 的 handleToken 方法看起来比较简单，但实际上并非如此。GenericTokenParser 负责将 #{} 占位符中的内容抽取出来，并将抽取出的内容传给 handleToken 方法。handleToken 放阿飞负责将传入的参数解析成对应的 ParameterMapping 对象，这步操作由 buildParameterMapping 方法完成。下面我们看一下 buildParameterMapping 的源码。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('private ParameterMapping buildParameterMapping(String content) {\n    /*\n     * 将 #{xxx} 占位符中的内容解析成 Map。大家可能很好奇一个普通的字符串是怎么解析成 Map 的，\n     * 举例说明一下。如下：\n     * \n     *    #{age,javaType=int,jdbcType=NUMERIC,typeHandler=MyTypeHandler}\n     *    \n     * 上面占位符中的内容最终会被解析成如下的结果：\n     * \n     *  {\n     *      "property": "age",\n     *      "typeHandler": "MyTypeHandler", \n     *      "jdbcType": "NUMERIC", \n     *      "javaType": "int"\n     *  }\n     * \n     * parseParameterMapping 内部依赖 ParameterExpression 对字符串进行解析，ParameterExpression 的\n     * 逻辑不是很复杂，这里就不分析了。大家若有兴趣，可自行分析\n     */\n    Map<String, String> propertiesMap = parseParameterMapping(content);\n    String property = propertiesMap.get("property");\n    Class<?> propertyType;\n    // metaParameters 为 DynamicContext 成员变量 bindings 的元信息对象\n    if (metaParameters.hasGetter(property)) {\n        propertyType = metaParameters.getGetterType(property);\n    \n    /*\n     * parameterType 是运行时参数的类型。如果用户传入的是单个参数，比如 Article 对象，此时 \n     * parameterType 为 Article.class。如果用户传入的多个参数，比如 [id = 1, author = "coolblog"]，\n     * MyBatis 会使用 ParamMap 封装这些参数，此时 parameterType 为 ParamMap.class。如果 \n     * parameterType 有相应的 TypeHandler，这里则把 parameterType 设为 propertyType\n     */\n    } else if (typeHandlerRegistry.hasTypeHandler(parameterType)) {\n        propertyType = parameterType;\n    } else if (JdbcType.CURSOR.name().equals(propertiesMap.get("jdbcType"))) {\n        propertyType = java.sql.ResultSet.class;\n    } else if (property == null || Map.class.isAssignableFrom(parameterType)) {\n        // 如果 property 为空，或 parameterType 是 Map 类型，则将 propertyType 设为 Object.class\n        propertyType = Object.class;\n    } else {\n        /*\n         * 代码逻辑走到此分支中，表明 parameterType 是一个自定义的类，\n         * 比如 Article，此时为该类创建一个元信息对象\n         */\n        MetaClass metaClass = MetaClass.forClass(parameterType, configuration.getReflectorFactory());\n        // 检测参数对象有没有与 property 想对应的 getter 方法\n        if (metaClass.hasGetter(property)) {\n            // 获取成员变量的类型\n            propertyType = metaClass.getGetterType(property);\n        } else {\n            propertyType = Object.class;\n        }\n    }\n    \n    // -------------------------- 分割线 ---------------------------\n    \n    ParameterMapping.Builder builder = new ParameterMapping.Builder(configuration, property, propertyType);\n    \n    // 将 propertyType 赋值给 javaType\n    Class<?> javaType = propertyType;\n    String typeHandlerAlias = null;\n    \n    // 遍历 propertiesMap\n    for (Map.Entry<String, String> entry : propertiesMap.entrySet()) {\n        String name = entry.getKey();\n        String value = entry.getValue();\n        if ("javaType".equals(name)) {\n            // 如果用户明确配置了 javaType，则以用户的配置为准\n            javaType = resolveClass(value);\n            builder.javaType(javaType);\n        } else if ("jdbcType".equals(name)) {\n            // 解析 jdbcType\n            builder.jdbcType(resolveJdbcType(value));\n        } else if ("mode".equals(name)) {...} \n        else if ("numericScale".equals(name)) {...} \n        else if ("resultMap".equals(name)) {...} \n        else if ("typeHandler".equals(name)) {\n        \ttypeHandlerAlias = value;    \n        } \n        else if ("jdbcTypeName".equals(name)) {...} \n        else if ("property".equals(name)) {...} \n        else if ("expression".equals(name)) {\n            throw new BuilderException("Expression based parameters are not supported yet");\n        } else {\n            throw new BuilderException("An invalid property \'" + name + "\' was found in mapping #{" + content\n                + "}.  Valid properties are " + parameterProperties);\n        }\n    }\n    if (typeHandlerAlias != null) {\n        // 解析 TypeHandler\n        builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias));\n    }\n    \n    // 构建 ParameterMapping 对象\n    return builder.build();\n}\n')])])]),n("p",[e._v("如上，buildParameterMapping 代码很多，逻辑看起来很复杂。但是它做的事情却不是很多，只有3件事情。如下：")]),e._v(" "),n("ol",[n("li",[e._v("解析 content")]),e._v(" "),n("li",[e._v("解析 propertyType，对应分割线之上的代码")]),e._v(" "),n("li",[e._v("构建 ParameterMapping 对象，对应分割线之下的代码")])]),e._v(" "),n("p",[e._v("buildParameterMapping 代码比较多，不太好理解，下面写个示例演示一下。如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class SqlSourceBuilderTest {\n\n    @Test\n    public void test() {\n        // 带有复杂 #{} 占位符的参数，接下里会解析这个占位符\n        String sql = "SELECT * FROM Author WHERE age = #{age,javaType=int,jdbcType=NUMERIC}";\n        SqlSourceBuilder sqlSourceBuilder = new SqlSourceBuilder(new Configuration());\n        SqlSource sqlSource = sqlSourceBuilder.parse(sql, Author.class, new HashMap<>());\n        BoundSql boundSql = sqlSource.getBoundSql(new Author());\n        \n        System.out.println(String.format("SQL: %s\\n", boundSql.getSql()));\n        System.out.println(String.format("ParameterMappings: %s", boundSql.getParameterMappings()));\n    }\n}\n\npublic class Author {\n    private Integer id;\n    private String name;\n    private Integer age;\n    \n    // 省略 getter/setter\n}\n')])])]),n("p",[e._v("测试结果如下：\n"),n("img",{attrs:{src:"https://blog-pictures.oss-cn-shanghai.aliyuncs.com/15338192358463.jpg",alt:"img"}})]),e._v(" "),n("p",[e._v("正如测试结果所示，SQL 中的 #{age, …} 占位符被替换成了问号 ?。#{age, …} 也被解析成了一个 ParameterMapping 对象。")]),e._v(" "),n("p",[e._v("本节的最后，我们再来看一下 StaticSqlSource 的创建过程。如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class StaticSqlSource implements SqlSource {\n\n    private final String sql;\n    private final List<ParameterMapping> parameterMappings;\n    private final Configuration configuration;\n\n    public StaticSqlSource(Configuration configuration, String sql) {\n        this(configuration, sql, null);\n    }\n\n    public StaticSqlSource(Configuration configuration, String sql, List<ParameterMapping> parameterMappings) {\n        this.sql = sql;\n        this.parameterMappings = parameterMappings;\n        this.configuration = configuration;\n    }\n\n    @Override\n    public BoundSql getBoundSql(Object parameterObject) {\n        // 创建 BoundSql 对象\n        return new BoundSql(configuration, sql, parameterMappings, parameterObject);\n    }\n}\n")])])]),n("p",[e._v("上面代码没有什么太复杂的地方，从上面代码中可以看出 BoundSql 的创建过程也很简单。正因为前面经历了这么复杂的解析逻辑，BoundSql 的创建过程才会如此简单。到此，关于 BoundSql 构建的过程就分析完了，稍作休息，我们进行后面的分析。")]),e._v(" "),n("h4",{attrs:{id:"_2-2-3-创建-statementhandler"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-创建-statementhandler"}},[e._v("#")]),e._v(" 2.2.3 创建 StatementHandler")]),e._v(" "),n("p",[e._v("在 MyBatis 的源码中，StatementHandler 是一个非常核心接口。之所以说它核心，是因为从代码分层的角度来说，StatementHandler 是 MyBatis 源码的边界，再往下层就是 JDBC 层面的接口了。StatementHandler 需要和 JDBC 层面的接口打交道，它要做的事情有很多。在执行 SQL 之前，StatementHandler 需要创建合适的 Statement 对象，然后填充参数值到 Statement 对象中，最后通过 Statement 对象执行 SQL。这还不算完，待 SQL 执行完毕，还要去处理查询结果等。这些过程看似简单，但实现起来却很复杂。好在，这些过程对应的逻辑并不需要我们亲自实现，只需要耐心看一下，难度降低了不少。好了，其他的就不多说了。下面我们来看一下 StatementHandler 的继承体系。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://blog-pictures.oss-cn-shanghai.aliyuncs.com/15344759978280.jpg",alt:"img"}})]),e._v(" "),n("p",[e._v("上图中，最下层的三种 StatementHandler 实现类与三种不同的 Statement 进行交互，这个不难看出来。但 RoutingStatementHandler 则是一个奇怪的存在，因为 JDBC 中并不存在 RoutingStatement。那它有什么用呢？接下来，我们到代码中寻找答案。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// -☆- Configuration\npublic StatementHandler newStatementHandler(Executor executor, MappedStatement mappedStatement,\n    Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) {\n    // 创建具有路由功能的 StatementHandler\n    StatementHandler statementHandler = new RoutingStatementHandler(executor, mappedStatement, parameterObject, rowBounds, resultHandler, boundSql);\n    // 应用插件到 StatementHandler 上\n    statementHandler = (StatementHandler) interceptorChain.pluginAll(statementHandler);\n    return statementHandler;\n}\n")])])]),n("p",[e._v("如上，newStatementHandler 方法在创建 StatementHandler 之后，还会应用插件到 StatementHandler 上。关于 MyBatis 的插件机制，后面独立成文进行讲解，这里就不分析了。下面分析一下 RoutingStatementHandler。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class RoutingStatementHandler implements StatementHandler {\n\n    private final StatementHandler delegate;\n\n    public RoutingStatementHandler(Executor executor, MappedStatement ms, Object parameter, RowBounds rowBounds,\n        ResultHandler resultHandler, BoundSql boundSql) {\n\n        // 根据 StatementType 创建不同的 StatementHandler \n        switch (ms.getStatementType()) {\n            case STATEMENT:\n                delegate = new SimpleStatementHandler(executor, ms, parameter, rowBounds, resultHandler, boundSql);\n                break;\n            case PREPARED:\n                delegate = new PreparedStatementHandler(executor, ms, parameter, rowBounds, resultHandler, boundSql);\n                break;\n            case CALLABLE:\n                delegate = new CallableStatementHandler(executor, ms, parameter, rowBounds, resultHandler, boundSql);\n                break;\n            default:\n                throw new ExecutorException("Unknown statement type: " + ms.getStatementType());\n        }\n    }\n    \n    // 其他方法逻辑均由别的 StatementHandler 代理完成，就不贴代码了\n}\n')])])]),n("p",[e._v("如上，RoutingStatementHandler 的构造方法会根据 MappedStatement 中的 statementType 变量创建不同的 StatementHandler 实现类。默认情况下，statementType 值为 PREPARED。关于 StatementHandler 创建的过程就先分析到这，StatementHandler 创建完成了，后续要做到事情是创建 Statement，以及将运行时参数和 Statement 进行绑定。接下里，就来分析这一块的逻辑。")]),e._v(" "),n("h4",{attrs:{id:"_2-2-4-设置运行时参数到-sql-中"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-4-设置运行时参数到-sql-中"}},[e._v("#")]),e._v(" 2.2.4 设置运行时参数到 SQL 中")]),e._v(" "),n("p",[e._v("JDBC 提供了三种 Statement 接口，分别是 Statement、PreparedStatement 和 CallableStatement。他们的关系如下：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://blog-pictures.oss-cn-shanghai.aliyuncs.com/15344760633457.jpg",alt:"img"}})]),e._v(" "),n("p",[e._v("上面三个接口的层级分明，其中 Statement 接口提供了执行 SQL，获取执行结果等基本功能。PreparedStatement 在此基础上，对 IN 类型的参数提供了支持。使得我们可以使用运行时参数替换 SQL 中的问号 ? 占位符，而不用手动拼接 SQL。CallableStatement 则是 在 PreparedStatement 基础上，对 OUT 类型的参数提供了支持，该种类型的参数用于保存存储过程输出的结果。")]),e._v(" "),n("p",[e._v("本节，我将分析 PreparedStatement 的创建，以及设置运行时参数到 SQL 中的过程。其他两种 Statement 的处理过程，大家请自行分析。Statement 的创建入口是在 SimpleExecutor 的 prepareStatement 方法中，下面从这个方法开始进行分析。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// -☆- SimpleExecutor\nprivate Statement prepareStatement(StatementHandler handler, Log statementLog) throws SQLException {\n    Statement stmt;\n    // 获取数据库连接\n    Connection connection = getConnection(statementLog);\n    // 创建 Statement，\n    stmt = handler.prepare(connection, transaction.getTimeout());\n    // 为 Statement 设置 IN 参数\n    handler.parameterize(stmt);\n    return stmt;\n}\n")])])]),n("p",[e._v("如上，上面代码的逻辑不复杂，总共包含三个步骤。如下：")]),e._v(" "),n("ol",[n("li",[e._v("获取数据库连接")]),e._v(" "),n("li",[e._v("创建 Statement")]),e._v(" "),n("li",[e._v("为 Statement 设置 IN 参数")])]),e._v(" "),n("p",[e._v("上面三个步骤看起来并不难实现，实际上如果大家愿意写，也能写出来。不过 MyBatis 对着三个步骤进行拓展，实现上也相对复杂一下。以获取数据库连接为例，MyBatis 并未没有在 getConnection 方法中直接调用 JDBC DriverManager 的 getConnection 方法获取获取连接，而是通过数据源获取获取连接。MyBatis 提供了两种基于 JDBC 接口的数据源，分别为 PooledDataSource 和 UnpooledDataSource。创建或获取数据库连接的操作最终是由这两个数据源执行。限于篇幅问题，本节不打算分析以上两种数据源的源码，相关分析会在下一篇文章中展开。")]),e._v(" "),n("p",[e._v("接下来，我将分析 PreparedStatement 的创建，以及 IN 参数设置的过程。按照顺序，先来分析 PreparedStatement 的创建过程。如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// -☆- PreparedStatementHandler\npublic Statement prepare(Connection connection, Integer transactionTimeout) throws SQLException {\n    Statement statement = null;\n    try {\n        // 创建 Statement\n        statement = instantiateStatement(connection);\n        // 设置超时和 FetchSize\n        setStatementTimeout(statement, transactionTimeout);\n        setFetchSize(statement);\n        return statement;\n    } catch (SQLException e) {\n        closeStatement(statement);\n        throw e;\n    } catch (Exception e) {\n        closeStatement(statement);\n        throw new ExecutorException("Error preparing statement.  Cause: " + e, e);\n    }\n}\n\nprotected Statement instantiateStatement(Connection connection) throws SQLException {\n    String sql = boundSql.getSql();\n    // 根据条件调用不同的 prepareStatement 方法创建 PreparedStatement\n    if (mappedStatement.getKeyGenerator() instanceof Jdbc3KeyGenerator) {\n        String[] keyColumnNames = mappedStatement.getKeyColumns();\n        if (keyColumnNames == null) {\n            return connection.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);\n        } else {\n            return connection.prepareStatement(sql, keyColumnNames);\n        }\n    } else if (mappedStatement.getResultSetType() != null) {\n        return connection.prepareStatement(sql, mappedStatement.getResultSetType().getValue(), ResultSet.CONCUR_READ_ONLY);\n    } else {\n        return connection.prepareStatement(sql);\n    }\n}\n')])])]),n("p",[e._v("如上，PreparedStatement 的创建过程没什么复杂的地方，就不多说了。下面分析运行时参数是如何被设置到 SQL 中的过程。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// -☆- PreparedStatementHandler\npublic void parameterize(Statement statement) throws SQLException {\n    // 通过参数处理器 ParameterHandler 设置运行时参数到 PreparedStatement 中\n    parameterHandler.setParameters((PreparedStatement) statement);\n}\n\npublic class DefaultParameterHandler implements ParameterHandler {\n    private final TypeHandlerRegistry typeHandlerRegistry;\n    private final MappedStatement mappedStatement;\n    private final Object parameterObject;\n    private final BoundSql boundSql;\n    private final Configuration configuration;\n\n    public void setParameters(PreparedStatement ps) {\n        /*\n         * 从 BoundSql 中获取 ParameterMapping 列表，每个 ParameterMapping \n         * 与原始 SQL 中的 #{xxx} 占位符一一对应\n         */\n        List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();\n        if (parameterMappings != null) {\n            for (int i = 0; i < parameterMappings.size(); i++) {\n                ParameterMapping parameterMapping = parameterMappings.get(i);\n                // 检测参数类型，排除掉 mode 为 OUT 类型的 parameterMapping\n                if (parameterMapping.getMode() != ParameterMode.OUT) {\n                    Object value;\n                    // 获取属性名\n                    String propertyName = parameterMapping.getProperty();\n                    // 检测 BoundSql 的 additionalParameters 是否包含 propertyName\n                    if (boundSql.hasAdditionalParameter(propertyName)) {\n                        value = boundSql.getAdditionalParameter(propertyName);\n                    } else if (parameterObject == null) {\n                        value = null;\n\n                    // 检测运行时参数是否有相应的类型解析器\n                    } else if (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) {\n                        /*\n                         * 若运行时参数的类型有相应的类型处理器 TypeHandler，则将 \n                         * parameterObject 设为当前属性的值。\n                         */\n                        value = parameterObject;\n                    } else {\n                        // 为用户传入的参数 parameterObject 创建元信息对象\n                        MetaObject metaObject = configuration.newMetaObject(parameterObject);\n                        // 从用户传入的参数中获取 propertyName 对应的值\n                        value = metaObject.getValue(propertyName);\n                    }\n                    \n                    // ---------------------分割线---------------------\n\n                    TypeHandler typeHandler = parameterMapping.getTypeHandler();\n                    JdbcType jdbcType = parameterMapping.getJdbcType();\n                    if (value == null && jdbcType == null) {\n                        // 此处 jdbcType = JdbcType.OTHER\n                        jdbcType = configuration.getJdbcTypeForNull();\n                    }\n                    try {\n                        // 由类型处理器 typeHandler 向 ParameterHandler 设置参数\n                        typeHandler.setParameter(ps, i + 1, value, jdbcType);\n                    } catch (TypeException e) {\n                        throw new TypeException(...);\n                    } catch (SQLException e) {\n                        throw new TypeException(...);\n                    }\n                }\n            }\n        }\n    }\n}\n")])])]),n("p",[e._v("如上代码，分割线以上的大段代码用于获取 #{xxx} 占位符属性所对应的运行时参数。分割线以下的代码则是获取 #{xxx} 占位符属性对应的 TypeHandler，并在最后通过 TypeHandler 将运行时参数值设置到 PreparedStatement 中。关于 TypeHandler 的用途，我在本系列文章的"),n("a",{attrs:{href:"http://www.coolblog.xyz/2018/07/16/MyBatis-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E5%AF%BC%E8%AF%BB/",target:"_blank",rel:"noopener noreferrer"}},[e._v("导读"),n("OutboundLink")],1),e._v("一文介绍过，这里就不赘述了。大家若不熟悉，可以去看看。")]),e._v(" "),n("h4",{attrs:{id:"_2-2-5-占位符的解析与参数的设置过程梳理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-5-占位符的解析与参数的设置过程梳理"}},[e._v("#")]),e._v(" 2.2.5 #{} 占位符的解析与参数的设置过程梳理")]),e._v(" "),n("p",[e._v("前面两节的内容比较多，本节我将对前两节的部分内容进行梳理，以便大家能够更好理解这两节内容之间的联系。假设我们有这样一条 SQL 语句：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("SELECT * FROM author WHERE name = #{name} AND age = #{age}\n")])])]),n("p",[e._v("这个 SQL 语句中包含两个 #{} 占位符，在运行时这两个占位符会被解析成两个 ParameterMapping 对象。如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("ParameterMapping{property='name', mode=IN, javaType=class java.lang.String, jdbcType=null, ...}\n")])])]),n("p",[e._v("和")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("ParameterMapping{property='age', mode=IN, javaType=class java.lang.Integer, jdbcType=null, ...}\n")])])]),n("p",[e._v("#{} 占位符解析完毕后，得到的 SQL 如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("SELECT * FROM Author WHERE name = ? AND age = ?\n")])])]),n("p",[e._v("这里假设下面这个方法与上面的 SQL 对应：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('Author findByNameAndAge(@Param("name") String name, @Param("age") Integer age)\n')])])]),n("p",[e._v("该方法的参数列表会被 ParamNameResolver 解析成一个 map，如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n    0: "name",\n    1: "age"\n}\n')])])]),n("p",[e._v("假设该方法在运行时有如下的调用：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('findByNameAndAge("tianxiaobo", 20)    // 20岁，好年轻啊，但是回不去了呀 😁\n')])])]),n("p",[e._v("此时，需要再次借助 ParamNameResolver 力量。这次我们将参数名和运行时的参数值绑定起来，得到如下的映射关系。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n    "name": "tianxiaobo",\n    "age": 20,\n    "param1": "tianxiaobo",\n    "param2": 20\n}\n')])])]),n("p",[e._v("下一步，我们要将运行时参数设置到 SQL 中。由于原 SQL 经过解析后，占位符信息已经被擦除掉了，我们无法直接将运行时参数 SQL 中。不过好在，这些占位符信息被记录在了 ParameterMapping 中了，MyBatis 会将 ParameterMapping 会按照 #{} 的解析顺序存入到 List 中。这样我们通过 ParameterMapping 在列表中的位置确定它与 SQL 中的哪个 "),n("code",[e._v("?")]),e._v(" 占位符相关联。同时通过 ParameterMapping 中的 property 字段，我们到“参数名与参数值”映射表中查找具体的参数值。这样，我们就可以将参数值准确的设置到 SQL 中了，此时 SQL 如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('SELECT * FROM Author WHERE name = "tianxiaobo" AND age = 20\n')])])]),n("p",[e._v("整个流程如下图所示。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://blog-pictures.oss-cn-shanghai.aliyuncs.com/15339208668346.jpg",alt:"img"}})]),e._v(" "),n("p",[e._v("当运行时参数被设置到 SQL 中 后，下一步要做的事情是执行 SQL，然后处理 SQL 执行结果。对于更新操作，数据库一般返回一个 int 行数值，表示受影响行数，这个处理起来比较简单。但对于查询操作，返回的结果类型多变，处理方式也很复杂。接下来，我们就来看看 MyBatis 是如何处理查询结果的。")]),e._v(" "),n("h4",{attrs:{id:"_2-2-6-处理查询结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-6-处理查询结果"}},[e._v("#")]),e._v(" 2.2.6 处理查询结果")]),e._v(" "),n("p",[e._v("MyBatis 可以将查询结果，即结果集 ResultSet 自动映射成实体类对象。这样使用者就无需再手动操作结果集，并将数据填充到实体类对象中。这可大大降低开发的工作量，提高工作效率。在 MyBatis 中，结果集的处理工作由结果集处理器 ResultSetHandler 执行。ResultSetHandler 是一个接口，它只有一个实现类 DefaultResultSetHandler。结果集的处理入口方法是 handleResultSets，下面来看一下该方法的实现。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public List<Object> handleResultSets(Statement stmt) throws SQLException {\n    \n    final List<Object> multipleResults = new ArrayList<Object>();\n\n    int resultSetCount = 0;\n    // 获取第一个结果集\n    ResultSetWrapper rsw = getFirstResultSet(stmt);\n\n    List<ResultMap> resultMaps = mappedStatement.getResultMaps();\n    int resultMapCount = resultMaps.size();\n    validateResultMapsCount(rsw, resultMapCount);\n\n    while (rsw != null && resultMapCount > resultSetCount) {\n        ResultMap resultMap = resultMaps.get(resultSetCount);\n        // 处理结果集\n        handleResultSet(rsw, resultMap, multipleResults, null);\n        // 获取下一个结果集\n        rsw = getNextResultSet(stmt);\n        cleanUpAfterHandlingResultSet();\n        resultSetCount++;\n    }\n\n    // 以下逻辑均与多结果集有关，就不分析了，代码省略\n    String[] resultSets = mappedStatement.getResultSets();\n    if (resultSets != null) {...}\n\n    return collapseSingleResultList(multipleResults);\n}\n\nprivate ResultSetWrapper getFirstResultSet(Statement stmt) throws SQLException {\n    // 获取结果集\n    ResultSet rs = stmt.getResultSet();\n    while (rs == null) {\n        /*\n         * 移动 ResultSet 指针到下一个上，有些数据库驱动可能需要使用者\n         * 先调用 getMoreResults 方法，然后才能调用 getResultSet 方法\n         * 获取到第一个 ResultSet\n         */\n        if (stmt.getMoreResults()) {\n            rs = stmt.getResultSet();\n        } else {\n            if (stmt.getUpdateCount() == -1) {\n                break;\n            }\n        }\n    }\n    /*\n     * 这里并不直接返回 ResultSet，而是将其封装到 ResultSetWrapper 中。\n     * ResultSetWrapper 中包含了 ResultSet 一些元信息，比如列名称、每列对应的 JdbcType、\n     * 以及每列对应的 Java 类名（class name，譬如 java.lang.String）等。\n     */\n    return rs != null ? new ResultSetWrapper(rs, configuration) : null;\n}\n")])])]),n("p",[e._v("如上，该方法首先从 Statement 中获取第一个结果集，然后调用 handleResultSet 方法对该结果集进行处理。一般情况下，如果我们不调用存储过程，不会涉及到多结果集的问题。由于存储过程并不是很常用，所以关于多结果集的处理逻辑我就不分析了。下面，我们把目光聚焦在单结果集的处理逻辑上。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private void handleResultSet(ResultSetWrapper rsw, ResultMap resultMap, List<Object> multipleResults, ResultMapping parentMapping) throws SQLException {\n    try {\n        if (parentMapping != null) {\n            // 多结果集相关逻辑，不分析了\n            handleRowValues(rsw, resultMap, null, RowBounds.DEFAULT, parentMapping);\n        } else {\n            /*\n             * 检测 resultHandler 是否为空。ResultHandler 是一个接口，使用者可实现该接口，\n             * 这样我们可以通过 ResultHandler 自定义接收查询结果的动作。比如我们可将结果存储到\n             * List、Map 亦或是 Set，甚至丢弃，这完全取决于大家的实现逻辑。\n             */ \n            if (resultHandler == null) {\n                // 创建默认的结果处理器\n                DefaultResultHandler defaultResultHandler = new DefaultResultHandler(objectFactory);\n                // 处理结果集的行数据\n                handleRowValues(rsw, resultMap, defaultResultHandler, rowBounds, null);\n                multipleResults.add(defaultResultHandler.getResultList());\n            } else {\n                // 处理结果集的行数据\n                handleRowValues(rsw, resultMap, resultHandler, rowBounds, null);\n            }\n        }\n    } finally {\n        closeResultSet(rsw.getResultSet());\n    }\n}\n")])])]),n("p",[e._v("在上面代码中，出镜率最高的 handleRowValues 方法，该方法用于处理结果集中的数据。下面来看一下这个方法的逻辑。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public void handleRowValues(ResultSetWrapper rsw, ResultMap resultMap, ResultHandler<?> resultHandler,\n        RowBounds rowBounds, ResultMapping parentMapping) throws SQLException {\n\n    if (resultMap.hasNestedResultMaps()) {\n        ensureNoRowBounds();\n        checkResultHandler();\n        // 处理嵌套映射，关于嵌套映射本文就不分析了\n        handleRowValuesForNestedResultMap(rsw, resultMap, resultHandler, rowBounds, parentMapping);\n    } else {\n        // 处理简单映射\n        handleRowValuesForSimpleResultMap(rsw, resultMap, resultHandler, rowBounds, parentMapping);\n    }\n}\n")])])]),n("p",[e._v("如上，handleRowValues 方法中针对两种映射方式进行了处理。一种是嵌套映射，另一种是简单映射。本文所说的嵌套查询是指 "),n("ResultMap",[e._v(" 中嵌套了一个 "),n("ResultMap",[e._v(" ，关于此种映射的处理方式本文就不进行分析了。下面我将详细分析简单映射的处理逻辑，如下：")])],1)],1),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private void handleRowValuesForSimpleResultMap(ResultSetWrapper rsw, ResultMap resultMap,\n        ResultHandler<?> resultHandler, RowBounds rowBounds, ResultMapping parentMapping) throws SQLException {\n\n    DefaultResultContext<Object> resultContext = new DefaultResultContext<Object>();\n    // 根据 RowBounds 定位到指定行记录\n    skipRows(rsw.getResultSet(), rowBounds);\n    // 检测是否还有更多行的数据需要处理\n    while (shouldProcessMoreRows(resultContext, rowBounds) && rsw.getResultSet().next()) {\n        // 获取经过鉴别器处理后的 ResultMap\n        ResultMap discriminatedResultMap = resolveDiscriminatedResultMap(rsw.getResultSet(), resultMap, null);\n        // 从 resultSet 中获取结果\n        Object rowValue = getRowValue(rsw, discriminatedResultMap);\n        // 存储结果\n        storeObject(resultHandler, resultContext, rowValue, parentMapping, rsw.getResultSet());\n    }\n}\n")])])]),n("p",[e._v("上面方法的逻辑较多，这里简单总结一下。如下：")]),e._v(" "),n("ol",[n("li",[e._v("根据 RowBounds 定位到指定行记录")]),e._v(" "),n("li",[e._v("循环处理多行数据")]),e._v(" "),n("li",[e._v("使用鉴别器处理 ResultMap")]),e._v(" "),n("li",[e._v("映射 ResultSet，得到映射结果 rowValue")]),e._v(" "),n("li",[e._v("存储结果")])]),e._v(" "),n("p",[e._v("在如上几个步骤中，鉴别器相关的逻辑就不分析了，不是很常用。第2步的检测逻辑比较简单，就不分析了。下面分析第一个步骤对应的代码逻辑。如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private void skipRows(ResultSet rs, RowBounds rowBounds) throws SQLException {\n    // 检测 rs 的类型，不同的类型行数据定位方式是不同的\n    if (rs.getType() != ResultSet.TYPE_FORWARD_ONLY) {\n        if (rowBounds.getOffset() != RowBounds.NO_ROW_OFFSET) {\n            // 直接定位到 rowBounds.getOffset() 位置处\n            rs.absolute(rowBounds.getOffset());\n        }\n    } else {\n        for (int i = 0; i < rowBounds.getOffset(); i++) {\n            /*\n             * 通过多次调用 rs.next() 方法实现行数据定位。\n             * 当 Offset 数值很大时，这种效率很低下\n             */\n            rs.next();\n        }\n    }\n}\n")])])]),n("p",[e._v("MyBatis 默认提供了 RowBounds 用于分页，从上面的代码中可以看出，这并非是一个高效的分页方式。除了使用 RowBounds，还可以使用一些第三方分页插件进行分页。关于第三方的分页插件，大家请自行查阅资料，这里就不展开说明了。下面分析一下 ResultSet 的映射过程，如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private Object getRowValue(ResultSetWrapper rsw, ResultMap resultMap) throws SQLException {\n    final ResultLoaderMap lazyLoader = new ResultLoaderMap();\n    // 创建实体类对象，比如 Article 对象\n    Object rowValue = createResultObject(rsw, resultMap, lazyLoader, null);\n    if (rowValue != null && !hasTypeHandlerForResultObject(rsw, resultMap.getType())) {\n        final MetaObject metaObject = configuration.newMetaObject(rowValue);\n        boolean foundValues = this.useConstructorMappings;\n        \n        // 检测是否应该自动映射结果集\n        if (shouldApplyAutomaticMappings(resultMap, false)) {\n            // 进行自动映射\n            foundValues = applyAutomaticMappings(rsw, resultMap, metaObject, null) || foundValues;\n        }\n        // 根据 <resultMap> 节点中配置的映射关系进行映射\n        foundValues = applyPropertyMappings(rsw, resultMap, metaObject, lazyLoader, null) || foundValues;\n        foundValues = lazyLoader.size() > 0 || foundValues;\n        rowValue = foundValues || configuration.isReturnInstanceForEmptyRow() ? rowValue : null;\n    }\n    return rowValue;\n}\n")])])]),n("p",[e._v("在上面的方法中，重要的逻辑已经注释出来了。分别如下：")]),e._v(" "),n("ol",[n("li",[e._v("创建实体类对象")]),e._v(" "),n("li",[e._v("检测结果集是否需要自动映射，若需要则进行自动映射")]),e._v(" "),n("li",[e._v("按 "),n("resultMap",[e._v(" 中配置的映射关系进行映射")])],1)]),e._v(" "),n("p",[e._v("这三处代码的逻辑比较复杂，接下来按顺序进行分节说明。首先分析实体类的创建过程。")]),e._v(" "),n("h5",{attrs:{id:"_2-2-6-1-创建实体类对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-6-1-创建实体类对象"}},[e._v("#")]),e._v(" 2.2.6.1 创建实体类对象")]),e._v(" "),n("p",[e._v("在我们的印象里，创建实体类对象是一个很简单的过程。直接通过 new 关键字，或通过反射即可完成任务。大家可能会想，把这么简单过程也拿出来说说，怕是有凑字数的嫌疑。实则不然，MyBatis 的维护者写了不少逻辑，以保证能成功创建实体类对象。如果实在无法创建，则抛出异常。下面我们来看一下 MyBatis 创建实体类对象的过程。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// -☆- DefaultResultSetHandler\nprivate Object createResultObject(ResultSetWrapper rsw, ResultMap resultMap, ResultLoaderMap lazyLoader, String columnPrefix) throws SQLException {\n\n    this.useConstructorMappings = false;\n    final List<Class<?>> constructorArgTypes = new ArrayList<Class<?>>();\n    final List<Object> constructorArgs = new ArrayList<Object>();\n\n    // 调用重载方法创建实体类对象\n    Object resultObject = createResultObject(rsw, resultMap, constructorArgTypes, constructorArgs, columnPrefix);\n    // 检测实体类是否有相应的类型处理器\n    if (resultObject != null && !hasTypeHandlerForResultObject(rsw, resultMap.getType())) {\n        final List<ResultMapping> propertyMappings = resultMap.getPropertyResultMappings();\n        for (ResultMapping propertyMapping : propertyMappings) {\n            // 如果开启了延迟加载，则为 resultObject 生成代理类\n            if (propertyMapping.getNestedQueryId() != null && propertyMapping.isLazy()) {\n                /*\n                 * 创建代理类，默认使用 Javassist 框架生成代理类。由于实体类通常不会实现接口，\n                 * 所以不能使用 JDK 动态代理 API 为实体类生成代理。\n                 */\n                resultObject = configuration.getProxyFactory()\n                    .createProxy(resultObject, lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);\n                break;\n            }\n        }\n    }\n    this.useConstructorMappings =\n        resultObject != null && !constructorArgTypes.isEmpty();\n    return resultObject;\n}\n")])])]),n("p",[e._v("如上，创建实体类对象的过程被封装在了 createResultObject 的重载方法中了，关于该方法，待会再分析。创建完实体类对后，还需要对 "),n("resultMap",[e._v(" 中配置的映射信息进行检测。若发现有关联查询，且关联查询结果的加载方式为延迟加载，此时需为实体类生成代理类。举个例子说明一下，假设有如下两个实体类：")])],1),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("/** 作者类 */\npublic class Author {\n    private Integer id;\n    private String name;\n    private Integer age;\n    private Integer sex;\n    \n    // 省略 getter/setter\n}\n\n/** 文章类 */\npublic class Article {\n    private Integer id;\n    private String title;\n    // 一对一关系\n    private Author author;\n    private String content;\n    \n    // 省略 getter/setter\n}\n")])])]),n("p",[e._v("如上，Article 对象中的数据由一条 SQL 从 article 表中查询。Article 类有一个 author 字段，该字段的数据由另一条 SQL 从 author 表中查出。我们在将 article 表的查询结果填充到 Article 类对象中时，并不希望 MyBaits 立即执行另一条 SQL 查询 author 字段对应的数据。而是期望在我们调用 article.getAuthor() 方法时，MyBaits 再执行另一条 SQL 从 author 表中查询出所需的数据。若如此，我们需要改造 getAuthor 方法，以保证调用该方法时可让 MyBaits 执行相关的 SQL。关于延迟加载后面将会进行详细的分析，这里先说这么多。下面分析 createResultObject 重载方法的逻辑，如下:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('private Object createResultObject(ResultSetWrapper rsw, ResultMap resultMap, List<Class<?>> constructorArgTypes, List<Object> constructorArgs, String columnPrefix) throws SQLException {\n\n    final Class<?> resultType = resultMap.getType();\n    final MetaClass metaType = MetaClass.forClass(resultType, reflectorFactory);\n    // 获取 <constructor> 节点对应的 ResultMapping\n    final List<ResultMapping> constructorMappings = resultMap.getConstructorResultMappings();\n\n    /*\n     * 检测是否有与返回值类型相对应的 TypeHandler，若有则直接从\n     * 通过 TypeHandler 从结果集中提取数据，并生成返回值对象\n     */\n    if (hasTypeHandlerForResultObject(rsw, resultType)) {\n        // 通过 TypeHandler 获取提取，并生成返回值对象\n        return createPrimitiveResultObject(rsw, resultMap, columnPrefix);\n    } else if (!constructorMappings.isEmpty()) {\n        /*\n         * 通过 <constructor> 节点配置的映射信息从 ResultSet 中提取数据，\n         * 然后将这些数据传给指定构造方法，即可创建实体类对象\n         */\n        return createParameterizedResultObject(rsw, resultType, constructorMappings, constructorArgTypes, constructorArgs, columnPrefix);\n    } else if (resultType.isInterface() || metaType.hasDefaultConstructor()) {\n        // 通过 ObjectFactory 调用目标类的默认构造方法创建实例\n        return objectFactory.create(resultType);\n    } else if (shouldApplyAutomaticMappings(resultMap, false)) {\n        // 通过自动映射查找合适的构造方法创建实例\n        return createByConstructorSignature(rsw, resultType, constructorArgTypes, constructorArgs, columnPrefix);\n    }\n    throw new ExecutorException("Do not know how to create an instance of " + resultType);\n}\n')])])]),n("p",[e._v("如上，createResultObject 方法中包含了4种创建实体类对象的方式。一般情况下，若无特殊要求，MyBatis 会通过 ObjectFactory 调用默认构造方法创建实体类对象。ObjectFactory 是一个接口，大家可以实现这个接口，以按照自己的逻辑控制对象的创建过程。到此，实体类对象已经创建好了，接下里要做的事情是将结果集中的数据映射到实体类对象中。")]),e._v(" "),n("h5",{attrs:{id:"_2-2-6-2-结果集映射"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-6-2-结果集映射"}},[e._v("#")]),e._v(" 2.2.6.2 结果集映射")]),e._v(" "),n("p",[e._v("在 MyBatis 中，结果集自动映射有三种等级。三种等级官方文档上有所说明，这里直接引用一下。如下：")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("NONE")]),e._v(" - 禁用自动映射。仅设置手动映射属性")]),e._v(" "),n("li",[n("code",[e._v("PARTIAL")]),e._v(" - 将自动映射结果除了那些有内部定义内嵌结果映射的(joins)")]),e._v(" "),n("li",[n("code",[e._v("FULL")]),e._v(" - 自动映射所有")])]),e._v(" "),n("p",[e._v("除了以上三种等级，我们还可以显示配置 "),n("resultMap",[e._v(" 节点的 autoMapping 属性，以启用或者禁用指定 ResultMap 的自定映射设定。下面，来看一下自动映射相关的逻辑。")])],1),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private boolean shouldApplyAutomaticMappings(ResultMap resultMap, boolean isNested) {\n    // 检测 <resultMap> 是否配置了 autoMapping 属性\n    if (resultMap.getAutoMapping() != null) {\n        // 返回 autoMapping 属性\n        return resultMap.getAutoMapping();\n    } else {\n        if (isNested) {\n            // 对于嵌套 resultMap，仅当全局的映射行为为 FULL 时，才进行自动映射\n            return AutoMappingBehavior.FULL == configuration.getAutoMappingBehavior();\n        } else {\n            // 对于普通的 resultMap，只要全局的映射行为不为 NONE，即可进行自动映射\n            return AutoMappingBehavior.NONE != configuration.getAutoMappingBehavior();\n        }\n    }\n}\n")])])]),n("p",[e._v("如上，shouldApplyAutomaticMappings 方法用于检测是否应为当前结果集应用自动映射。检测结果取决于 "),n("resultMap",[e._v(" 节点的 autoMapping 属性，以及全局自动映射行为。上面代码的逻辑不难理解，就不多说了。接下来分析 MyBatis 如何进行自动映射。")])],1),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private boolean applyAutomaticMappings(ResultSetWrapper rsw, ResultMap resultMap, MetaObject metaObject, String columnPrefix) throws SQLException {\n\n    // 获取 UnMappedColumnAutoMapping 列表\n    List<UnMappedColumnAutoMapping> autoMapping = createAutomaticMappings(rsw, resultMap, metaObject, columnPrefix);\n    boolean foundValues = false;\n    if (!autoMapping.isEmpty()) {\n        for (UnMappedColumnAutoMapping mapping : autoMapping) {\n            // 通过 TypeHandler 从结果集中获取指定列的数据\n            final Object value = mapping.typeHandler.getResult(rsw.getResultSet(), mapping.column);\n            if (value != null) {\n                foundValues = true;\n            }\n            if (value != null || (configuration.isCallSettersOnNulls() && !mapping.primitive)) {\n                // 通过元信息对象设置 value 到实体类对象的指定字段上\n                metaObject.setValue(mapping.property, value);\n            }\n        }\n    }\n    return foundValues;\n}\n")])])]),n("p",[e._v("applyAutomaticMappings 方法的代码不多，逻辑也不是很复杂。首先是获取 UnMappedColumnAutoMapping 集合，然后遍历该集合，并通过 TypeHandler 从结果集中获取数据，最后再将获取到的数据设置到实体类对象中。虽然逻辑上看起来没什么复杂的东西，但如果不清楚 UnMappedColumnAutoMapping 的用途，是无法理解上面代码的逻辑的。所以下面简单介绍一下 UnMappedColumnAutoMapping 的用途。")]),e._v(" "),n("p",[e._v("UnMappedColumnAutoMapping 用于记录未配置在 "),n("resultMap",[e._v(" 节点中的映射关系。该类定义在 DefaultResultSetHandler 内部，它的代码如下：")])],1),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private static class UnMappedColumnAutoMapping {\n\n    private final String column;\n    private final String property;\n    private final TypeHandler<?> typeHandler;\n    private final boolean primitive;\n\n    public UnMappedColumnAutoMapping(String column, String property, TypeHandler<?> typeHandler, boolean primitive) {\n        this.column = column;\n        this.property = property;\n        this.typeHandler = typeHandler;\n        this.primitive = primitive;\n    }\n}\n")])])]),n("p",[e._v("如上，以上就是 UnMappedColumnAutoMapping 类的所有代码，没什么逻辑，仅用于记录映射关系。下面看一下获取 UnMappedColumnAutoMapping 集合的过程，如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// -☆- DefaultResultSetHandler\nprivate List<UnMappedColumnAutoMapping> createAutomaticMappings(ResultSetWrapper rsw, ResultMap resultMap, MetaObject metaObject, String columnPrefix) throws SQLException {\n\n    final String mapKey = resultMap.getId() + ":" + columnPrefix;\n    // 从缓存中获取 UnMappedColumnAutoMapping 列表\n    List<UnMappedColumnAutoMapping> autoMapping = autoMappingsCache.get(mapKey);\n    // 缓存未命中\n    if (autoMapping == null) {\n        autoMapping = new ArrayList<UnMappedColumnAutoMapping>();\n        // 从 ResultSetWrapper 中获取未配置在 <resultMap> 中的列名\n        final List<String> unmappedColumnNames = rsw.getUnmappedColumnNames(resultMap, columnPrefix);\n        for (String columnName : unmappedColumnNames) {\n            String propertyName = columnName;\n            if (columnPrefix != null && !columnPrefix.isEmpty()) {\n                if (columnName.toUpperCase(Locale.ENGLISH).startsWith(columnPrefix)) {\n                    // 获取不包含列名前缀的属性名\n                    propertyName = columnName.substring(columnPrefix.length());\n                } else {\n                    continue;\n                }\n            }\n            // 将下划线形式的列名转成驼峰式，比如 AUTHOR_NAME -> authorName\n            final String property = metaObject.findProperty(propertyName, configuration.isMapUnderscoreToCamelCase());\n            if (property != null && metaObject.hasSetter(property)) {\n                // 检测当前属性是否存在于 resultMap 中\n                if (resultMap.getMappedProperties().contains(property)) {\n                    continue;\n                }\n                // 获取属性对于的类型\n                final Class<?> propertyType = metaObject.getSetterType(property);\n                if (typeHandlerRegistry.hasTypeHandler(propertyType, rsw.getJdbcType(columnName))) {\n                    // 获取类型处理器\n                    final TypeHandler<?> typeHandler = rsw.getTypeHandler(propertyType, columnName);\n                    // 封装上面获取到的信息到 UnMappedColumnAutoMapping 对象中\n                    autoMapping.add(new UnMappedColumnAutoMapping(columnName, property, typeHandler, propertyType.isPrimitive()));\n                } else {\n                    configuration.getAutoMappingUnknownColumnBehavior()\n                        .doAction(mappedStatement, columnName, property, propertyType);\n                }\n            } else {\n                /*\n                 * 若 property 为空，或实体类中无 property 属性，此时无法完成\n                 * 列名与实体类属性建立映射关系。针对这种情况，有三种处理方式，\n                 *   1. 什么都不做\n                 *   2. 仅打印日志\n                 *   3. 抛出异常\n                 * 默认情况下，是什么都不做\n                 */\n                configuration.getAutoMappingUnknownColumnBehavior()\n                    .doAction(mappedStatement, columnName, (property != null) ? property : propertyName, null);\n            }\n        }\n        // 写入缓存\n        autoMappingsCache.put(mapKey, autoMapping);\n    }\n    return autoMapping;\n}\n')])])]),n("p",[e._v("上面的代码有点多，不过不用太担心，耐心看一下，还是可以看懂的。下面我来总结一下这个方法的逻辑。")]),e._v(" "),n("ol",[n("li",[e._v("从 ResultSetWrapper 中获取未配置在 "),n("resultMap",[e._v(" 中的列名")])],1),e._v(" "),n("li",[e._v("遍历上一步获取到的列名列表")]),e._v(" "),n("li",[e._v("若列名包含列名前缀，则移除列名前缀，得到属性名")]),e._v(" "),n("li",[e._v("将下划线形式的列名转成驼峰式")]),e._v(" "),n("li",[e._v("获取属性类型")]),e._v(" "),n("li",[e._v("获取类型处理器")]),e._v(" "),n("li",[e._v("创建 UnMappedColumnAutoMapping 实例")])]),e._v(" "),n("p",[e._v("以上步骤中，除了第一步，其他都是常规操作，无需过多说明。下面来分析第一个步骤的逻辑，如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// -☆- ResultSetWrapper\npublic List<String> getUnmappedColumnNames(ResultMap resultMap, String columnPrefix) throws SQLException {\n    List<String> unMappedColumnNames = unMappedColumnNamesMap.get(getMapKey(resultMap, columnPrefix));\n    if (unMappedColumnNames == null) {\n        // 加载已映射与未映射列名\n        loadMappedAndUnmappedColumnNames(resultMap, columnPrefix);\n        // 获取未映射列名\n        unMappedColumnNames = unMappedColumnNamesMap.get(getMapKey(resultMap, columnPrefix));\n    }\n    return unMappedColumnNames;\n}\n\nprivate void loadMappedAndUnmappedColumnNames(ResultMap resultMap, String columnPrefix) throws SQLException {\n    List<String> mappedColumnNames = new ArrayList<String>();\n    List<String> unmappedColumnNames = new ArrayList<String>();\n    final String upperColumnPrefix = columnPrefix == null ? null : columnPrefix.toUpperCase(Locale.ENGLISH);\n    // 为 <resultMap> 中的列名拼接前缀\n    final Set<String> mappedColumns = prependPrefixes(resultMap.getMappedColumns(), upperColumnPrefix);\n    /*\n     * 遍历 columnNames，columnNames 是 ResultSetWrapper 的成员变量，\n     * 保存了当前结果集中的所有列名\n     */\n    for (String columnName : columnNames) {\n        final String upperColumnName = columnName.toUpperCase(Locale.ENGLISH);\n        // 检测已映射列名集合中是否包含当前列名\n        if (mappedColumns.contains(upperColumnName)) {\n            mappedColumnNames.add(upperColumnName);\n        } else {\n            // 将列名存入 unmappedColumnNames 中\n            unmappedColumnNames.add(columnName);\n        }\n    }\n    // 缓存列名集合\n    mappedColumnNamesMap.put(getMapKey(resultMap, columnPrefix), mappedColumnNames);\n    unMappedColumnNamesMap.put(getMapKey(resultMap, columnPrefix), unmappedColumnNames);\n}\n")])])]),n("p",[e._v("如上，已映射列名与未映射列名的分拣逻辑并不复杂。我简述一下这个逻辑，首先是从当前数据集中获取列名集合，然后获取 "),n("resultMap",[e._v(" 中配置的列名集合。之后遍历数据集中的列名集合，并判断列名是否被配置在了 "),n("resultMap",[e._v(" 节点中。若配置了，则表明该列名已有映射关系，此时该列名存入 mappedColumnNames 中。若未配置，则表明列名未与实体类的某个字段形成映射关系，此时该列名存入 unmappedColumnNames 中。这样，列名的分拣工作就完成了。分拣过程示意图如下：")])],1)],1),e._v(" "),n("p",[n("img",{attrs:{src:"https://blog-pictures.oss-cn-shanghai.aliyuncs.com/15340836193656.jpg",alt:"img"}})]),e._v(" "),n("p",[e._v("如上图所示，实体类 Author 的 id 和 name 字段与列名 id 和 name 被配置在了 "),n("resultMap",[e._v(" 中，它们之间形成了映射关系。列名 age、sex 和 email 未配置在 "),n("resultMap",[e._v(" 中，因此未与 Author 中的字段形成映射，所以他们最终都被放入了 unMappedColumnNames 集合中。弄懂了未映射列名获取的过程，自动映射的代码逻辑就不难懂了。好了，关于自动映射的分析就先到这，接下来分析一下 MyBatis 是如何将结果集中的数据填充到已映射的实体类字段中的。")])],1)],1),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// -☆- DefaultResultSetHandler\nprivate boolean applyPropertyMappings(ResultSetWrapper rsw, ResultMap resultMap, MetaObject metaObject,ResultLoaderMap lazyLoader, String columnPrefix) throws SQLException {\n    \n    // 获取已映射的列名\n    final List<String> mappedColumnNames = rsw.getMappedColumnNames(resultMap, columnPrefix);\n    boolean foundValues = false;\n    // 获取 ResultMapping\n    final List<ResultMapping> propertyMappings = resultMap.getPropertyResultMappings();\n    for (ResultMapping propertyMapping : propertyMappings) {\n        // 拼接列名前缀，得到完整列名\n        String column = prependPrefix(propertyMapping.getColumn(), columnPrefix);\n        if (propertyMapping.getNestedResultMapId() != null) {\n            column = null;\n        }\n        /*\n         * 下面的 if 分支由三个或条件组合而成，三个条件的含义如下：\n         *   条件一：检测 column 是否为 {prop1=col1, prop2=col2} 形式，该\n         *          种形式的 column 一般用于关联查询\n         *   条件二：检测当前列名是否被包含在已映射的列名集合中，若包含则可进行数据集映射操作\n         *   条件三：多结果集相关，暂不分析\n         */\n        if (propertyMapping.isCompositeResult()\n            || (column != null && mappedColumnNames.contains(column.toUpperCase(Locale.ENGLISH)))\n            || propertyMapping.getResultSet() != null) {\n            \n            // 从结果集中获取指定列的数据\n            Object value = getPropertyMappingValue(rsw.getResultSet(), metaObject, propertyMapping, lazyLoader, columnPrefix);\n            \n            final String property = propertyMapping.getProperty();\n            if (property == null) {\n                continue;\n\n            // 若获取到的值为 DEFERED，则延迟加载该值\n            } else if (value == DEFERED) {\n                foundValues = true;\n                continue;\n            }\n            if (value != null) {\n                foundValues = true;\n            }\n            if (value != null || (configuration.isCallSettersOnNulls() && !metaObject.getSetterType(property)\n                                  .isPrimitive())) {\n\n                // 将获取到的值设置到实体类对象中\n                metaObject.setValue(property, value);\n            }\n        }\n    }\n    return foundValues;\n}\n\nprivate Object getPropertyMappingValue(ResultSet rs, MetaObject metaResultObject, ResultMapping propertyMapping,ResultLoaderMap lazyLoader, String columnPrefix) throws SQLException {\n\n    if (propertyMapping.getNestedQueryId() != null) {\n        // 获取关联查询结果，下一节分析\n        return getNestedQueryMappingValue(rs, metaResultObject, propertyMapping, lazyLoader, columnPrefix);\n    } else if (propertyMapping.getResultSet() != null) {\n        addPendingChildRelation(rs, metaResultObject, propertyMapping);\n        return DEFERED;\n    } else {\n        final TypeHandler<?> typeHandler = propertyMapping.getTypeHandler();\n        // 拼接前缀\n        final String column = prependPrefix(propertyMapping.getColumn(), columnPrefix);\n        // 从 ResultSet 中获取指定列的值\n        return typeHandler.getResult(rs, column);\n    }\n}\n")])])]),n("p",[e._v("如上，applyPropertyMappings 方法首先从 ResultSetWrapper 中获取已映射列名集合 mappedColumnNames，从 ResultMap 获取映射对象 ResultMapping 集合。然后遍历 ResultMapping 集合，再此过程中调用 getPropertyMappingValue 获取指定指定列的数据，最后将获取到的数据设置到实体类对象中。到此，基本的结果集映射过程就分析完了。")]),e._v(" "),n("p",[e._v("结果集映射相关的代码比较多，结果集的映射过程比较复杂的，需要一定的耐心去阅读和理解代码。好了，稍作休息，稍后分析关联查询相关的逻辑。")]),e._v(" "),n("h5",{attrs:{id:"_2-2-6-3-关联查询与延迟加载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-6-3-关联查询与延迟加载"}},[e._v("#")]),e._v(" 2.2.6.3 关联查询与延迟加载")]),e._v(" "),n("p",[e._v("我们在学习 MyBatis 框架时，会经常碰到一对一，一对多的使用场景。对于这样的场景，通常我们可以用一条 SQL 进行多表查询完成任务。当然我们也可以使用关联查询，将一条 SQL 拆成两条去完成查询任务。MyBatis 提供了两个标签用于支持一对一和一对多的使用场景，分别是 "),n("association",[e._v(" 和 "),n("collection",[e._v("。下面我来演示一下如何使用 "),n("association",[e._v(" 完成一对一的关联查询。先来看看实体类的定义：")])],1)],1)],1),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("/** 作者类 */\npublic class Author {\n    private Integer id;\n    private String name;\n    private Integer age;\n    private Integer sex;\n    private String email;\n    \n    // 省略 getter/setter\n}\n\n/** 文章类 */\npublic class Article {\n    private Integer id;\n    private String title;\n    // 一对一关系\n    private Author author;\n    private String content;\n    private Date createTime;\n    \n    // 省略 getter/setter\n}\n")])])]),n("p",[e._v("相关表记录如下：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://blog-pictures.oss-cn-shanghai.aliyuncs.com/15341573511612.jpg",alt:"img"}})]),e._v(" "),n("p",[e._v("接下来看一下 Mapper 接口与映射文件的定义。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public interface ArticleDao {\n    Article findOne(@Param("id") int id);\n    Author findAuthor(@Param("id") int authorId);\n}\n<mapper namespace="xyz.coolblog.dao.ArticleDao">\n    <resultMap id="articleResult" type="Article">\n        <result property="createTime" column="create_time"/>\n        <association property="author" column="author_id" javaType="Author" select="findAuthor"/>\n    </resultMap>\n\n    <select id="findOne" resultMap="articleResult">\n        SELECT\n            id, author_id, title, content, create_time\n        FROM\n            article\n        WHERE\n            id = #{id}\n    </select>\n\n    <select id="findAuthor" resultType="Author">\n        SELECT\n            id, name, age, sex, email\n        FROM\n            author\n        WHERE\n            id = #{id}\n    </select>\n</mapper>\n')])])]),n("p",[e._v("好了，必要在的准备工作做完了，下面可以写测试代码了。如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class OneToOneTest {\n\n    private SqlSessionFactory sqlSessionFactory;\n\n    @Before\n    public void prepare() throws IOException {\n        String resource = "mybatis-one-to-one-config.xml";\n        InputStream inputStream = Resources.getResourceAsStream(resource);\n        sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n        inputStream.close();\n    }\n    \n    @Test\n    public void testOne2One() {\n        SqlSession session = sqlSessionFactory.openSession();\n        try {\n            ArticleDao articleDao = session.getMapper(ArticleDao.class);\n            Article article = articleDao.findOne(1);\n\n            Author author = article.getAuthor();\n            article.setAuthor(null);\n\n            System.out.println("\\narticles info:");\n            System.out.println(article);\n\n            System.out.println("\\nauthor info:");\n            System.out.println(author);\n        } finally {\n            session.close();\n        }\n    }\n}\n')])])]),n("p",[e._v("测试结果如下：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://blog-pictures.oss-cn-shanghai.aliyuncs.com/15341724299678.jpg",alt:"img"}})]),e._v(" "),n("p",[e._v("如上，从上面的输出结果中可以看出，我们在调用 ArticleDao 的 findOne 方法时，MyBatis 执行了两条 SQL，完成了一对一的查询需求。理解了上面的例子后，下面就可以深入到源码中，看看 MyBatis 是如何实现关联查询的。接下里从 getNestedQueryMappingValue 方法开始分析，如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('private Object getNestedQueryMappingValue(ResultSet rs, MetaObject metaResultObject, ResultMapping propertyMapping, ResultLoaderMap lazyLoader, String columnPrefix) throws SQLException {\n\n    // 获取关联查询 id，id = 命名空间 + <association> 的 select 属性值\n    final String nestedQueryId = propertyMapping.getNestedQueryId();\n    final String property = propertyMapping.getProperty();\n    // 根据 nestedQueryId 获取 MappedStatement\n    final MappedStatement nestedQuery = configuration.getMappedStatement(nestedQueryId);\n    final Class<?> nestedQueryParameterType = nestedQuery.getParameterMap().getType();\n    /*\n     * 生成关联查询语句参数对象，参数类型可能是一些包装类，Map 或是自定义的实体类，\n     * 具体类型取决于配置信息。以上面的例子为基础，下面分析不同配置对参数类型的影响：\n     *   1. <association column="author_id"> \n     *      column 属性值仅包含列信息，参数类型为 author_id 列对应的类型，这里为 Integer\n     * \n     *   2. <association column="{id=author_id, name=title}"> \n     *      column 属性值包含了属性名与列名的复合信息，MyBatis 会根据列名从 ResultSet 中\n     *      获取列数据，并将列数据设置到实体类对象的指定属性中，比如：\n     *          Author{id=1, name="MyBatis 源码分析系列文章导读", age=null, ....}\n     *      或是以键值对 <属性, 列数据> 的形式，将两者存入 Map 中。比如：\n     *          {"id": 1, "name": "MyBatis 源码分析系列文章导读"}\n     *\n     *      至于参数类型到底为实体类还是 Map，取决于关联查询语句的配置信息。比如：\n     *          <select id="findAuthor">  ->  参数类型为 Map\n     *          <select id="findAuthor" parameterType="Author"> -> 参数类型为实体类\n     */\n    final Object nestedQueryParameterObject = prepareParameterForNestedQuery(rs, propertyMapping, nestedQueryParameterType, columnPrefix);\n    Object value = null;\n    if (nestedQueryParameterObject != null) {\n        // 获取 BoundSql\n        final BoundSql nestedBoundSql = nestedQuery.getBoundSql(nestedQueryParameterObject);\n        final CacheKey key = executor.createCacheKey(nestedQuery, nestedQueryParameterObject, RowBounds.DEFAULT, nestedBoundSql);\n        final Class<?> targetType = propertyMapping.getJavaType();\n\n        // 检查一级缓存是否保存了关联查询结果\n        if (executor.isCached(nestedQuery, key)) {\n            /*\n             * 从一级缓存中获取关联查询的结果，并通过 metaResultObject \n             * 将结果设置到相应的实体类对象中\n             */\n            executor.deferLoad(nestedQuery, metaResultObject, property, key, targetType);\n            value = DEFERED;\n        } else {\n            // 创建结果加载器\n            final ResultLoader resultLoader = new ResultLoader(configuration, executor, nestedQuery, nestedQueryParameterObject, targetType, key, nestedBoundSql);\n            // 检测当前属性是否需要延迟加载\n            if (propertyMapping.isLazy()) {\n                // 添加延迟加载相关的对象到 loaderMap 集合中\n                lazyLoader.addLoader(property, metaResultObject, resultLoader);\n                value = DEFERED;\n            } else {\n                // 直接执行关联查询\n                value = resultLoader.loadResult();\n            }\n        }\n    }\n    return value;\n}\n')])])]),n("p",[e._v("如上，上面对关联查询进行了比较多的注释，导致该方法看起来有点复杂。当然，真实的逻辑确实有点复杂，因为它还调用了其他的很多方法。下面先来总结一下该方法的逻辑：")]),e._v(" "),n("ol",[n("li",[e._v("根据 nestedQueryId 获取 MappedStatement")]),e._v(" "),n("li",[e._v("生成参数对象")]),e._v(" "),n("li",[e._v("获取 BoundSql")]),e._v(" "),n("li",[e._v("检测一级缓存中是否有关联查询的结果，若有，则将结果设置到实体类对象中")]),e._v(" "),n("li",[e._v("若一级缓存未命中，则创建结果加载器 ResultLoader")]),e._v(" "),n("li",[e._v("检测当前属性是否需要进行延迟加载，若需要，则添加延迟加载相关的对象到 loaderMap 集合中")]),e._v(" "),n("li",[e._v("如不需要延迟加载，则直接通过结果加载器加载结果")])]),e._v(" "),n("p",[e._v("如上，getNestedQueryMappingValue 的中逻辑多是都是和延迟加载有关。除了延迟加载，以上流程中针对一级缓存的检查是十分有必要的，若缓存命中，可直接取用结果，无需再在执行关联查询 SQL。若缓存未命中，接下来就要按部就班执行延迟加载相关逻辑，接下来，分析一下 MyBatis 延迟加载是如何实现的。首先我们来看一下添加延迟加载相关对象到 loaderMap 集合中的逻辑，如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// -☆- ResultLoaderMap\npublic void addLoader(String property, MetaObject metaResultObject, ResultLoader resultLoader) {\n    // 将属性名转为大写\n    String upperFirst = getUppercaseFirstProperty(property);\n    if (!upperFirst.equalsIgnoreCase(property) && loaderMap.containsKey(upperFirst)) {\n        throw new ExecutorException("Nested lazy loaded result property \'" + property +\n                                    "\' for query id \'" + resultLoader.mappedStatement.getId() +\n                                    " already exists in the result map. The leftmost property of all lazy loaded properties must be unique within a result map.");\n    }\n    // 创建 LoadPair，并将 <大写属性名，LoadPair对象> 键值对添加到 loaderMap 中\n    loaderMap.put(upperFirst, new LoadPair(property, metaResultObject, resultLoader));\n}\n')])])]),n("p",[e._v("如上，addLoader 方法的参数最终都传给了 LoadPair，该类的 load 方法会在内部调用 ResultLoader 的 loadResult 方法进行关联查询，并通过 metaResultObject 将查询结果设置到实体类对象中。那 LoadPair 的 load 方法由谁调用呢？答案是实体类的代理对象。下面我们修改一下上面示例中的部分代码，演示一下延迟加载。首先，我们需要在 MyBatis 配置文件的 "),n("settings",[e._v(" 节点中加入或覆盖如下配置：")])],1),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('\x3c!-- 开启延迟加载 --\x3e\n<setting name="lazyLoadingEnabled" value="true"/>\n\x3c!-- 关闭积极的加载策略 --\x3e\n<setting name="aggressiveLazyLoading" value="false"/>\n\x3c!-- 延迟加载的触发方法 --\x3e\n<setting name="lazyLoadTriggerMethods" value="equals,hashCode"/>\n')])])]),n("p",[e._v("上面三个配置 MyBatis 官方文档中有较为详细的介绍，大家可以参考官方文档，我就不详细介绍了。下面修改一下测试类的代码：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class OneToOneTest {\n\n    private SqlSessionFactory sqlSessionFactory;\n\n    @Before\n    public void prepare() throws IOException {...}\n    \n    @Test\n    public void testOne2One() {\n        SqlSession session = sqlSessionFactory.openSession();\n        try {\n            ArticleDao articleDao = session.getMapper(ArticleDao.class);\n            Article article = articleDao.findOne(1);\n\n            System.out.println("\\narticles info:");\n            System.out.println(article);\n\n            System.out.println("\\n延迟加载 author 字段：");\n            // 通过 getter 方法触发延迟加载\n            Author author = article.getAuthor();\n            System.out.println("\\narticles info:");\n            System.out.println(article);\n            System.out.println("\\nauthor info:");\n            System.out.println(author);\n        } finally {\n            session.close();\n        }\n    }\n}\n')])])]),n("p",[e._v("测试结果如下：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://blog-pictures.oss-cn-shanghai.aliyuncs.com/15341727747023.jpg",alt:"img"}})]),e._v(" "),n("p",[e._v("从上面结果中可以看出，我们在未调用 getAuthor 方法时，Article 对象中的 author 字段为 null。调用该方法后，再次输出 Article 对象，发现其 author 字段有值了，表明 author 字段的延迟加载逻辑被触发了。既然调用 getAuthor 可以触发延迟加载，那么该方法一定被做过手脚了，不然该方法应该返回 null 才是。如果大家还记得 2.2.6.1 节中的内容，大概就知道是怎么回事了 - MyBatis 会为需要延迟加载的类生成代理类，代理逻辑会拦截实体类的方法调用。默认情况下，MyBatis 会使用 Javassist 为实体类生成代理，代理逻辑封装在 JavassistProxyFactory 类中，下面一起看一下。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// -☆- JavassistProxyFactory\npublic Object invoke(Object enhanced, Method method, Method methodProxy, Object[] args) throws Throwable {\n    final String methodName = method.getName();\n    try {\n        synchronized (lazyLoader) {\n            if (WRITE_REPLACE_METHOD.equals(methodName)) {\n                // 针对 writeReplace 方法的处理逻辑，与延迟加载无关，不分析了\n            } else {\n                if (lazyLoader.size() > 0 && !FINALIZE_METHOD.equals(methodName)) {\n                    /*\n                     * 如果 aggressive 为 true，或触发方法（比如 equals，hashCode 等）被调用，\n                     * 则加载所有的所有延迟加载的数据\n                     */\n                    if (aggressive || lazyLoadTriggerMethods.contains(methodName)) {\n                        lazyLoader.loadAll();\n                    } else if (PropertyNamer.isSetter(methodName)) {\n                        final String property = PropertyNamer.methodToProperty(methodName);\n                        // 如果使用者显示调用了 setter 方法，则将相应的延迟加载类从 loaderMap 中移除\n                        lazyLoader.remove(property);\n                        \n                    // 检测使用者是否调用 getter 方法\n                    } else if (PropertyNamer.isGetter(methodName)) {\n                        final String property = PropertyNamer.methodToProperty(methodName);\n                        // 检测该属性是否有相应的 LoadPair 对象\n                        if (lazyLoader.hasLoader(property)) {\n                            // 执行延迟加载逻辑\n                            lazyLoader.load(property);\n                        }\n                    }\n                }\n            }\n        }\n        // 调用被代理类的方法\n        return methodProxy.invoke(enhanced, args);\n    } catch (Throwable t) {\n        throw ExceptionUtil.unwrapThrowable(t);\n    }\n}\n")])])]),n("p",[e._v("如上，代理方法首先会检查 aggressive 是否为 true，如果不满足，再去检查 lazyLoadTriggerMethods 是否包含当前方法名。这里两个条件只要一个为 true，当前实体类中所有需要延迟加载。aggressive 和 lazyLoadTriggerMethods 两个变量的值取决于下面的配置。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<setting name="aggressiveLazyLoading" value="false"/>\n<setting name="lazyLoadTriggerMethods" value="equals,hashCode"/>\n')])])]),n("p",[e._v("现在大家知道上面两个配置是如何在代码中使用的了，比较简单，就不多说了。")]),e._v(" "),n("p",[e._v("回到上面的代码中，如果执行线程未进入第一个条件分支，那么紧接着，代理逻辑会检查使用者是不是调用了实体类的 setter 方法，如果调用了，就将该属性对应的 LoadPair 从 loaderMap 中移除。为什么要这么做呢？答案是：使用者既然手动调用 setter 方法，说明使用者想自定义某个属性的值。此时，延迟加载逻辑不应该再修改该属性的值，所以这里从 loaderMap 中移除属性对于的 LoadPair。")]),e._v(" "),n("p",[e._v("最后如果使用者调用的是某个属性的 getter 方法，且该属性配置了延迟加载，此时延迟加载逻辑就会被触发。那接下来，我们来看看延迟加载逻辑是怎样实现的的。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// -☆- ResultLoaderMap\npublic boolean load(String property) throws SQLException {\n    // 从 loaderMap 中移除 property 所对应的 LoadPair\n    LoadPair pair = loaderMap.remove(property.toUpperCase(Locale.ENGLISH));\n    if (pair != null) {\n        // 加载结果\n        pair.load();\n        return true;\n    }\n    return false;\n}\n\n// -☆- LoadPair\npublic void load() throws SQLException {\n    if (this.metaResultObject == null) {\n        throw new IllegalArgumentException("metaResultObject is null");\n    }\n    if (this.resultLoader == null) {\n        throw new IllegalArgumentException("resultLoader is null");\n    }\n\n    // 调用重载方法\n    this.load(null);\n}\n\npublic void load(final Object userObject) throws SQLException {\n    /*\n     * 若 metaResultObject 和 resultLoader 为 null，则创建相关对象。\n     * 在当前调用情况下，两者均不为 null，条件不成立。篇幅原因，下面代码不分析了\n     */\n    if (this.metaResultObject == null || this.resultLoader == null) {...}\n\n    // 线程安全检测\n    if (this.serializationCheck == null) {\n        final ResultLoader old = this.resultLoader;\n        // 重新创建新的 ResultLoader 和 ClosedExecutor，ClosedExecutor 是非线程安全的\n        this.resultLoader = new ResultLoader(old.configuration, new ClosedExecutor(), old.mappedStatement, old.parameterObject, old.targetType, old.cacheKey, old.boundSql);\n    }\n\n    /*\n     * 调用 ResultLoader 的 loadResult 方法加载结果，\n     * 并通过 metaResultObject 设置结果到实体类对象中\n     */\n    this.metaResultObject.setValue(property, this.resultLoader.loadResult());\n}\n')])])]),n("p",[e._v("上面的代码比较多，但是没什么特别的逻辑，我们重点关注最后一行有效代码就行了。下面看一下 ResultLoader 的 loadResult 方法逻辑是怎样的。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public Object loadResult() throws SQLException {\n    // 执行关联查询\n    List<Object> list = selectList();\n    // 抽取结果\n    resultObject = resultExtractor.extractObjectFromList(list, targetType);\n    return resultObject;\n}\n\nprivate <E> List<E> selectList() throws SQLException {\n    Executor localExecutor = executor;\n    if (Thread.currentThread().getId() != this.creatorThreadId || localExecutor.isClosed()) {\n        localExecutor = newExecutor();\n    }\n    try {\n        // 通过 Executor 就行查询，这个之前已经分析过了\n        return localExecutor.<E>query(mappedStatement, parameterObject, RowBounds.DEFAULT,\n                                      Executor.NO_RESULT_HANDLER, cacheKey, boundSql);\n    } finally {\n        if (localExecutor != executor) {\n            localExecutor.close(false);\n        }\n    }\n}\n")])])]),n("p",[e._v("如上，我们在 ResultLoader 中终于看到了执行关联查询的代码，即 selectList 方法中的逻辑。该方法在内部通过 Executor 进行查询。至于查询结果的抽取过程，并不是本节所关心的点，因此大家自行分析吧。到此，关于关联查询与延迟加载就分析完了。最后我们来看一下映射结果的存储过程是怎样的。")]),e._v(" "),n("h5",{attrs:{id:"_2-2-6-4-存储映射结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-6-4-存储映射结果"}},[e._v("#")]),e._v(" 2.2.6.4 存储映射结果")]),e._v(" "),n("p",[e._v("存储映射结果是“查询结果”处理流程中的最后一环，实际上也是查询语句执行过程的最后一环。本节内容分析完，整个查询过程就分析完了，那接下来让我们带着喜悦的心情来分析映射结果存储逻辑。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private void storeObject(ResultHandler<?> resultHandler, DefaultResultContext<Object> resultContext,Object rowValue, ResultMapping parentMapping, ResultSet rs) throws SQLException {\n    if (parentMapping != null) {\n        // 多结果集相关，不分析了\n        linkToParents(rs, parentMapping, rowValue);\n    } else {\n        // 存储结果\n        callResultHandler(resultHandler, resultContext, rowValue);\n    }\n}\n\nprivate void callResultHandler(ResultHandler<?> resultHandler, DefaultResultContext<Object> resultContext, Object rowValue) {\n    // 设置结果到 resultContext 中\n    resultContext.nextResultObject(rowValue);\n    // 从 resultContext 获取结果，并存储到 resultHandler 中\n    ((ResultHandler<Object>) resultHandler).handleResult(resultContext);\n}\n")])])]),n("p",[e._v("如上，上面方法显示将 rowValue 设置到 ResultContext 中，然后再将 ResultContext 对象作为参数传给 ResultHandler 的 handleResult 方法。下面我们分别看一下 ResultContext 和 ResultHandler 的实现类。如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class DefaultResultContext<T> implements ResultContext<T> {\n\n    private T resultObject;\n    private int resultCount;\n    \n    /** 状态字段 */\n    private boolean stopped;\n\n    // 省略部分代码\n\n    @Override\n    public boolean isStopped() {\n        return stopped;\n    }\n\n    public void nextResultObject(T resultObject) {\n        resultCount++;\n        this.resultObject = resultObject;\n    }\n\n    @Override\n    public void stop() {\n        this.stopped = true;\n    }\n}\n")])])]),n("p",[e._v("如上，DefaultResultContext 中包含了一个状态字段，表明结果上下文的状态。在处理多行数据时，MyBatis 会检查该字段的值，已决定是否需要进行后续的处理。该类的逻辑比较简单，不多说了。下面再来看一下 DefaultResultHandler 的源码。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class DefaultResultHandler implements ResultHandler<Object> {\n\n    private final List<Object> list;\n\n    public DefaultResultHandler() {\n        list = new ArrayList<Object>();\n    }\n\n    // 省略部分源码\n    \n    @Override\n    public void handleResult(ResultContext<? extends Object> context) {\n        // 添加结果到 list 中\n        list.add(context.getResultObject());\n    }\n\n    public List<Object> getResultList() {\n        return list;\n    }\n}\n")])])]),n("p",[e._v("如上，DefaultResultHandler 默认使用 List 存储结果。除此之外，如果 Mapper （或 Dao）接口方法返回值为 Map 类型，此时则需要另一种 ResultHandler 实现类处理结果，即 DefaultMapResultHandler。关于 DefaultMapResultHandler 的源码大家自行分析吧啊，本节就不展开了。")]),e._v(" "),n("h3",{attrs:{id:"_2-3-更新语句的执行过程分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-更新语句的执行过程分析"}},[e._v("#")]),e._v(" 2.3 更新语句的执行过程分析")]),e._v(" "),n("p",[e._v("在上一节中，我较为完整的分析了查询语句的执行过程。尽管有些地方一笔带过了，但多数细节都分析到了。如果大家搞懂了查询语句的执行过程，那么理解更新语句的执行过程也将不在话下。执行更新语句所需处理的情况较之查询语句要简单不少，两者最大的区别更新语句的执行结果类型单一，处理逻辑要简单不是。除此之外，两者在缓存的处理上也有比较大的区别。更新过程会立即刷新缓存，而查询过程则不会。至于其他的不同点，就不一一列举了。下面开始分析更新语句的执行过程。")]),e._v(" "),n("h4",{attrs:{id:"_2-3-1-更新语句执行过程全貌"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-更新语句执行过程全貌"}},[e._v("#")]),e._v(" 2.3.1 更新语句执行过程全貌")]),e._v(" "),n("p",[e._v("首先，我们还是从 MapperMethod 的 execute 方法开始看起。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// -☆-  MapperMethod\npublic Object execute(SqlSession sqlSession, Object[] args) {\n    Object result;\n    switch (command.getType()) {\n        case INSERT: {    // 执行插入语句\n            Object param = method.convertArgsToSqlCommandParam(args);\n            result = rowCountResult(sqlSession.insert(command.getName(), param));\n            break;\n        }\n        case UPDATE: {    // 执行更新语句\n            Object param = method.convertArgsToSqlCommandParam(args);\n            result = rowCountResult(sqlSession.update(command.getName(), param));\n            break;\n        }\n        case DELETE: {    // 执行删除语句\n            Object param = method.convertArgsToSqlCommandParam(args);\n            result = rowCountResult(sqlSession.delete(command.getName(), param));\n            break;\n        }\n        case SELECT:\n            // ...\n            break;\n        case FLUSH:\n            // ...\n            break;\n        default:\n            throw new BindingException("Unknown execution method for: " + command.getName());\n    }\n    if (result == null && method.getReturnType().isPrimitive() && !method.returnsVoid()) {...}\n    return result;\n}\n')])])]),n("p",[e._v("如上，插入、更新以及删除操作最终都调用了 SqlSession 接口中的方法。这三个方法返回值均是受影响行数，是一个整型值。rowCountResult 方法负责处理这个整型值，该方法的逻辑暂时先不分析，放在最后分析。接下来，我们往下层走一步，进入 SqlSession 实现类 DefaultSqlSession 的代码中。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// -☆- DefaultSqlSession\npublic int insert(String statement, Object parameter) {\n    return update(statement, parameter);\n}\n\npublic int delete(String statement, Object parameter) {\n    return update(statement, parameter);\n}\n\npublic int update(String statement, Object parameter) {\n    try {\n        dirty = true;\n        // 获取 MappedStatement\n        MappedStatement ms = configuration.getMappedStatement(statement);\n        // 调用 Executor 的 update 方法\n        return executor.update(ms, wrapCollection(parameter));\n    } catch (Exception e) {\n        throw ExceptionFactory.wrapException("Error updating database.  Cause: " + e, e);\n    } finally {\n        ErrorContext.instance().reset();\n    }\n}\n')])])]),n("p",[e._v("如上，insert 和 delete 方法最终都调用了同一个 update 方法，这就是为什么我把他们归为一类的原因。既然它们最终调用的都是同一个方法，那么MyBatis 为什么还要在 SqlSession 中提供这么多方法呢，难道只提供 update 方法不行么？答案是：只提供一个 update 方法从实现上完全可行，但是从接口的语义化的角度来说，这样做并不好。一般情况下，使用者觉得 update 接口方法应该仅负责执行 UPDATE 语句，如果它还兼职执行其他的 SQL 语句，会让使用者产生疑惑。对于对外的接口，接口功能越单一，语义越清晰越好。在日常开发中，我们为客户端提供接口时，也应该这样做。比如我之前写过一个文章评论的开关接口，我写的接口如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Result openComment();\nResult closeComment();\n")])])]),n("p",[e._v("上面接口语义比较清晰，同时没有参数，后端不用校验参数，客户端同学也不用思考传什么值。如果我像下面这样定义接口：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Result updateCommentStatus(Integer status);    // 0 - 关闭，1 - 开启\n")])])]),n("p",[e._v("首先这个方法没有上面两个方法语义清晰，其次需要传入一个整型状态值，客户端需要注意传值，后端也要进行校验。好了，关于接口语义化就先说这么多。扯多了，回归正题，下面分析 Executor 的 update 方法。如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// -☆- CachingExecutor\npublic int update(MappedStatement ms, Object parameterObject) throws SQLException {\n    // 刷新二级缓存\n    flushCacheIfRequired(ms);\n    return delegate.update(ms, parameterObject);\n}\n\n// -☆- BaseExecutor\npublic int update(MappedStatement ms, Object parameter) throws SQLException {\n    if (closed) {\n        throw new ExecutorException("Executor was closed.");\n    }\n    // 刷新一级缓存\n    clearLocalCache();\n    return doUpdate(ms, parameter);\n}\n')])])]),n("p",[e._v("如上，Executor 实现类中的方法在进行下一步操作之前，都会先刷新各自的缓存。默认情况下，insert、update 和 delete 操作都会清空一二级缓存。清空缓存的逻辑不复杂，大家自行分析。下面分析 doUpdate 方法，该方法是一个抽象方法，因此我们到 BaseExecutor 的子类 SimpleExecutor 中看看该方法是如何实现的。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// -☆- SimpleExecutor\npublic int doUpdate(MappedStatement ms, Object parameter) throws SQLException {\n    Statement stmt = null;\n    try {\n        Configuration configuration = ms.getConfiguration();\n        // 创建 StatementHandler\n        StatementHandler handler = configuration.newStatementHandler(this, ms, parameter, RowBounds.DEFAULT, null, null);\n        // 创建 Statement\n        stmt = prepareStatement(handler, ms.getStatementLog());\n        // 调用 StatementHandler 的 update 方法\n        return handler.update(stmt);\n    } finally {\n        closeStatement(stmt);\n    }\n}\n")])])]),n("p",[e._v("StatementHandler 和 Statement 的创建过程前面已经分析过，这里就不重复分析了。下面分析 PreparedStatementHandler 的 update 方法。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// -☆- PreparedStatementHandler\npublic int update(Statement statement) throws SQLException {\n    PreparedStatement ps = (PreparedStatement) statement;\n    // 执行 SQL\n    ps.execute();\n    // 返回受影响行数\n    int rows = ps.getUpdateCount();\n    // 获取用户传入的参数值，参数值类型可能是普通的实体类，也可能是 Map\n    Object parameterObject = boundSql.getParameterObject();\n    \n    KeyGenerator keyGenerator = mappedStatement.getKeyGenerator();\n    // 获取自增主键的值，并将值填入到参数对象中\n    keyGenerator.processAfter(executor, mappedStatement, ps, parameterObject);\n    return rows;\n}\n")])])]),n("p",[e._v("PreparedStatementHandler 的 update 方法的逻辑比较清晰明了了，更新语句的 SQL 会在此方法中被执行。执行结果为受影响行数，对于 insert 语句，有时候我们还想获取自增主键的值，因此我们需要进行一些额外的操作。这些额外操作的逻辑封装在 KeyGenerator 的实现类中，下面我们一起看一下 KeyGenerator 的实现逻辑。")]),e._v(" "),n("h4",{attrs:{id:"_2-3-2-keygenerator"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-keygenerator"}},[e._v("#")]),e._v(" 2.3.2 KeyGenerator")]),e._v(" "),n("p",[e._v("KeyGenerator 是一个接口，目前它有三个实现类，分别如下：")]),e._v(" "),n("ol",[n("li",[e._v("Jdbc3KeyGenerator")]),e._v(" "),n("li",[e._v("SelectKeyGenerator")]),e._v(" "),n("li",[e._v("NoKeyGenerator")])]),e._v(" "),n("p",[e._v("Jdbc3KeyGenerator 用于获取插入数据后的自增主键数值。某些数据库不支持自增主键，需要手动填写主键字段，此时需要借助 SelectKeyGenerator 获取主键值。至于 NoKeyGenerator，这是一个空实现，没什么可说的。下面，我将分析 Jdbc3KeyGenerator 的源码，至于 SelectKeyGenerator，大家请自行分析。下面看源码吧。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// -☆- Jdbc3KeyGenerator\npublic void processBefore(Executor executor, MappedStatement ms, Statement stmt, Object parameter) {\n    // 空方法\n}\n\npublic void processAfter(Executor executor, MappedStatement ms, Statement stmt, Object parameter) {\n    processBatch(ms, stmt, getParameters(parameter));\n}\n\npublic void processBatch(MappedStatement ms, Statement stmt, Collection<Object> parameters) {\n    ResultSet rs = null;\n    try {\n        rs = stmt.getGeneratedKeys();\n        final Configuration configuration = ms.getConfiguration();\n        final TypeHandlerRegistry typeHandlerRegistry = configuration.getTypeHandlerRegistry();\n        // 获取主键字段\n        final String[] keyProperties = ms.getKeyProperties();\n        // 获取结果集 ResultSet 的元数据\n        final ResultSetMetaData rsmd = rs.getMetaData();\n        TypeHandler<?>[] typeHandlers = null;\n        // ResultSet 中数据的列数要大于等于主键的数量\n        if (keyProperties != null && rsmd.getColumnCount() >= keyProperties.length) {\n            // 遍历 parameters\n            for (Object parameter : parameters) {\n                // 对于批量插入，ResultSet 会返回多行数据\n                if (!rs.next()) {\n                    break;\n                }\n                final MetaObject metaParam = configuration.newMetaObject(parameter);\n                if (typeHandlers == null) {\n                    // 为每个主键属性获取 TypeHandler\n                    typeHandlers = getTypeHandlers(typeHandlerRegistry, metaParam, keyProperties, rsmd);\n                }\n\n                // 填充结果到运行时参数中\n                populateKeys(rs, metaParam, keyProperties, typeHandlers);\n            }\n        }\n    } catch (Exception e) {\n        throw new ExecutorException(...);\n    } finally {...}\n}\n\nprivate Collection<Object> getParameters(Object parameter) {\n    Collection<Object> parameters = null;\n    if (parameter instanceof Collection) {\n        parameters = (Collection) parameter;\n    } else if (parameter instanceof Map) {\n        Map parameterMap = (Map) parameter;\n        /*\n         * 如果 parameter 是 Map 类型，则从其中提取指定 key 对应的值。\n         * 至于 Map 中为什么会出现 collection/list/array 等键。大家\n         * 可以参考 DefaultSqlSession 的 wrapCollection 方法\n         */\n        if (parameterMap.containsKey("collection")) {\n            parameters = (Collection) parameterMap.get("collection");\n        } else if (parameterMap.containsKey("list")) {\n            parameters = (List) parameterMap.get("list");\n        } else if (parameterMap.containsKey("array")) {\n            parameters = Arrays.asList((Object[]) parameterMap.get("array"));\n        }\n    }\n    if (parameters == null) {\n        parameters = new ArrayList<Object>();\n        // 将普通的对象添加到 parameters 中\n        parameters.add(parameter);\n    }\n    return parameters;\n}\n')])])]),n("p",[e._v("Jdbc3KeyGenerator 的 processBefore 方法是一个空方法，processAfter 则是一个空壳方法，只有一行代码。Jdbc3KeyGenerator 的重点在 processBatch 方法中，由于存在批量插入的情况，所以该方法的名字类包含 batch 单词，表示可处理批量插入的结果集。processBatch 方法的逻辑并不是很复杂，主要流程如下：")]),e._v(" "),n("ol",[n("li",[e._v("获取主键数组(keyProperties)")]),e._v(" "),n("li",[e._v("获取 ResultSet 元数据")]),e._v(" "),n("li",[e._v("遍历参数列表，为每个主键属性获取 TypeHandler")]),e._v(" "),n("li",[e._v("从 ResultSet 中获取主键数据，并填充到参数中")])]),e._v(" "),n("p",[e._v("在上面流程中，第 1~3 步骤都是常规操作，第4个步骤需要分析一下。如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private void populateKeys(ResultSet rs, MetaObject metaParam, String[] keyProperties, TypeHandler<?>[] typeHandlers) throws SQLException {\n    // 遍历 keyProperties\n    for (int i = 0; i < keyProperties.length; i++) {\n        // 获取主键属性\n        String property = keyProperties[i];\n        TypeHandler<?> th = typeHandlers[i];\n        if (th != null) {\n            // 从 ResultSet 中获取某列的值\n            Object value = th.getResult(rs, i + 1);\n            // 设置结果值到运行时参数中\n            metaParam.setValue(property, value);\n        }\n    }\n}\n")])])]),n("p",[e._v("如上，populateKeys 方法首先是遍历主键数组，然后通过 TypeHandler 从 ResultSet 中获取自增主键的值，最后再通过元信息对象将自增主键的值设置到参数中。")]),e._v(" "),n("p",[e._v("以上就是 Jdbc3KeyGenerator 的原理分析，下面写个示例演示一下。")]),e._v(" "),n("p",[e._v("本次演示所用到的实体类如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class Author {\n    private Integer id;\n    private String name;\n    private Integer age;\n    private Integer sex;\n    private String email;\n}\n")])])]),n("p",[e._v("Mapper 接口和映射文件内容如下:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public interface AuthorDao {\n    int insertMany(List<Author> authors);\n}\n<insert id="insertMany" keyProperty="id" useGeneratedKeys="true">\n    INSERT INTO\n    \tauthor (`name`, `age`, `sex`, `email`)\n    VALUES\n    <foreach item="author" index="index" collection="list" separator=",">\n        (#{author.name}, #{author.age}, #{author.sex}, #{author.email})\n    </foreach>\n</insert>\n')])])]),n("p",[e._v("测试代码如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class InsertManyTest {\n\n    private SqlSessionFactory sqlSessionFactory;\n\n    @Before\n    public void prepare() throws IOException {\n        String resource = "mybatis-insert-many-config.xml";\n        InputStream inputStream = Resources.getResourceAsStream(resource);\n        sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n        inputStream.close();\n    }\n\n    @Test\n    public void testInsertMany() {\n        SqlSession session = sqlSessionFactory.openSession();\n        try {\n            List<Author> authors = new ArrayList<>();\n            // 添加多个 Author 对象到 authors 中\n            authors.add(new Author("tianxiaobo-1", 20, 0, "coolblog.xyz@outlook.com"));\n            authors.add(new Author("tianxiaobo-2", 18, 0, "coolblog.xyz@outlook.com"));\n\n            System.out.println("\\nBefore Insert: ");\n            authors.forEach(author -> System.out.println("  " + author));\n            System.out.println();\n\n            AuthorDao authorDao = session.getMapper(AuthorDao.class);\n            authorDao.insertMany(authors);\n            session.commit();\n\n            System.out.println("\\nAfter Insert: ");\n            authors.forEach(author -> System.out.println("  " + author));\n        } finally {\n            session.close();\n        }\n    }\n}\n')])])]),n("p",[e._v("在测试代码中，我创建了一个 Author 集合，并向集合中插入了两个 Author 对象。然后将集合中的元素批量插入到 author 表中，得到如下结果：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://blog-pictures.oss-cn-shanghai.aliyuncs.com/15343307821193.jpg",alt:"img"}})]),e._v(" "),n("p",[e._v("如上图，执行插入语句前，列表中元素的 id 字段均为 null。插入数据后，列表元素中的 id 字段均被赋值了。好了，到此，关于 Jdbc3KeyGenerator 的原理与使用就分析完了。")]),e._v(" "),n("h4",{attrs:{id:"_2-3-3-处理更新结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-3-处理更新结果"}},[e._v("#")]),e._v(" 2.3.3 处理更新结果")]),e._v(" "),n("p",[e._v("更新语句的执行结果是一个整型值，表示本次更新所影响的行数。由于返回值类型简单，因此处理逻辑也很简单。下面我们简单看一下，放松放松。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// -☆-  MapperMethod\nprivate Object rowCountResult(int rowCount) {\n    final Object result;\n\n    /*\n     * 这里的 method 类型为 MethodSignature，即方法签名，包含了某个方法较为详细的信息。\n     * 某个方法指的是 Mapper 或 Dao 接口中的方法，比如上一节示例 AuthorDao 中的\n     * insertMany 方法。\n     */\n    if (method.returnsVoid()) {\n        // 方法返回类型为 void，则不用返回结果，这里将结果置空\n        result = null;\n    } else if (Integer.class.equals(method.getReturnType()) || Integer.TYPE.equals(method.getReturnType())) {\n        // 方法返回类型为 Integer 或 int，直接赋值返回即可\n        result = rowCount;\n    } else if (Long.class.equals(method.getReturnType()) || Long.TYPE.equals(method.getReturnType())) {\n        // 如果返回值类型为 Long 或者 long，这里强转一下即可\n        result = (long) rowCount;\n    } else if (Boolean.class.equals(method.getReturnType()) || Boolean.TYPE.equals(method.getReturnType())) {\n        // 方法返回类型为布尔类型，若 rowCount > 0，则返回 ture，否则返回 false\n        result = rowCount > 0;\n    } else {\n        throw new BindingException(...);\n    }\n    return result;\n}\n")])])]),n("p",[e._v("如上，MyBatis 对于更新语句的执行结果处理逻辑足够简单，很容易看懂，我就不多说了。")]),e._v(" "),n("h3",{attrs:{id:"_2-4-小节"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-小节"}},[e._v("#")]),e._v(" 2.4 小节")]),e._v(" "),n("p",[e._v("经过前面前面的分析，相信大家对 MyBatis 执行 SQL 的过程都有比较深入的理解。本章的最后，用一张图 MyBatis 的执行过程进行一个总结。如下：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://blog-pictures.oss-cn-shanghai.aliyuncs.com/15343456438237.jpg",alt:"img"}})]),e._v(" "),n("p",[e._v("在 MyBatis 中，SQL 执行过程的实现代码是有层次的，每层都有相应的功能。比如，SqlSession 是对外接口的接口，因此它提供了各种语义清晰的方法，供使用者调用。Executor 层做的事情较多，比如一二级缓存功能就是嵌入在该层内的。StatementHandler 层主要是与 JDBC 层面的接口打交道。至于 ParameterHandler 和 ResultSetHandler，一个负责向 SQL 中设置运行时参数，另一个负责处理 SQL 执行结果，它们俩可以看做是 StatementHandler 辅助类。最后看一下右边横跨数层的类，Configuration 是一个全局配置类，很多地方都依赖它。MappedStatement 对应 SQL 配置，包含了 SQL 配置的相关信息。BoundSql 中包含了已完成解析的 SQL 语句，以及运行时参数等。")]),e._v(" "),n("p",[e._v("到此，关于 SQL 的执行过程就分析完了。内容比较多，希望大家耐心阅读。")])])}),[],!1,null,null,null);t.default=r.exports}}]);