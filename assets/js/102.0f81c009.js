(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{531:function(a,t,e){"use strict";e.r(t);var r=e(30),i=Object(r.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"java-面试题-二-的1-20题答案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-面试题-二-的1-20题答案"}},[a._v("#")]),a._v(" Java 面试题（二）的1~20题答案")]),a._v(" "),e("h3",{attrs:{id:"_1、java-中能创建-volatile-数组吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、java-中能创建-volatile-数组吗"}},[a._v("#")]),a._v(" 1、Java 中能创建 volatile 数组吗？")]),a._v(" "),e("p",[a._v("能，Java 中可以创建 volatile 类型数组，不过只是一个指向数组的引用，而不是整个数组。我的意思是，如果改变引用指向的数组，将会受到 volatile 的保护，但是如果多个线程同时改变数组的元素，volatile 标示符就不能起到之前的保护作用了。")]),a._v(" "),e("h3",{attrs:{id:"_2、volatile-能使得一个非原子操作变成原子操作吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、volatile-能使得一个非原子操作变成原子操作吗"}},[a._v("#")]),a._v(" 2、volatile 能使得一个非原子操作变成原子操作吗？")]),a._v(" "),e("p",[a._v("一个典型的例子是在类中有一个 long 类型的成员变量。如果你知道该成员变量会被多个线程访问，如计数器、价格等，你最好是将其设置为 volatile。为什么？因为 Java 中读取 long 类型变量不是原子的，需要分成两步，如果一个线程正在修改该 long 变量的值，另一个线程可能只能看到该值的一半（前 32 位）。但是对一个 volatile 型的 long 或 double 变量的读写是原子。")]),a._v(" "),e("h3",{attrs:{id:"_3、volatile-修饰符的有过什么实践"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、volatile-修饰符的有过什么实践"}},[a._v("#")]),a._v(" 3、volatile 修饰符的有过什么实践？")]),a._v(" "),e("p",[a._v("一种实践是用 volatile 修饰 long 和 double 变量，使其能按原子类型来读写。double 和 long 都是 64 位宽，因此对这两种类型的读是分为两部分的，第一次读取第一个 32 位，然后再读剩下的 32 位，这个过程不是原子的，但 Java 中volatile 型的 long 或 double 变量的读写是原子的。volatile 修复符的另一个作用是提供内存屏障（memory barrier），例如在分布式框架中的应用。简单的说，就是当你写一个 volatile 变量之前，Java 内存模型会插入一个写屏障（writebarrier），读一个 volatile 变量之前，会插入一个读屏障（read barrier）。意思就是说，在你写一个 volatile 域时，能保证任何线程都能看到你写的值，同时，在写之前，也能保证任何数值的更新对所有线程是可见的，因为内存屏障会将其他所有写的值更新到缓存。")]),a._v(" "),e("h3",{attrs:{id:"_4、volatile-类型变量提供什么保证"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、volatile-类型变量提供什么保证"}},[a._v("#")]),a._v(" 4、volatile 类型变量提供什么保证？")]),a._v(" "),e("p",[a._v("volatile 变量提供顺序和可见性保证，例如，JVM 或者 JIT 为了获得更好的性能会对语句重排序，但是 volatile 类型变量即使在没有同步块的情况下赋值也不会与其他语句重排序。 volatile 提供 happens-before 的保证，确保一个线程的修改能对其他线程是可见的。某些情况下，volatile 还能提供原子性，如读 64 位数据类型，像 long 和 double 都不是原子的，但 volatile 类型的 double 和long 就是原子的。")]),a._v(" "),e("h3",{attrs:{id:"_5、10-个线程和-2-个线程的同步代码-哪个更容易写"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5、10-个线程和-2-个线程的同步代码-哪个更容易写"}},[a._v("#")]),a._v(" 5、10 个线程和 2 个线程的同步代码，哪个更容易写？")]),a._v(" "),e("p",[a._v("从写代码的角度来说，两者的复杂度是相同的，因为同步代码与线程数量是相互独立的。但是同步策略的选择依赖于线程的数量，因为越多的线程意味着更大的竞争，所以你需要利用同步技术，如锁分离，这要求更复杂的代码和专业知识。")]),a._v(" "),e("h3",{attrs:{id:"_6、你是如何调用-wait-方法的-使用-if-块还是循环-为什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6、你是如何调用-wait-方法的-使用-if-块还是循环-为什么"}},[a._v("#")]),a._v(" 6、你是如何调用 wait（）方法的？使用 if 块还是循环？为什么？")]),a._v(" "),e("p",[a._v("wait() 方法应该在循环调用，因为当线程获取到 CPU 开始执行的时候，其他条件可能还没有满足，所以在处理前，循环检测条件是否满足会更好。下面是一段标准的使用 wait 和 notify 方法的代码：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("// The standard idiom for using the wait method\nsynchronized (obj) {\n\twhile (condition does not hold)\n\tobj.wait();\n\t// (Releases lock, and reacquires on wakeup)\n\t... // Perform action appropriate to condition\n}\n")])])]),e("h3",{attrs:{id:"_7、什么是多线程环境下的伪共享-false-sharing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7、什么是多线程环境下的伪共享-false-sharing"}},[a._v("#")]),a._v(" 7、什么是多线程环境下的伪共享（false sharing）？")]),a._v(" "),e("p",[a._v("伪共享是多线程系统（每个处理器有自己的局部缓存）中一个众所周知的性能问题。伪共享发生在不同处理器的上的线程对变量的修改依赖于相同的缓存行。")]),a._v(" "),e("h3",{attrs:{id:"_8、什么是-busy-spin-我们为什么要使用它"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8、什么是-busy-spin-我们为什么要使用它"}},[a._v("#")]),a._v(" 8、什么是 Busy spin？我们为什么要使用它？")]),a._v(" "),e("p",[a._v("Busy spin 是一种在不释放 CPU 的基础上等待事件的技术。它经常用于避免丢失 CPU 缓存中的数据（如果线程先暂停，之后在其他 CPU 上运行就会丢失）。所以，如果你的工作要求低延迟，并且你的线程目前没有任何顺序，这样你就可以通过循环检测队列中的新消息来代替调用 sleep() 或 wait() 方法。它唯一的好处就是你只需等待很短的时间，如几微秒或几纳秒。LMAX 分布式框架是一个高性能线程间通信的库，该库有一个 BusySpinWaitStrategy 类就是基于这个概念实现的，使用 busy spin 循环 EventProcessors 等待屏障。")]),a._v(" "),e("h3",{attrs:{id:"_9、java-中怎么获取一份线程-dump-文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9、java-中怎么获取一份线程-dump-文件"}},[a._v("#")]),a._v(" 9、Java 中怎么获取一份线程 dump 文件？")]),a._v(" "),e("p",[a._v("在 Linux 下，你可以通过命令 kill -3 PID （Java 进程的进程 ID）来获取 Java应用的 dump 文件。在 Windows 下，你可以按下 Ctrl + Break 来获取。这样 JVM 就会将线程的 dump 文件打印到标准输出或错误文件中，它可能打印在控制台或者日志文件中，具体位置依赖应用的配置。如果你使用 Tomcat。")]),a._v(" "),e("h3",{attrs:{id:"_10、swing-是线程安全的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10、swing-是线程安全的"}},[a._v("#")]),a._v(" 10、Swing 是线程安全的？")]),a._v(" "),e("p",[a._v("不是，Swing 不是线程安全的。你不能通过任何线程来更新 Swing 组件，如JTable、JList 或 JPanel，事实上，它们只能通过 GUI 或 AWT 线程来更新。这就是为什么 Swing供 invokeAndWait() 和 invokeLater() 方法来获取其他线程的 GUI 更新请求。这些方法将更新请求放入 AWT 的线程队列中，可以一直等待，也可以通过异步更新直接返回结果。你也可以在参考答案中查看和学习到更详细的内容。")]),a._v(" "),e("h3",{attrs:{id:"_11、什么是线程局部变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11、什么是线程局部变量"}},[a._v("#")]),a._v(" 11、什么是线程局部变量？")]),a._v(" "),e("p",[a._v("线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享。Java 提供 ThreadLocal 类来支持线程局部变量，是一种实现线程安全的方式。但是在管理环境下（如 web 服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。")]),a._v(" "),e("h3",{attrs:{id:"_12、用-wait-notify-写一段代码来解决生产者-消费者问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12、用-wait-notify-写一段代码来解决生产者-消费者问题"}},[a._v("#")]),a._v(" 12、用 wait-notify 写一段代码来解决生产者-消费者问题？")]),a._v(" "),e("p",[a._v("只要记住在同步块中调用 wait() 和 notify()方 法 ，如果阻塞，通过循环来测试等待条件。")]),a._v(" "),e("h3",{attrs:{id:"_13、用-java-写一个线程安全的单例模式-singleton"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13、用-java-写一个线程安全的单例模式-singleton"}},[a._v("#")]),a._v(" 13、用 Java 写一个线程安全的单例模式（Singleton）？")]),a._v(" "),e("p",[a._v("一步一步创建一个线程安全的 Java 单例类。当我们说线程安全时，意思是即使初始化是在多线程环境中，仍然能保证单个实例。Java 中，使用枚举作为单例类是最简单的方式来创建线程安全单例模式的方式。")]),a._v(" "),e("h3",{attrs:{id:"_14、java-中-sleep-方法和-wait-方法的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14、java-中-sleep-方法和-wait-方法的区别"}},[a._v("#")]),a._v(" 14、Java 中 sleep 方法和 wait 方法的区别？")]),a._v(" "),e("p",[a._v("虽然两者都是用来暂停当前运行的线程，但是 sleep() 实际上只是短暂停顿，因为它不会释放锁，而 wait() 意味着条件等待，这就是为什么该方法要释放锁，因为只有这样，其他等待的线程才能在满足条件时获取到该锁。")]),a._v(" "),e("h3",{attrs:{id:"_15、什么是不可变对象-immutable-object-java-中怎么创建一个不可变对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_15、什么是不可变对象-immutable-object-java-中怎么创建一个不可变对象"}},[a._v("#")]),a._v(" 15、什么是不可变对象（immutable object）？Java 中怎么创建一个不可变对象？")]),a._v(" "),e("p",[a._v("不可变对象指对象一旦被创建，状态就不能再改变。任何修改都会创建一个新的对象，如 String、Integer 及其它包装类。详情参见答案，一步一步指导你在 Java中创建一个不可变的类。")]),a._v(" "),e("h3",{attrs:{id:"_16、我们能创建一个包含可变对象的不可变对象吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_16、我们能创建一个包含可变对象的不可变对象吗"}},[a._v("#")]),a._v(" 16、我们能创建一个包含可变对象的不可变对象吗？")]),a._v(" "),e("p",[a._v("是的，我们是可以创建一个包含可变对象的不可变对象的，你只需要谨慎一点，不要共享可变对象的引用就可以了，如果需要变化时，就返回原对象的一个拷贝。最常见的例子就是对象中包含一个日期对象的引用。数据类型和 Java 基础面试问题")]),a._v(" "),e("h3",{attrs:{id:"_17、java-中应该使用什么数据类型来代表价格"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_17、java-中应该使用什么数据类型来代表价格"}},[a._v("#")]),a._v(" 17、Java 中应该使用什么数据类型来代表价格？")]),a._v(" "),e("p",[a._v("如果不是特别关心内存和性能的话，使用 BigDecimal，否则使用预定义精度的double 类型。")]),a._v(" "),e("h3",{attrs:{id:"_18、怎么将-byte-转换为-string"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_18、怎么将-byte-转换为-string"}},[a._v("#")]),a._v(" 18、怎么将 byte 转换为 String？")]),a._v(" "),e("p",[a._v("可以使用 String 接收 byte[] 参数的构造器来进行转换，需要注意的点是要使用的正确的编码，否则会使用平台默认编码，这个编码可能跟原来的编码相同，也可能不同。")]),a._v(" "),e("h3",{attrs:{id:"_19、java-中怎样将-bytes-转换为-long-类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_19、java-中怎样将-bytes-转换为-long-类型"}},[a._v("#")]),a._v(" 19、Java 中怎样将 bytes 转换为 long 类型？")]),a._v(" "),e("p",[a._v("bytes[] 到数字类型的转换是个经常用到的代码,解决方式也不止一种。")]),a._v(" "),e("h4",{attrs:{id:"java代码实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java代码实现"}},[a._v("#")]),a._v(" java代码实现")]),a._v(" "),e("p",[a._v("如果不想借助任何已经有的类，完全可以自己实现这段代码，如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("/**\n     * 将字节数组转为long<br>\n     * 如果input为null,或offset指定的剩余数组长度不足8字节则抛出异常\n     * @param input \n     * @param offset 起始偏移量\n     * @param littleEndian 输入数组是否小端模式\n     * @return\n     */\npublic static long longFrom8Bytes(byte[] input, int offset, Boolean littleEndian){\n\tlong value=0;\n\t// 循环读取每个字节通过移位运算完成long的8个字节拼装\n\tfor (int  count=0;count<8;++count){\n\t\tint shift=(littleEndian?count:(7-count))<<3;\n\t\tvalue |=((long)0xff<< shift) & ((long)input[offset+count] << shift);\n\t}\n\treturn value;\n}\n")])])]),e("h4",{attrs:{id:"借助java-nio-bytebuffer实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#借助java-nio-bytebuffer实现"}},[a._v("#")]),a._v(" 借助java.nio.ByteBuffer实现")]),a._v(" "),e("p",[a._v("java.nio.ByteBuffer 本身就有getLong,getInt,getFloat….方法,只要将byte[]转换为ByteBuffer就可以实现所有primitive类型的数据读取,参见javadoc。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("/**\n     * 利用 {@link java.nio.ByteBuffer}实现byte[]转long\n     * @param input\n     * @param offset \n     * @param littleEndian 输入数组是否小端模式\n     * @return\n     */\npublic static long bytesTolong(byte[] input, int offset, Boolean littleEndian) {\n\t// 将byte[] 封装为 ByteBuffer \n\tByteBuffer buffer = ByteBuffer.wrap(input,offset,8);\n\tif(littleEndian){\n\t\t// ByteBuffer.order(ByteOrder) 方法指定字节序,即大小端模式(BIG_ENDIAN/LITTLE_ENDIAN)\n\t\t// ByteBuffer 默认为大端(BIG_ENDIAN)模式 \n\t\tbuffer.order(ByteOrder.LITTLE_ENDIAN);\n\t}\n\treturn buffer.getlong();\n}\n")])])]),e("h4",{attrs:{id:"借助java-io-datainputstream实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#借助java-io-datainputstream实现"}},[a._v("#")]),a._v(" 借助java.io.DataInputStream实现")]),a._v(" "),e("p",[a._v("java.io.DataInputStream 同样提供了readLong,readLong,readLong….方法,只要将byte[]转换为DataInputStream就可以实现所有primitive类型的数据读取,参见javadoc。")]),a._v(" "),e("h3",{attrs:{id:"_20、我们能将-int-强制转换为-byte-类型的变量吗-如果该值大于-byte-类型的范围-将会出现什么现象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_20、我们能将-int-强制转换为-byte-类型的变量吗-如果该值大于-byte-类型的范围-将会出现什么现象"}},[a._v("#")]),a._v(" 20、我们能将 int 强制转换为 byte 类型的变量吗？如果该值大于 byte 类型的范围，将会出现什么现象？")]),a._v(" "),e("p",[a._v("是的，我们可以做强制转换，但是 Java 中 int 是 32 位的，而 byte 是 8 位的，所以，如果强制转化是，int 类型的高 24 位将会被丢弃，byte 类型的范围是从 -128 到 127。")])])}),[],!1,null,null,null);t.default=i.exports}}]);