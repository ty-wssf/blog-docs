(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{469:function(e,t,s){"use strict";s.r(t);var a=s(30),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"mybatis-多数据源最简解决方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-多数据源最简解决方案"}},[e._v("#")]),e._v(" Mybatis 多数据源最简解决方案")]),e._v(" "),s("h2",{attrs:{id:"配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置文件"}},[e._v("#")]),e._v(" 配置文件")]),e._v(" "),s("p",[e._v("Pom 包就不贴了比较简单该依赖的就依赖，主要是数据库这边的配置：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("mybatis.config-location=classpath:mybatis/mybatis-config.xml\n\nspring.datasource.test1.jdbc-url=jdbc:mysql://localhost:3306/test1?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8&useSSL=true\nspring.datasource.test1.username=root\nspring.datasource.test1.password=root\nspring.datasource.test1.driver-class-name=com.mysql.cj.jdbc.Driver\n\nspring.datasource.test2.jdbc-url=jdbc:mysql://localhost:3306/test2?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8&useSSL=true\nspring.datasource.test2.username=root\nspring.datasource.test2.password=root\nspring.datasource.test2.driver-class-name=com.mysql.cj.jdbc.Driver\n")])])]),s("p",[e._v("一个 test1 库和一个 test2 库，其中 test1 位主库，在使用的过程中必须指定主库，不然会报错。")]),e._v(" "),s("h2",{attrs:{id:"数据源配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据源配置"}},[e._v("#")]),e._v(" 数据源配置")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('@Configuration\n@MapperScan(basePackages = "com.neo.mapper.test1", sqlSessionTemplateRef  = "test1SqlSessionTemplate")\npublic class DataSource1Config {\n\n    @Bean(name = "test1DataSource")\n    @ConfigurationProperties(prefix = "spring.datasource.test1")\n    @Primary\n    public DataSource testDataSource() {\n        return DataSourceBuilder.create().build();\n    }\n\n    @Bean(name = "test1SqlSessionFactory")\n    @Primary\n    public SqlSessionFactory testSqlSessionFactory(@Qualifier("test1DataSource") DataSource dataSource) throws Exception {\n        SqlSessionFactoryBean bean = new SqlSessionFactoryBean();\n        bean.setDataSource(dataSource);\n        bean.setMapperLocations(new PathMatchingResourcePatternResolver().getResources("classpath:mybatis/mapper/test1/*.xml"));\n        return bean.getObject();\n    }\n\n    @Bean(name = "test1TransactionManager")\n    @Primary\n    public DataSourceTransactionManager testTransactionManager(@Qualifier("test1DataSource") DataSource dataSource) {\n        return new DataSourceTransactionManager(dataSource);\n    }\n\n    @Bean(name = "test1SqlSessionTemplate")\n    @Primary\n    public SqlSessionTemplate testSqlSessionTemplate(@Qualifier("test1SqlSessionFactory") SqlSessionFactory sqlSessionFactory) throws Exception {\n        return new SqlSessionTemplate(sqlSessionFactory);\n    }\n}\n')])])]),s("p",[e._v("最关键的地方就是这块了，一层一层注入,首先创建 DataSource，然后创建 SqlSessionFactory 再创建事务，最后包装到 SqlSessionTemplate 中。其中需要指定分库的 mapper 文件地址，以及分库dao层代码")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('@MapperScan(basePackages = "com.neo.mapper.test1", sqlSessionTemplateRef  = "test1SqlSessionTemplate")\n')])])]),s("p",[e._v("这块的注解就是指明了扫描 dao 层，并且给 dao 层注入指定的 SqlSessionTemplate。所有"),s("code",[e._v("@Bean")]),e._v("都需要按照命名指定正确。")]),e._v(" "),s("h2",{attrs:{id:"dao-层和-xml层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dao-层和-xml层"}},[e._v("#")]),e._v(" dao 层和 xml层")]),e._v(" "),s("p",[e._v("dao 层和 xml 需要按照库来分在不同的目录，比如：test1 库 dao 层在 "),s("code",[e._v("com.neo.mapper.test1")]),e._v(" 包下，test2 库在"),s("code",[e._v("com.neo.mapper.test2")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("public interface User1Mapper {\n\tList<UserEntity> getAll();\n\tUserEntity getOne(Long id);\n\tvoid insert(UserEntity user);\n\tvoid update(UserEntity user);\n\tvoid delete(Long id);\n}\n")])])]),s("p",[e._v("xml 层")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('<mapper namespace="com.neo.mapper.test1.User1Mapper" >\n    <resultMap id="BaseResultMap" type="com.neo.model.User" >\n        <id column="id" property="id" jdbcType="BIGINT" />\n        <result column="userName" property="userName" jdbcType="VARCHAR" />\n        <result column="passWord" property="passWord" jdbcType="VARCHAR" />\n        <result column="user_sex" property="userSex" javaType="com.neo.enums.UserSexEnum"/>\n        <result column="nick_name" property="nickName" jdbcType="VARCHAR" />\n    </resultMap>\n    \n    <sql id="Base_Column_List" >\n        id, userName, passWord, user_sex, nick_name\n    </sql>\n\n    <select id="getAll" resultMap="BaseResultMap"  >\n       SELECT \n       <include refid="Base_Column_List" />\n     FROM users\n    </select>\n\n    <select id="getOne" parameterType="java.lang.Long" resultMap="BaseResultMap" >\n        SELECT \n       <include refid="Base_Column_List" />\n     FROM users\n     WHERE id = #{id}\n    </select>\n\n    <insert id="insert" parameterType="com.neo.model.User" >\n       INSERT INTO \n          users\n          (userName,passWord,user_sex) \n        VALUES\n          (#{userName}, #{passWord}, #{userSex})\n    </insert>\n    \n    <update id="update" parameterType="com.neo.model.User" >\n       UPDATE \n          users \n       SET \n        <if test="userName != null">userName = #{userName},</if>\n        <if test="passWord != null">passWord = #{passWord},</if>\n        nick_name = #{nickName}\n       WHERE \n          id = #{id}\n    </update>\n    \n    <delete id="delete" parameterType="java.lang.Long" >\n       DELETE FROM\n           users \n       WHERE \n           id =#{id}\n    </delete>\n\n</mapper>\n')])])]),s("h2",{attrs:{id:"测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[e._v("#")]),e._v(" 测试")]),e._v(" "),s("p",[e._v("测试可以使用 SpringBootTest,也可以放到 Controller中，这里只贴 Controller 层的使用")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('@RestController\npublic class UserController {\n\n    @Autowired\n    private User1Mapper user1Mapper;\n\n\t@Autowired\n\tprivate User2Mapper user2Mapper;\n\t\n\t@RequestMapping("/getUsers")\n\tpublic List<UserEntity> getUsers() {\n\t\tList<UserEntity> users=user1Mapper.getAll();\n\t\treturn users;\n\t}\n\t\n    @RequestMapping("/getUser")\n    public UserEntity getUser(Long id) {\n    \tUserEntity user=user2Mapper.getOne(id);\n        return user;\n    }\n    \n    @RequestMapping("/add")\n    public void save(UserEntity user) {\n        user2Mapper.insert(user);\n    }\n    \n    @RequestMapping(value="update")\n    public void update(UserEntity user) {\n        user2Mapper.update(user);\n    }\n    \n    @RequestMapping(value="/delete/{id}")\n    public void delete(@PathVariable("id") Long id) {\n        user1Mapper.delete(id);\n    }\n    \n}\n')])])]),s("p",[e._v("Mybatis 注解版本配置多数据源和 Xml 版本基本一致。")])])}),[],!1,null,null,null);t.default=n.exports}}]);