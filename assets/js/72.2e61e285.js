(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{500:function(t,e,a){"use strict";a.r(e);var s=a(30),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"如何优雅的使用-mybatis-之-mybatis-plus"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何优雅的使用-mybatis-之-mybatis-plus"}},[t._v("#")]),t._v(" 如何优雅的使用 MyBatis 之 MyBatis-Plus")]),t._v(" "),a("h2",{attrs:{id:"mybatis-plus-介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-plus-介绍"}},[t._v("#")]),t._v(" MyBatis-Plus 介绍")]),t._v(" "),a("p",[t._v("MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。")]),t._v(" "),a("blockquote",[a("p",[t._v("官方愿景：成为 MyBatis 最好的搭档，就像 魂斗罗 中的 1P、2P，基友搭配，效率翻倍。")])]),t._v(" "),a("p",[t._v("根据愿景甚至还设置了一个很酷的 Logo。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://mp.baomidou.com/img/relationship-with-mybatis.png",alt:"img"}})]),t._v(" "),a("blockquote",[a("p",[t._v("官网地址：https://mybatis.plus/，本文大部分内容参考自官网。")])]),t._v(" "),a("p",[a("strong",[t._v("特性")])]),t._v(" "),a("p",[t._v("官网说的特性太多了，挑了几个有特点的分享给大家。")]),t._v(" "),a("ul",[a("li",[t._v("无侵入：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑")]),t._v(" "),a("li",[t._v("损耗小：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作")]),t._v(" "),a("li",[t._v("强大的 CRUD 操作：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求")]),t._v(" "),a("li",[t._v("支持 Lambda 形式调用：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错")]),t._v(" "),a("li",[t._v("支持多种数据库：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer2005、SQLServer 等多种数据库")]),t._v(" "),a("li",[t._v("内置分页插件：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询")])]),t._v(" "),a("h2",{attrs:{id:"快速上手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快速上手"}},[t._v("#")]),t._v(" 快速上手")]),t._v(" "),a("h3",{attrs:{id:"准备数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#准备数据"}},[t._v("#")]),t._v(" 准备数据")]),t._v(" "),a("p",[t._v("我们首先设计一个这样的用户表，如下：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("id")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("name")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("age")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("email")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("neo")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("18")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("smile1@baomidou.com")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("keep")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("36")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("smile2@baomidou.com")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("3")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("pure")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("28")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("smile3@baomidou.com")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("4")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("smile")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("21")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("smile4@baomidou.com")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("5")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("it")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("24")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("smile5@baomidou.com")])])])]),t._v(" "),a("p",[t._v("我们要创建两个 Sql 文件，以便项目启动的时候，将表结构和数据初始化到数据库。")]),t._v(" "),a("p",[t._v("表结构文件（schema-h2.sql）内容：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("DROP TABLE IF EXISTS user;\n\nCREATE TABLE user\n(\n\tid BIGINT(20) NOT NULL COMMENT '主键ID',\n\tname VARCHAR(30) NULL DEFAULT NULL COMMENT '姓名',\n\tage INT(11) NULL DEFAULT NULL COMMENT '年龄',\n\temail VARCHAR(50) NULL DEFAULT NULL COMMENT '邮箱',\n\tPRIMARY KEY (id)\n);\n")])])]),a("p",[t._v("表数据文件（data-h2.sql）内容：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("INSERT INTO user (id, name, age, email) VALUES\n(1, 'neo', 18, 'smile1@ityouknow.com'),\n(2, 'keep', 36, 'smile2@ityouknow.com'),\n(3, 'pure', 28, 'smile3@ityouknow.com'),\n(4, 'smile', 21, 'smile4@ityouknow.com'),\n(5, 'it', 24, 'smile5@ityouknow.com');\n")])])]),a("p",[t._v("在示例项目的 resources 目录下创建 db 文件夹，将两个文件放入其中。")]),t._v(" "),a("h3",{attrs:{id:"添加依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加依赖"}},[t._v("#")]),t._v(" 添加依赖")]),t._v(" "),a("p",[t._v("添加相关依赖包，pom.xml 中的相关依赖内容如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<dependencies>\n\t<dependency>\n\t\t<groupId>org.projectlombok</groupId>\n\t\t<artifactId>lombok</artifactId>\n\t\t<optional>true</optional>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>com.baomidou</groupId>\n\t\t<artifactId>mybatis-plus-boot-starter</artifactId>\n\t\t<version>3.1.1</version>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>com.h2database</groupId>\n\t\t<artifactId>h2</artifactId>\n\t\t<scope>runtime</scope>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t<scope>test</scope>\n\t</dependency>\n</dependencies>\n")])])]),a("ul",[a("li",[t._v("lombok，帮忙省略掉 Get/Set 方法，"),a("a",{attrs:{href:"http://www.justdojava.com/2019/05/01/java-lombok/",target:"_blank",rel:"noopener noreferrer"}},[t._v("具体可以参考这篇文章"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("mybatis-plus-boot-starter，MyBatis Plus 的依赖包")]),t._v(" "),a("li",[t._v("h2，本次测试我们使用内存数据库 h2 来演示。")]),t._v(" "),a("li",[t._v("spring-boot-starter-test，Spring Boot 的测试包")])]),t._v(" "),a("h3",{attrs:{id:"配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置文件"}},[t._v("#")]),t._v(" 配置文件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# DataSource Config\nspring:\n    datasource:\n        driver-class-name: org.h2.Driver\n        schema: classpath:db/schema-h2.sql\n        data: classpath:db/data-h2.sql\n        url: jdbc:h2:mem:test\n        username: root\n        password: test\n\n# Logger Config\nlogging:\n    level:\n      com.neo: debug\n")])])]),a("p",[t._v("配置了 h2 数据库，已经项目的日志级别。配置 schema 和 data 后，项目启动时会根据配置的文件地址来执行数据。")]),t._v(" "),a("h3",{attrs:{id:"业务代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#业务代码"}},[t._v("#")]),t._v(" 业务代码")]),t._v(" "),a("p",[t._v("创建 MybatisPlusConfig 类，指定 Mapper 地址，启用分页功能。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('@Configuration\n@MapperScan("com.neo.mapper")\npublic class MybatisPlusConfig {\n\n    /**\n     * 分页插件\n     */\n    @Bean\n    public PaginationInterceptor paginationInterceptor() {\n        return new PaginationInterceptor();\n    }\n}\n')])])]),a("p",[t._v("创建实体类 User")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("@Data\npublic class User {\n    private Long id;\n    private String name;\n    private Integer age;\n    private String email;\n}\n")])])]),a("p",[a("code",[t._v("@Data")]),t._v(" 为 lombok 语法，自动注入 getter/setter 方法。")]),t._v(" "),a("p",[t._v("接下来创建对象对于的 Mapper。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("public interface UserMapper extends BaseMapper<User> {\n}\n")])])]),a("p",[t._v("以上业务代码就开发完成了，是不是很简单。")]),t._v(" "),a("h3",{attrs:{id:"测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[t._v("#")]),t._v(" 测试")]),t._v(" "),a("p",[t._v("创建 MyBatisPlusTest 类，注入上面创建的 UserMapper 类。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class MyBatisPlusTest {\n    @Autowired\n    private UserMapper userMapper;\n}\n")])])]),a("p",[t._v("测试查询单挑数据，并输出")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("@Test\npublic void testSelectOne() {\n    User user = userMapper.selectById(1L);\n    System.out.println(user);\n}\n")])])]),a("p",[t._v("测试添加数据")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('@Test\npublic void testInsert() {\n    User user = new User();\n    user.setName("微笑");\n    user.setAge(3);\n    user.setEmail("neo@tooool.org");\n    assertThat(userMapper.insert(user)).isGreaterThan(0);\n    // 成功直接拿会写的 ID\n    assertThat(user.getId()).isNotNull();\n}\n')])])]),a("p",[t._v("assertThat() 是 Assert 的一个精通方法，用来比对返回结果，包来自"),a("code",[t._v("import static org.assertj.core.api.Assertions.assertThat;")]),t._v("。")]),t._v(" "),a("p",[t._v("测试删除数据")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('@Test\npublic void testDelete() {\n    assertThat(userMapper.deleteById(3L)).isGreaterThan(0);\n    assertThat(userMapper.delete(new QueryWrapper<User>()\n            .lambda().eq(User::getName, "smile"))).isGreaterThan(0);\n}\n')])])]),a("p",[a("code",[t._v("QueryWrapper")]),t._v(" 是 MyBatis-Plus 内部辅助查询类，可以使用 lambda 语法，也可以不使用。利用 QueryWrapper 类可以构建各种查询条件。")]),t._v(" "),a("p",[t._v("测试更新数据")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('@Test\npublic void testUpdate() {\n    User user = userMapper.selectById(2);\n    assertThat(user.getAge()).isEqualTo(36);\n    assertThat(user.getName()).isEqualTo("keep");\n\n    userMapper.update(\n            null,\n            Wrappers.<User>lambdaUpdate().set(User::getEmail, "123@123").eq(User::getId, 2)\n    );\n    assertThat(userMapper.selectById(2).getEmail()).isEqualTo("123@123");\n}\n')])])]),a("p",[t._v("测试查询所有数据")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("@Test\npublic void testSelect() {\n    List<User> userList = userMapper.selectList(null);\n    Assert.assertEquals(5, userList.size());\n    userList.forEach(System.out::println);\n}\n")])])]),a("p",[t._v("测试非分页查询")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('@Test\npublic void testPage() {\n    System.out.println("----- baseMapper 自带分页 ------");\n    Page<User> page = new Page<>(1, 2);\n    IPage<User> userIPage = userMapper.selectPage(page, new QueryWrapper<User>()\n            .gt("age", 6));\n    assertThat(page).isSameAs(userIPage);\n    System.out.println("总条数 ------\x3e " + userIPage.getTotal());\n    System.out.println("当前页数 ------\x3e " + userIPage.getCurrent());\n    System.out.println("当前每页显示数 ------\x3e " + userIPage.getSize());\n    print(userIPage.getRecords());\n    System.out.println("----- baseMapper 自带分页 ------");\n}\n')])])]),a("p",[t._v("查询大于 6 岁的用户，并且分页展示，每页两条数据，展示第一页。")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("简单使用了一下 MyBatis-Plus 感觉是一款挺不错的 MyBatis 插件，使用 MyBatis-Plus 操作数据库确实可以少写一些代码，另外 MyBatis-Plus 的功能比较丰富，文中仅展示了常用的增删改查和分页查询，如果想进一步学习可以关注官网示例。")])])}),[],!1,null,null,null);e.default=r.exports}}]);